// Data model of a ruleset.
// See YARA's documentation for more details.

syntax = "proto2";

message RuleModifiers {
  optional bool global = 1;
  optional bool private = 2;
}

message Meta {
  optional string key = 1;  // Required
  oneof value {
    string text = 2;
    int64 number = 3;
    bool boolean = 4;
  }
}

message StringModifiers {
  optional bool nocase = 1;
  optional bool ascii = 2;
  optional bool wide = 3;
  optional bool fullword = 4;
  optional bool xor = 5;
  optional bool i = 6;
  optional bool s = 7;
}

message String {
  optional string id = 1;  // Required
  enum Type {
    UNKNOWN = 0;
    TEXT = 1; 
    HEX = 2;
    REGEX = 3;
  }
  optional Type type = 2;  // Required
  optional string text = 3;  // Required
  optional StringModifiers modifiers = 4;
}

message BinaryExpression {
  enum Operator {
    UNKNOWN = 0;
    MATCHES = 1;
    CONTAINS = 2;
    AT = 3;
    IN = 4;
    LT = 5; 
    GT = 6;
    LE = 7;
    GE = 8;
    EQ = 9;
    NEQ = 10;
    INTEGER_FUNCTION = 11;
    PLUS = 12;
    MINUS = 13;
    TIMES = 14;
    DIV = 15;
    MOD = 16;
    XOR = 17;
    BITWISE_AND = 18;
    BITWISE_OR = 19;
    SHIFT_LEFT = 20;
    SHIFT_RIGHT = 21;
  }

  optional Operator operator = 1;  // Required
  optional Expression left = 2;  // Required
  optional Expression right = 3;  // Required
}

message UnaryExpression {
  enum Operator {
    UNKNOWN = 0;
    UNARY_MINUS = 1;
    BITWISE_NOT = 2;
  }

  optional Operator operator = 1;  // Required
  optional Expression expression = 2;  // Required
}

message Range {
  optional Expression start = 1;  // Required
  optional Expression end = 2;  // Required
}

message Regexp {
  optional string text = 1;  // Required
  optional StringModifiers modifiers = 2;
}

message IntegerFunction {
  optional string function = 1;  // Required
  optional Expression expression = 2;  // Required
}

message ForInExpression {
  optional ForExpression for_expression = 1;  // Required
  optional string identifier = 2;  // Required
  optional IntegerSet integer_set = 3;  // Required
  optional Expression expression = 4;  // Required
}

message IntegerSet {
  oneof set {
    IntegerEnumeration integer_enumeration = 1;
    Range range = 2;
  }
}

message IntegerEnumeration {
  repeated Expression values = 1;
}

message ForExpression {
  oneof for {
    Expression expression = 1;  
    ForKeyword keyword = 2;
  }
}

message ForOfExpression {
  optional ForExpression for_expression = 1;  // Required
  optional StringSet string_set = 2;  // Required
  optional Expression expression = 3;
}

message StringSet {
  oneof set {
    StringEnumeration strings = 1;
    StringSetKeyword keyword = 2;
  }
}

message StringEnumeration {
  message StringEnumerationItem {
    optional string string_identifier = 1;
    optional bool has_wildcard = 2;
  }

  repeated StringEnumerationItem items = 1;
}

enum Keyword {
  UNKNOWN = 1;
  ENTRYPOINT = 2;
  FILESIZE = 3;
}

enum ForKeyword {
  ALL = 1;
  ANY = 2;
}

enum StringSetKeyword {
  THEM = 1;
}

message Expression {
  oneof expression {
    bool bool_value = 1;
    BinaryExpression binary_expression = 2;
    UnaryExpression unary_expression = 3;
    string string_identifier = 4;
    ForInExpression for_in_expression = 5;
    ForOfExpression for_of_expression = 6; 
    Expression not_expression = 7;
    Expressions or_expression = 8;
    Expressions and_expression = 9;
    Range range = 10;
    Regexp regexp = 11;
    Keyword keyword = 12;
    int64 number_value = 13;
    double double_value = 14; 
    string text = 15;
    string string_count = 16;
    StringOffset string_offset = 17;
    StringLength string_length = 18;
    Identifier identifier = 19;
    IntegerFunction integer_function = 20;
  }
}

message StringOffset {
  optional string string_identifier = 1;  // Required
  optional Expression index = 2;
}

message StringLength {
  optional string string_identifier = 1;  // Required
  optional Expression index = 2;
}

message Identifier {
  message IdentifierItem {
    oneof item {
      string identifier = 1;
      Expression expression = 2;
      Expressions arguments = 3;
    }
  }

  repeated IdentifierItem items = 1;
}

message Expressions {
  repeated Expression terms = 1;  
}

message Rule {
  optional RuleModifiers modifiers = 1;
  optional string identifier = 2;  // Required
  repeated string tags = 3;
  repeated Meta meta = 4;
  repeated String strings = 5;
  optional Expression condition = 6;
}

message RuleSet {
  repeated string imports = 1;
  repeated string includes = 2;
  repeated Rule rules = 3;
}

