// Code generated by goyacc -p yr -o parser.go grammar.y. DO NOT EDIT.

//line grammar.y:31
package gyp

import __yyfmt__ "fmt"

//line grammar.y:31

import (
	"fmt"
	proto "github.com/golang/protobuf/proto"

	"github.com/VirusTotal/gyp/ast"
	"github.com/VirusTotal/gyp/error"
)

var ParsedRuleset ast.RuleSet

//line grammar.y:141
type yrSymType struct {
	yys int
	i64 int64
	f64 float64
	s   string
	ss  []string

	rm        *ast.RuleModifiers
	m         []*ast.Meta
	mp        *ast.Meta
	mod       *ast.StringModifiers
	reg       ast.Regexp
	regp      *ast.Regexp
	ys        *ast.String
	yss       []*ast.String
	yr        *ast.Rule
	id        *ast.Identifier
	forexp    *ast.ForExpression
	intset    *ast.IntegerSet
	intenum   *ast.IntegerEnumeration
	rng       *ast.Range
	strset    *ast.StringSet
	strenumi  *ast.StringEnumeration_StringEnumerationItem
	strenum   *ast.StringEnumeration
	expr      *ast.Expression
	exprs     *ast.Expressions
	hextokens *ast.HexTokens
}

const _END_OF_INCLUDED_FILE_ = 57346
const _DOT_DOT_ = 57347
const _RULE_ = 57348
const _PRIVATE_ = 57349
const _GLOBAL_ = 57350
const _META_ = 57351
const _STRINGS_ = 57352
const _CONDITION_ = 57353
const _IDENTIFIER_ = 57354
const _STRING_IDENTIFIER_ = 57355
const _STRING_COUNT_ = 57356
const _STRING_OFFSET_ = 57357
const _STRING_LENGTH_ = 57358
const _STRING_IDENTIFIER_WITH_WILDCARD_ = 57359
const _NUMBER_ = 57360
const _DOUBLE_ = 57361
const _INTEGER_FUNCTION_ = 57362
const _TEXT_STRING_ = 57363
const _HEX_STRING_ = 57364
const _REGEXP_ = 57365
const _ASCII_ = 57366
const _WIDE_ = 57367
const _XOR_ = 57368
const _NOCASE_ = 57369
const _FULLWORD_ = 57370
const _AT_ = 57371
const _FILESIZE_ = 57372
const _ENTRYPOINT_ = 57373
const _ALL_ = 57374
const _ANY_ = 57375
const _IN_ = 57376
const _OF_ = 57377
const _FOR_ = 57378
const _THEM_ = 57379
const _MATCHES_ = 57380
const _CONTAINS_ = 57381
const _IMPORT_ = 57382
const _TRUE_ = 57383
const _FALSE_ = 57384
const _LBRACE_ = 57385
const _RBRACE_ = 57386
const _INCLUDE_ = 57387
const _OR_ = 57388
const _AND_ = 57389
const _EQ_ = 57390
const _NEQ_ = 57391
const _LT_ = 57392
const _LE_ = 57393
const _GT_ = 57394
const _GE_ = 57395
const _SHIFT_LEFT_ = 57396
const _SHIFT_RIGHT_ = 57397
const _NOT_ = 57398
const UNARY_MINUS = 57399

var yrToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_END_OF_INCLUDED_FILE_",
	"_DOT_DOT_",
	"_RULE_",
	"_PRIVATE_",
	"_GLOBAL_",
	"_META_",
	"_STRINGS_",
	"_CONDITION_",
	"_IDENTIFIER_",
	"_STRING_IDENTIFIER_",
	"_STRING_COUNT_",
	"_STRING_OFFSET_",
	"_STRING_LENGTH_",
	"_STRING_IDENTIFIER_WITH_WILDCARD_",
	"_NUMBER_",
	"_DOUBLE_",
	"_INTEGER_FUNCTION_",
	"_TEXT_STRING_",
	"_HEX_STRING_",
	"_REGEXP_",
	"_ASCII_",
	"_WIDE_",
	"_XOR_",
	"_NOCASE_",
	"_FULLWORD_",
	"_AT_",
	"_FILESIZE_",
	"_ENTRYPOINT_",
	"_ALL_",
	"_ANY_",
	"_IN_",
	"_OF_",
	"_FOR_",
	"_THEM_",
	"_MATCHES_",
	"_CONTAINS_",
	"_IMPORT_",
	"_TRUE_",
	"_FALSE_",
	"_LBRACE_",
	"_RBRACE_",
	"_INCLUDE_",
	"_OR_",
	"_AND_",
	"'|'",
	"'^'",
	"'&'",
	"_EQ_",
	"_NEQ_",
	"_LT_",
	"_LE_",
	"_GT_",
	"_GE_",
	"_SHIFT_LEFT_",
	"_SHIFT_RIGHT_",
	"'+'",
	"'-'",
	"'*'",
	"'\\\\'",
	"'%'",
	"_NOT_",
	"'~'",
	"UNARY_MINUS",
	"':'",
	"'='",
	"'.'",
	"'['",
	"']'",
	"'('",
	"')'",
	"','",
}
var yrStatenames = [...]string{}

const yrEofCode = 1
const yrErrCode = 2
const yrInitialStackSize = 16

//line grammar.y:1074

func createOrExpression(terms ...*ast.Expression) (or *ast.Expression) {
	expressions := []*ast.Expression{}
	for _, term := range terms {
		if term.GetOrExpression() == nil {
			expressions = append(expressions, term)
		} else {
			expressions = append(expressions, term.GetOrExpression().GetTerms()...)
		}
	}

	or = &ast.Expression{
		Expression: &ast.Expression_OrExpression{&ast.Expressions{Terms: expressions}},
	}

	return
}

func createAndExpression(terms ...*ast.Expression) (and *ast.Expression) {
	expressions := []*ast.Expression{}
	for _, term := range terms {
		if term.GetAndExpression() == nil {
			expressions = append(expressions, term)
		} else {
			expressions = append(expressions, term.GetAndExpression().GetTerms()...)
		}
	}

	and = &ast.Expression{
		Expression: &ast.Expression_AndExpression{&ast.Expressions{Terms: expressions}},
	}

	return
}

//line yacctab:1
var yrExca = [...]int{
	-1, 1,
	1, -1,
	-2, 15,
	-1, 42,
	23, 34,
	-2, 32,
	-1, 52,
	35, 87,
	-2, 74,
	-1, 107,
	35, 87,
	-2, 74,
	-1, 158,
	73, 50,
	74, 50,
	-2, 53,
	-1, 187,
	73, 51,
	74, 51,
	-2, 53,
}

const yrPrivate = 57344

const yrLast = 403

var yrAct = [...]int{

	52, 165, 49, 140, 146, 159, 80, 79, 196, 197,
	173, 73, 53, 64, 65, 66, 172, 61, 62, 60,
	63, 108, 74, 70, 149, 80, 79, 185, 186, 58,
	59, 71, 72, 202, 195, 54, 96, 94, 95, 148,
	50, 51, 192, 182, 141, 97, 98, 89, 90, 91,
	92, 93, 201, 112, 113, 102, 114, 109, 107, 68,
	106, 194, 48, 56, 69, 111, 110, 79, 42, 115,
	116, 57, 38, 189, 147, 184, 40, 28, 105, 26,
	17, 80, 79, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 119, 120, 18, 145, 121, 91, 92, 93, 55,
	151, 152, 153, 39, 155, 81, 82, 158, 89, 90,
	91, 92, 93, 104, 160, 96, 94, 95, 87, 88,
	83, 85, 84, 86, 97, 98, 89, 90, 91, 92,
	93, 162, 161, 99, 44, 35, 142, 43, 100, 163,
	150, 73, 74, 64, 65, 66, 143, 61, 62, 60,
	63, 5, 74, 118, 101, 77, 183, 46, 47, 58,
	59, 71, 72, 30, 117, 13, 187, 8, 78, 144,
	41, 188, 95, 191, 36, 154, 45, 31, 193, 97,
	98, 89, 90, 91, 92, 93, 166, 7, 200, 68,
	167, 23, 4, 37, 69, 176, 175, 179, 177, 178,
	20, 103, 14, 33, 198, 25, 73, 199, 64, 65,
	66, 22, 61, 62, 60, 63, 76, 74, 96, 94,
	95, 9, 11, 12, 58, 59, 75, 97, 98, 89,
	90, 91, 92, 93, 27, 96, 94, 95, 15, 1,
	164, 190, 181, 168, 97, 98, 89, 90, 91, 92,
	93, 156, 157, 67, 68, 32, 6, 10, 174, 69,
	150, 96, 94, 95, 34, 24, 103, 29, 21, 19,
	97, 98, 89, 90, 91, 92, 93, 96, 94, 95,
	16, 2, 3, 0, 171, 0, 97, 98, 89, 90,
	91, 92, 93, 96, 94, 95, 180, 0, 0, 0,
	170, 0, 97, 98, 89, 90, 91, 92, 93, 81,
	82, 0, 0, 0, 0, 0, 169, 0, 0, 96,
	94, 95, 87, 88, 83, 85, 84, 86, 97, 98,
	89, 90, 91, 92, 93, 0, 0, 0, 0, 96,
	94, 95, 0, 0, 0, 0, 0, 0, 97, 98,
	89, 90, 91, 92, 93, 96, 94, 95, 0, 0,
	0, 0, 0, 0, 97, 98, 89, 90, 91, 92,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 97,
	98, 89, 90, 91, 92, 93, 97, 98, 89, 90,
	91, 92, 93,
}
var yrPact = [...]int{

	-1000, 157, -1000, -1000, 156, -1000, 225, 154, -1000, 200,
	-1000, -1000, -1000, -1000, -1000, 13, 60, 198, 212, 189,
	-1000, 205, 12, -1000, -1000, 10, 175, 202, 171, 175,
	-1000, 4, 69, 9, 171, -1000, 0, -1000, 126, -1000,
	-1, -1000, 143, -1000, -1000, 160, -1000, -1000, 35, -1000,
	-1000, -1000, 281, 114, 139, 88, -1, -1, -1000, -1000,
	-15, -1000, -1000, -1000, -1000, -4, -5, -16, 204, 204,
	-1000, -1000, -1000, -1000, -1000, 153, 140, -1000, -1000, -1,
	-1, 129, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	-28, 144, 317, 204, 2, -1000, -49, 77, 35, 204,
	204, 204, 173, 204, -1, -1000, -1000, -1000, -1000, -1000,
	20, -1000, 317, 317, 317, 317, 317, 317, 317, 45,
	45, -1000, -1000, -1000, 132, 339, 332, 59, 59, 317,
	-1000, 204, -1000, 107, 2, 197, -1000, 183, -1000, -1000,
	-1000, 180, 255, 239, -1000, 223, -57, -64, -1000, 181,
	181, 301, -29, 8, -46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000,
	204, 6, 204, -1000, -30, -1000, 183, -1000, -12, -38,
	-65, 301, -1, -1000, -1000, -1, -1000, 204, -21, -40,
	317, -1000, -1000,
}
var yrPgo = [...]int{

	0, 292, 291, 290, 279, 278, 173, 277, 275, 145,
	274, 268, 5, 267, 266, 265, 21, 2, 0, 263,
	262, 261, 23, 109, 252, 251, 3, 4, 250, 1,
	249, 248, 244, 236, 226,
}
var yrR1 = [...]int{

	0, 30, 30, 30, 30, 30, 1, 31, 32, 2,
	5, 5, 8, 8, 15, 14, 14, 13, 13, 3,
	3, 4, 4, 7, 7, 6, 6, 6, 6, 6,
	10, 10, 33, 9, 34, 9, 9, 12, 12, 11,
	11, 11, 11, 11, 19, 19, 19, 19, 21, 21,
	20, 20, 22, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 24, 24, 26, 25,
	25, 27, 27, 28, 28, 29, 29, 23, 23, 23,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18,
}
var yrR2 = [...]int{

	0, 0, 2, 2, 3, 2, 2, 0, 0, 11,
	0, 3, 0, 3, 3, 0, 2, 1, 1, 0,
	2, 1, 2, 1, 2, 3, 3, 4, 3, 3,
	1, 2, 0, 5, 0, 5, 3, 0, 2, 1,
	1, 1, 1, 1, 1, 3, 4, 4, 0, 1,
	1, 3, 1, 1, 1, 1, 3, 3, 1, 3,
	3, 3, 9, 8, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 1, 5, 1,
	3, 3, 1, 1, 3, 1, 1, 1, 1, 1,
	3, 1, 1, 4, 1, 1, 1, 1, 4, 1,
	4, 1, 1, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 1,
}
var yrChk = [...]int{

	-1000, -30, -2, -1, 45, 4, -14, 40, 21, 6,
	-13, 7, 8, 21, 12, -31, -3, 67, 43, -4,
	12, -5, 9, 12, -8, 10, 67, -32, 67, -7,
	-6, 12, -15, 11, -10, -9, 13, -6, 68, 44,
	67, -9, 68, 21, 18, 60, 41, 42, -16, -17,
	41, 42, -18, 13, 36, -23, 64, 72, 30, 31,
	20, 18, 19, 21, 14, 15, 16, -19, 60, 65,
	-22, 32, 33, 12, 23, -33, -34, 22, 18, 47,
	46, 38, 39, 53, 55, 54, 56, 51, 52, 59,
	60, 61, 62, 63, 49, 50, 48, 57, 58, 29,
	34, -23, -18, 72, 35, -16, -17, -18, -16, 72,
	70, 70, 69, 70, 72, -18, -18, 21, 23, -16,
	-16, -22, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-26, 72, 2, 12, 35, -18, -27, 72, 37, 73,
	73, -18, -18, -18, 12, -18, -21, -20, -17, -12,
	-12, -18, 34, -27, -28, -29, 13, 17, 73, 71,
	71, 71, 73, 74, -11, 25, 24, 27, 28, 26,
	5, -24, 72, -26, 67, 73, 74, -17, -18, 67,
	-25, -18, 72, -29, 73, 72, 73, 74, -16, -16,
	-18, 73, 73,
}
var yrDef = [...]int{

	1, -2, 2, 3, 0, 5, 0, 0, 4, 0,
	16, 17, 18, 6, 7, 19, 0, 0, 10, 20,
	21, 12, 0, 22, 8, 0, 0, 0, 0, 11,
	23, 0, 0, 0, 13, 30, 0, 24, 0, 9,
	0, 31, -2, 25, 26, 0, 28, 29, 14, 53,
	54, 55, -2, 58, 0, 0, 0, 0, 91, 92,
	0, 94, 95, 96, 97, 99, 101, 102, 0, 0,
	115, 88, 89, 44, 52, 0, 0, 36, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 65, 53, -2, 0, 0,
	0, 0, 0, 0, 48, 103, 112, 37, 37, 66,
	67, 56, 57, 68, 69, 70, 71, 72, 73, 104,
	105, 106, 107, 108, 109, 110, 111, 113, 114, 59,
	60, 0, 61, 0, 0, 0, 64, 0, 82, 75,
	90, 0, 0, 0, 45, 0, 0, 49, -2, 33,
	35, 0, 0, 0, 0, 83, 85, 86, 93, 98,
	100, 46, 47, 0, 38, 39, 40, 41, 42, 43,
	0, 0, 0, 77, 0, 81, 0, -2, 0, 0,
	0, 79, 0, 84, 78, 0, 76, 0, 0, 0,
	80, 63, 62,
}
var yrTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 63, 50, 3,
	72, 73, 61, 59, 74, 60, 69, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 67, 3,
	3, 68, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 70, 62, 71, 49, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 48, 3, 65,
}
var yrTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 51, 52, 53, 54,
	55, 56, 57, 58, 64, 66,
}
var yrTok3 = [...]int{
	0,
}

var yrErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yrDebug        = 0
	yrErrorVerbose = false
)

type yrLexer interface {
	Lex(lval *yrSymType) int
	Error(s string)
}

type yrParser interface {
	Parse(yrLexer) int
	Lookahead() int
}

type yrParserImpl struct {
	lval  yrSymType
	stack [yrInitialStackSize]yrSymType
	char  int
}

func (p *yrParserImpl) Lookahead() int {
	return p.char
}

func yrNewParser() yrParser {
	return &yrParserImpl{}
}

const yrFlag = -1000

func yrTokname(c int) string {
	if c >= 1 && c-1 < len(yrToknames) {
		if yrToknames[c-1] != "" {
			return yrToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yrStatname(s int) string {
	if s >= 0 && s < len(yrStatenames) {
		if yrStatenames[s] != "" {
			return yrStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yrErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yrErrorVerbose {
		return "syntax error"
	}

	for _, e := range yrErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yrTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yrPact[state]
	for tok := TOKSTART; tok-1 < len(yrToknames); tok++ {
		if n := base + tok; n >= 0 && n < yrLast && yrChk[yrAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yrDef[state] == -2 {
		i := 0
		for yrExca[i] != -1 || yrExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yrExca[i] >= 0; i += 2 {
			tok := yrExca[i]
			if tok < TOKSTART || yrExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yrExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yrTokname(tok)
	}
	return res
}

func yrlex1(lex yrLexer, lval *yrSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yrTok1[0]
		goto out
	}
	if char < len(yrTok1) {
		token = yrTok1[char]
		goto out
	}
	if char >= yrPrivate {
		if char < yrPrivate+len(yrTok2) {
			token = yrTok2[char-yrPrivate]
			goto out
		}
	}
	for i := 0; i < len(yrTok3); i += 2 {
		token = yrTok3[i+0]
		if token == char {
			token = yrTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yrTok2[1] /* unknown char */
	}
	if yrDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yrTokname(token), uint(char))
	}
	return char, token
}

func yrParse(yrlex yrLexer) int {
	return yrNewParser().Parse(yrlex)
}

func (yrrcvr *yrParserImpl) Parse(yrlex yrLexer) int {
	var yrn int
	var yrVAL yrSymType
	var yrDollar []yrSymType
	_ = yrDollar // silence set and not used
	yrS := yrrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yrstate := 0
	yrrcvr.char = -1
	yrtoken := -1 // yrrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yrstate = -1
		yrrcvr.char = -1
		yrtoken = -1
	}()
	yrp := -1
	goto yrstack

ret0:
	return 0

ret1:
	return 1

yrstack:
	/* put a state and value onto the stack */
	if yrDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yrTokname(yrtoken), yrStatname(yrstate))
	}

	yrp++
	if yrp >= len(yrS) {
		nyys := make([]yrSymType, len(yrS)*2)
		copy(nyys, yrS)
		yrS = nyys
	}
	yrS[yrp] = yrVAL
	yrS[yrp].yys = yrstate

yrnewstate:
	yrn = yrPact[yrstate]
	if yrn <= yrFlag {
		goto yrdefault /* simple state */
	}
	if yrrcvr.char < 0 {
		yrrcvr.char, yrtoken = yrlex1(yrlex, &yrrcvr.lval)
	}
	yrn += yrtoken
	if yrn < 0 || yrn >= yrLast {
		goto yrdefault
	}
	yrn = yrAct[yrn]
	if yrChk[yrn] == yrtoken { /* valid shift */
		yrrcvr.char = -1
		yrtoken = -1
		yrVAL = yrrcvr.lval
		yrstate = yrn
		if Errflag > 0 {
			Errflag--
		}
		goto yrstack
	}

yrdefault:
	/* default state action */
	yrn = yrDef[yrstate]
	if yrn == -2 {
		if yrrcvr.char < 0 {
			yrrcvr.char, yrtoken = yrlex1(yrlex, &yrrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yrExca[xi+0] == -1 && yrExca[xi+1] == yrstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yrn = yrExca[xi+0]
			if yrn < 0 || yrn == yrtoken {
				break
			}
		}
		yrn = yrExca[xi+1]
		if yrn < 0 {
			goto ret0
		}
	}
	if yrn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yrlex.Error(yrErrorMessage(yrstate, yrtoken))
			Nerrs++
			if yrDebug >= 1 {
				__yyfmt__.Printf("%s", yrStatname(yrstate))
				__yyfmt__.Printf(" saw %s\n", yrTokname(yrtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yrp >= 0 {
				yrn = yrPact[yrS[yrp].yys] + yrErrCode
				if yrn >= 0 && yrn < yrLast {
					yrstate = yrAct[yrn] /* simulate a shift of "error" */
					if yrChk[yrstate] == yrErrCode {
						goto yrstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yrDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yrS[yrp].yys)
				}
				yrp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yrDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yrTokname(yrtoken))
			}
			if yrtoken == yrEofCode {
				goto ret1
			}
			yrrcvr.char = -1
			yrtoken = -1
			goto yrnewstate /* try again in the same state */
		}
	}

	/* reduction by production yrn */
	if yrDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yrn, yrStatname(yrstate))
	}

	yrnt := yrn
	yrpt := yrp
	_ = yrpt // guard against "declared and not used"

	yrp -= yrR2[yrn]
	// yrp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yrp+1 >= len(yrS) {
		nyys := make([]yrSymType, len(yrS)*2)
		copy(nyys, yrS)
		yrS = nyys
	}
	yrVAL = yrS[yrp+1]

	/* consult goto table to find next state */
	yrn = yrR1[yrn]
	yrg := yrPgo[yrn]
	yrj := yrg + yrS[yrp].yys + 1

	if yrj >= yrLast {
		yrstate = yrAct[yrg]
	} else {
		yrstate = yrAct[yrj]
		if yrChk[yrstate] != -yrn {
			yrstate = yrAct[yrg]
		}
	}
	// dummy call; replaced with literal code
	switch yrnt {

	case 2:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:174
		{
			ParsedRuleset.Rules = append(ParsedRuleset.Rules, yrDollar[2].yr)
		}
	case 3:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:177
		{
			ParsedRuleset.Imports = append(ParsedRuleset.Imports, yrDollar[2].s)
		}
	case 4:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:180
		{
			ParsedRuleset.Includes = append(ParsedRuleset.Includes, yrDollar[3].s)
		}
	case 5:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:183
		{
		}
	case 6:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:189
		{
			yrVAL.s = yrDollar[2].s
		}
	case 7:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:197
		{
			yrVAL.yr = &ast.Rule{
				Modifiers:  yrDollar[1].rm,
				Identifier: proto.String(yrDollar[3].s),
			}

			// Forbid duplicate rules
			for _, r := range ParsedRuleset.Rules {
				if yrDollar[3].s == *r.Identifier {
					err := gyperror.Error{gyperror.DuplicateRuleError, yrDollar[3].s}
					panic(err)
				}
			}
		}
	case 8:
		yrDollar = yrS[yrpt-8 : yrpt+1]
//line grammar.y:212
		{
			// $4 is the rule created in above action
			yrDollar[4].yr.Tags = yrDollar[5].ss

			// Forbid duplicate tags
			idx := make(map[string]struct{})
			for _, t := range yrDollar[5].ss {
				if _, had := idx[t]; had {
					err := gyperror.Error{
						gyperror.DuplicateTagError,
						fmt.Sprintf(
							`"%s" at rule "%s"`,
							yrDollar[4].yr.GetIdentifier(),
							t),
					}
					panic(err)
				}
				idx[t] = struct{}{}
			}

			yrDollar[4].yr.Meta = yrDollar[7].m

			yrDollar[4].yr.Strings = yrDollar[8].yss

			// Forbid duplicate string IDs, except `$` (anonymous)
			idx = make(map[string]struct{})
			for _, s := range yrDollar[8].yss {
				if s.GetId() == "$" {
					continue
				}
				if _, had := idx[*s.Id]; had {
					err := gyperror.Error{
						gyperror.DuplicateStringError,
						fmt.Sprintf(
							`"%s" at rule "%s"`,
							yrDollar[4].yr.GetIdentifier(),
							s.GetId(),
						),
					}
					panic(err)
				}
				idx[*s.Id] = struct{}{}
			}
		}
	case 9:
		yrDollar = yrS[yrpt-11 : yrpt+1]
//line grammar.y:257
		{
			condition := yrDollar[10].expr
			yrDollar[4].yr.Condition = condition
			yrVAL.yr = yrDollar[4].yr
		}
	case 10:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line grammar.y:266
		{
			yrVAL.m = []*ast.Meta{}
		}
	case 11:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:268
		{
			yrVAL.m = make([]*ast.Meta, 0, len(yrDollar[3].m))
			for _, mpair := range yrDollar[3].m {
				// YARA is ok with duplicate keys; we follow suit
				yrVAL.m = append(yrVAL.m, mpair)
			}
		}
	case 12:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line grammar.y:279
		{
			yrVAL.yss = []*ast.String{}
		}
	case 13:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:280
		{
			yrVAL.yss = yrDollar[3].yss
		}
	case 14:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:285
		{
			yrVAL.expr = yrDollar[3].expr
		}
	case 15:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line grammar.y:290
		{
			yrVAL.rm = &ast.RuleModifiers{}
		}
	case 16:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:291
		{
			yrVAL.rm = &ast.RuleModifiers{
				Private: proto.Bool(yrDollar[1].rm.GetPrivate() || yrDollar[2].rm.GetPrivate()),
				Global:  proto.Bool(yrDollar[1].rm.GetGlobal() || yrDollar[2].rm.GetGlobal()),
			}
		}
	case 17:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:301
		{
			yrVAL.rm = &ast.RuleModifiers{Private: proto.Bool(true)}
		}
	case 18:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:302
		{
			yrVAL.rm = &ast.RuleModifiers{Global: proto.Bool(true)}
		}
	case 19:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line grammar.y:307
		{
			yrVAL.ss = []string{}
		}
	case 20:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:308
		{
			yrVAL.ss = yrDollar[2].ss
		}
	case 21:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:313
		{
			yrVAL.ss = []string{yrDollar[1].s}
		}
	case 22:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:314
		{
			yrVAL.ss = append(yrDollar[1].ss, yrDollar[2].s)
		}
	case 23:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:319
		{
			yrVAL.m = []*ast.Meta{yrDollar[1].mp}
		}
	case 24:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:320
		{
			yrVAL.m = append(yrVAL.m, yrDollar[2].mp)
		}
	case 25:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:326
		{
			yrVAL.mp = &ast.Meta{
				Key:   proto.String(yrDollar[1].s),
				Value: &ast.Meta_Text{yrDollar[3].s},
			}
		}
	case 26:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:333
		{
			yrVAL.mp = &ast.Meta{
				Key:   proto.String(yrDollar[1].s),
				Value: &ast.Meta_Number{yrDollar[3].i64},
			}
		}
	case 27:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line grammar.y:340
		{
			yrVAL.mp = &ast.Meta{
				Key:   proto.String(yrDollar[1].s),
				Value: &ast.Meta_Number{-yrDollar[4].i64},
			}
		}
	case 28:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:347
		{
			yrVAL.mp = &ast.Meta{
				Key:   proto.String(yrDollar[1].s),
				Value: &ast.Meta_Boolean{true},
			}
		}
	case 29:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:354
		{
			yrVAL.mp = &ast.Meta{
				Key:   proto.String(yrDollar[1].s),
				Value: &ast.Meta_Boolean{false},
			}
		}
	case 30:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:364
		{
			yrVAL.yss = []*ast.String{yrDollar[1].ys}
		}
	case 31:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:365
		{
			yrVAL.yss = append(yrDollar[1].yss, yrDollar[2].ys)
		}
	case 32:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:371
		{
			yrVAL.ys = &ast.String{
				Id: proto.String(yrDollar[1].s),
			}
		}
	case 33:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line grammar.y:377
		{
			yrDollar[3].ys.Value = &ast.String_Text{&ast.TextString{
				Text:      proto.String(yrDollar[4].s),
				Modifiers: yrDollar[5].mod,
			}}
			yrVAL.ys = yrDollar[3].ys
		}
	case 34:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:385
		{
			yrVAL.ys = &ast.String{
				Id: proto.String(yrDollar[1].s),
			}
		}
	case 35:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line grammar.y:391
		{
			yrDollar[3].ys.Value = &ast.String_Regexp{&ast.Regexp{
				Text: yrDollar[4].reg.Text,
			}}

			yrDollar[5].mod.I = yrDollar[4].reg.Modifiers.I
			yrDollar[5].mod.S = yrDollar[4].reg.Modifiers.S

			yrDollar[3].ys.GetRegexp().Modifiers = yrDollar[5].mod

			yrVAL.ys = yrDollar[3].ys
		}
	case 36:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:404
		{
			yrVAL.ys = &ast.String{
				Id:    proto.String(yrDollar[1].s),
				Value: &ast.String_Hex{yrDollar[3].hextokens},
			}
		}
	case 37:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line grammar.y:414
		{
			yrVAL.mod = &ast.StringModifiers{}
		}
	case 38:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:416
		{
			yrVAL.mod = &ast.StringModifiers{
				Wide:     proto.Bool(yrDollar[1].mod.GetWide() || yrDollar[2].mod.GetWide()),
				Ascii:    proto.Bool(yrDollar[1].mod.GetAscii() || yrDollar[2].mod.GetAscii()),
				Nocase:   proto.Bool(yrDollar[1].mod.GetNocase() || yrDollar[2].mod.GetNocase()),
				Fullword: proto.Bool(yrDollar[1].mod.GetFullword() || yrDollar[2].mod.GetFullword()),
				Xor:      proto.Bool(yrDollar[1].mod.GetXor() || yrDollar[2].mod.GetXor()),
			}
		}
	case 39:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:429
		{
			yrVAL.mod = &ast.StringModifiers{Wide: proto.Bool(true)}
		}
	case 40:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:430
		{
			yrVAL.mod = &ast.StringModifiers{Ascii: proto.Bool(true)}
		}
	case 41:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:431
		{
			yrVAL.mod = &ast.StringModifiers{Nocase: proto.Bool(true)}
		}
	case 42:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:432
		{
			yrVAL.mod = &ast.StringModifiers{Fullword: proto.Bool(true)}
		}
	case 43:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:433
		{
			yrVAL.mod = &ast.StringModifiers{Xor: proto.Bool(true)}
		}
	case 44:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:440
		{
			yrVAL.id = &ast.Identifier{
				Items: []*ast.Identifier_IdentifierItem{
					{Item: &ast.Identifier_IdentifierItem_Identifier{yrDollar[1].s}},
				},
			}
		}
	case 45:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:448
		{
			yrVAL.id.Items = append(
				yrDollar[1].id.Items,
				&ast.Identifier_IdentifierItem{
					Item: &ast.Identifier_IdentifierItem_Identifier{yrDollar[3].s},
				},
			)
		}
	case 46:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line grammar.y:457
		{
			yrVAL.id.Items = append(
				yrDollar[1].id.Items,
				&ast.Identifier_IdentifierItem{
					Item: &ast.Identifier_IdentifierItem_Index{yrDollar[3].expr},
				},
			)
		}
	case 47:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line grammar.y:466
		{
			yrVAL.id.Items = append(
				yrDollar[1].id.Items,
				&ast.Identifier_IdentifierItem{
					Item: &ast.Identifier_IdentifierItem_Arguments{yrDollar[3].exprs},
				},
			)
		}
	case 48:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line grammar.y:478
		{
			yrVAL.exprs = &ast.Expressions{}
		}
	case 49:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:479
		{
			yrVAL.exprs = yrDollar[1].exprs
		}
	case 50:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:484
		{
			yrVAL.exprs = &ast.Expressions{
				Terms: []*ast.Expression{yrDollar[1].expr},
			}
		}
	case 51:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:490
		{
			yrVAL.exprs.Terms = append(yrDollar[1].exprs.Terms, yrDollar[3].expr)
		}
	case 52:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:498
		{
			regexp := yrDollar[1].reg
			yrVAL.regp = &regexp
		}
	case 53:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:506
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 54:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:511
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BoolValue{true},
			}
		}
	case 55:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:517
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BoolValue{false},
			}
		}
	case 56:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:523
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_MATCHES.Enum(),
						Left:     yrDollar[1].expr,
						Right: &ast.Expression{
							Expression: &ast.Expression_Regexp{yrDollar[3].regp},
						},
					},
				},
			}
		}
	case 57:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:537
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_CONTAINS.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 58:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:549
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_StringIdentifier{yrDollar[1].s},
			}
		}
	case 59:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:555
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_AT.Enum(),
						Left: &ast.Expression{
							Expression: &ast.Expression_StringIdentifier{yrDollar[1].s},
						},
						Right: yrDollar[3].expr,
					},
				},
			}
		}
	case 60:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:569
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_IN.Enum(),
						Left: &ast.Expression{
							Expression: &ast.Expression_StringIdentifier{yrDollar[1].s},
						},
						Right: &ast.Expression{
							Expression: &ast.Expression_Range{yrDollar[3].rng},
						},
					},
				},
			}
		}
	case 61:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:584
		{
		}
	case 62:
		yrDollar = yrS[yrpt-9 : yrpt+1]
//line grammar.y:586
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_ForInExpression{
					ForInExpression: &ast.ForInExpression{
						ForExpression: yrDollar[2].forexp,
						Identifier:    proto.String(yrDollar[3].s),
						IntegerSet:    yrDollar[5].intset,
						Expression:    yrDollar[8].expr,
					},
				},
			}
		}
	case 63:
		yrDollar = yrS[yrpt-8 : yrpt+1]
//line grammar.y:599
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_ForOfExpression{
					ForOfExpression: &ast.ForOfExpression{
						ForExpression: yrDollar[2].forexp,
						StringSet:     yrDollar[4].strset,
						Expression:    yrDollar[7].expr,
					},
				},
			}
		}
	case 64:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:611
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_ForOfExpression{
					ForOfExpression: &ast.ForOfExpression{
						ForExpression: yrDollar[1].forexp,
						StringSet:     yrDollar[3].strset,
					},
				},
			}
		}
	case 65:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:622
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_NotExpression{yrDollar[2].expr},
			}
		}
	case 66:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:628
		{
			yrVAL.expr = createAndExpression(yrDollar[1].expr, yrDollar[3].expr)
		}
	case 67:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:632
		{
			yrVAL.expr = createOrExpression(yrDollar[1].expr, yrDollar[3].expr)
		}
	case 68:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:636
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_LT.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 69:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:648
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_GT.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 70:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:660
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_LE.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 71:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:672
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_GE.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 72:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:684
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_EQ.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 73:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:696
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_NEQ.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 74:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:708
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 75:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:712
		{
			yrVAL.expr = yrDollar[2].expr
		}
	case 76:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:720
		{
			yrVAL.intset = &ast.IntegerSet{
				Set: &ast.IntegerSet_IntegerEnumeration{yrDollar[2].intenum},
			}
		}
	case 77:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:726
		{
			yrVAL.intset = &ast.IntegerSet{
				Set: &ast.IntegerSet_Range{yrDollar[1].rng},
			}
		}
	case 78:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line grammar.y:736
		{
			yrVAL.rng = &ast.Range{
				Start: yrDollar[2].expr,
				End:   yrDollar[4].expr,
			}
		}
	case 79:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:747
		{
			yrVAL.intenum = &ast.IntegerEnumeration{
				Values: []*ast.Expression{yrDollar[1].expr},
			}
		}
	case 80:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:752
		{
			yrVAL.intenum.Values = append(yrVAL.intenum.Values, yrDollar[3].expr)
		}
	case 81:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:760
		{
			yrVAL.strset = &ast.StringSet{Set: &ast.StringSet_Strings{yrDollar[2].strenum}}
		}
	case 82:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:764
		{
			yrVAL.strset = &ast.StringSet{Set: &ast.StringSet_Keyword{ast.StringSetKeyword_THEM}}
		}
	case 83:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:772
		{
			yrVAL.strenum = &ast.StringEnumeration{
				Items: []*ast.StringEnumeration_StringEnumerationItem{yrDollar[1].strenumi},
			}
		}
	case 84:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:778
		{
			yrVAL.strenum.Items = append(yrDollar[1].strenum.Items, yrDollar[3].strenumi)
		}
	case 85:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:786
		{
			yrVAL.strenumi = &ast.StringEnumeration_StringEnumerationItem{
				StringIdentifier: proto.String(yrDollar[1].s),
				HasWildcard:      proto.Bool(false),
			}
		}
	case 86:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:793
		{
			yrVAL.strenumi = &ast.StringEnumeration_StringEnumerationItem{
				StringIdentifier: proto.String(yrDollar[1].s),
				HasWildcard:      proto.Bool(true),
			}
		}
	case 87:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:804
		{
			yrVAL.forexp = &ast.ForExpression{
				For: &ast.ForExpression_Expression{yrDollar[1].expr},
			}
		}
	case 88:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:810
		{
			yrVAL.forexp = &ast.ForExpression{
				For: &ast.ForExpression_Keyword{ast.ForKeyword_ALL},
			}
		}
	case 89:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:816
		{
			yrVAL.forexp = &ast.ForExpression{
				For: &ast.ForExpression_Keyword{ast.ForKeyword_ANY},
			}
		}
	case 90:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:826
		{
			yrVAL.expr = yrDollar[2].expr
		}
	case 91:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:830
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_Keyword{ast.Keyword_FILESIZE},
			}
		}
	case 92:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:836
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_Keyword{ast.Keyword_ENTRYPOINT},
			}
		}
	case 93:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line grammar.y:842
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_IntegerFunction{
					&ast.IntegerFunction{
						Function: proto.String(yrDollar[1].s),
						Argument: yrDollar[3].expr,
					},
				},
			}
		}
	case 94:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:853
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_NumberValue{yrDollar[1].i64},
			}
		}
	case 95:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:859
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_DoubleValue{yrDollar[1].f64},
			}
		}
	case 96:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:865
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_Text{yrDollar[1].s},
			}
		}
	case 97:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:871
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_StringCount{yrDollar[1].s},
			}
		}
	case 98:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line grammar.y:877
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_StringOffset{
					&ast.StringOffset{
						StringIdentifier: proto.String(yrDollar[1].s),
						Index:            yrDollar[3].expr,
					},
				},
			}
		}
	case 99:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:888
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_StringOffset{
					&ast.StringOffset{
						StringIdentifier: proto.String(yrDollar[1].s),
					},
				},
			}
		}
	case 100:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line grammar.y:898
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_StringLength{
					&ast.StringLength{
						StringIdentifier: proto.String(yrDollar[1].s),
						Index:            yrDollar[3].expr,
					},
				},
			}
		}
	case 101:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:909
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_StringLength{
					&ast.StringLength{
						StringIdentifier: proto.String(yrDollar[1].s),
					},
				},
			}
		}
	case 102:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:919
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_Identifier{yrDollar[1].id},
			}
		}
	case 103:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:925
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_UnaryExpression{
					&ast.UnaryExpression{
						Operator:   ast.UnaryExpression_UNARY_MINUS.Enum(),
						Expression: yrDollar[2].expr,
					},
				},
			}
		}
	case 104:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:936
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_PLUS.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 105:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:948
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_MINUS.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 106:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:960
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_TIMES.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 107:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:972
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_DIV.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 108:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:984
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_MOD.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 109:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:996
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_XOR.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 110:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:1008
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_BITWISE_AND.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 111:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:1020
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_BITWISE_OR.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 112:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line grammar.y:1032
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_UnaryExpression{
					UnaryExpression: &ast.UnaryExpression{
						Operator:   ast.UnaryExpression_BITWISE_NOT.Enum(),
						Expression: yrDollar[2].expr,
					},
				},
			}
		}
	case 113:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:1043
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_SHIFT_LEFT.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 114:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line grammar.y:1055
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_BinaryExpression{
					BinaryExpression: &ast.BinaryExpression{
						Operator: ast.BinaryExpression_SHIFT_RIGHT.Enum(),
						Left:     yrDollar[1].expr,
						Right:    yrDollar[3].expr,
					},
				},
			}
		}
	case 115:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line grammar.y:1067
		{
			yrVAL.expr = &ast.Expression{
				Expression: &ast.Expression_Regexp{yrDollar[1].regp},
			}
		}
	}
	goto yrstack /* stack new state and value */
}
