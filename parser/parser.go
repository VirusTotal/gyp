// Code generated by goyacc -p yr -o parser/parser.go parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:31
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:31

import (
	"github.com/VirusTotal/gyp/ast"
	gyperror "github.com/VirusTotal/gyp/error"
	"strings"
)

type modifiers uint64

const (
	_                   = iota // ignore first value by assigning to blank identifier
	ModGlobal modifiers = 1 << iota
	ModPrivate
	ModASCII
	ModWide
	ModXor
	ModFullword
	ModNocase
	ModBase64
	ModBase64Wide
)

type stringModifiers struct {
	modifiers
	XorMin         int32
	XorMax         int32
	Base64Alphabet string
}

//line parser/grammar.y:177
type yrSymType struct {
	yys       int
	i64       int64
	f64       float64
	s         string
	ss        []string
	reg       *ast.LiteralRegexp
	hexTokens []ast.HexToken
	mod       modifiers
	smod      stringModifiers
	rule      *ast.Rule
	meta      *ast.Meta
	metas     []*ast.Meta
	ys        ast.String
	yss       []ast.String
	node      ast.Node
	nodes     []ast.Node
	rng       *ast.Range
	expr      ast.Expression
	exprs     []ast.Expression
	si        *ast.StringIdentifier
	sis       []*ast.StringIdentifier
	ident     *ast.Identifier

	// lineno is not a symbol type, it's the line number where the symbol
	// appears in the source file. This is a little hack used for passing
	// the line number where each token appears from the lexer to the parser.
	// This relies on the fact that Go doesn't implement unions, and therefore
	// goyacc actually uses a struct for passing around symbol values. Being
	// a struct those values can contain both the value itself (in some of
	// the fields listed above) and the line number. This wouldn't work with
	// C code produced by yacc, as this would be a union instead of a struct.
	//
	// This can be used within rule actions as:
	//
	//  lineNumber := $<lineno>1
	//
	// In the example lineNumber will hold the line number for the first
	// symbol in the production rule. The value for the symbol itself would
	// be $1 as usual. Similarly $<lineno>N will return the line number for
	// the N-th symbol in the production rule.

	lineno int
}

const _END_OF_INCLUDED_FILE_ = 57346
const _DOT_DOT_ = 57347
const _RULE_ = 57348
const _PRIVATE_ = 57349
const _GLOBAL_ = 57350
const _META_ = 57351
const _STRINGS_ = 57352
const _CONDITION_ = 57353
const _IDENTIFIER_ = 57354
const _STRING_IDENTIFIER_ = 57355
const _STRING_COUNT_ = 57356
const _STRING_OFFSET_ = 57357
const _STRING_LENGTH_ = 57358
const _STRING_IDENTIFIER_WITH_WILDCARD_ = 57359
const _NUMBER_ = 57360
const _DOUBLE_ = 57361
const _INTEGER_FUNCTION_ = 57362
const _TEXT_STRING_ = 57363
const _HEX_STRING_ = 57364
const _REGEXP_ = 57365
const _ASCII_ = 57366
const _WIDE_ = 57367
const _XOR_ = 57368
const _NOCASE_ = 57369
const _FULLWORD_ = 57370
const _BASE64_ = 57371
const _BASE64WIDE_ = 57372
const _AT_ = 57373
const _FILESIZE_ = 57374
const _ENTRYPOINT_ = 57375
const _ALL_ = 57376
const _ANY_ = 57377
const _NONE_ = 57378
const _IN_ = 57379
const _OF_ = 57380
const _FOR_ = 57381
const _THEM_ = 57382
const _MATCHES_ = 57383
const _CONTAINS_ = 57384
const _ICONTAINS_ = 57385
const _STARTSWITH_ = 57386
const _ISTARTSWITH_ = 57387
const _ENDSWITH_ = 57388
const _IENDSWITH_ = 57389
const _IEQUALS_ = 57390
const _IMPORT_ = 57391
const _TRUE_ = 57392
const _FALSE_ = 57393
const _INCLUDE_ = 57394
const _DEFINED_ = 57395
const _OR_ = 57396
const _AND_ = 57397
const _NOT_ = 57398
const _EQ_ = 57399
const _NEQ_ = 57400
const _LT_ = 57401
const _LE_ = 57402
const _GT_ = 57403
const _GE_ = 57404
const _SHIFT_LEFT_ = 57405
const _SHIFT_RIGHT_ = 57406
const UNARY_MINUS = 57407

var yrToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_END_OF_INCLUDED_FILE_",
	"_DOT_DOT_",
	"_RULE_",
	"_PRIVATE_",
	"_GLOBAL_",
	"_META_",
	"_STRINGS_",
	"_CONDITION_",
	"_IDENTIFIER_",
	"_STRING_IDENTIFIER_",
	"_STRING_COUNT_",
	"_STRING_OFFSET_",
	"_STRING_LENGTH_",
	"_STRING_IDENTIFIER_WITH_WILDCARD_",
	"_NUMBER_",
	"_DOUBLE_",
	"_INTEGER_FUNCTION_",
	"_TEXT_STRING_",
	"_HEX_STRING_",
	"_REGEXP_",
	"_ASCII_",
	"_WIDE_",
	"_XOR_",
	"_NOCASE_",
	"_FULLWORD_",
	"_BASE64_",
	"_BASE64WIDE_",
	"_AT_",
	"_FILESIZE_",
	"_ENTRYPOINT_",
	"_ALL_",
	"_ANY_",
	"_NONE_",
	"_IN_",
	"_OF_",
	"_FOR_",
	"_THEM_",
	"_MATCHES_",
	"_CONTAINS_",
	"_ICONTAINS_",
	"_STARTSWITH_",
	"_ISTARTSWITH_",
	"_ENDSWITH_",
	"_IENDSWITH_",
	"_IEQUALS_",
	"_IMPORT_",
	"_TRUE_",
	"_FALSE_",
	"_INCLUDE_",
	"_DEFINED_",
	"_OR_",
	"_AND_",
	"_NOT_",
	"'|'",
	"'^'",
	"'&'",
	"_EQ_",
	"_NEQ_",
	"_LT_",
	"_LE_",
	"_GT_",
	"_GE_",
	"_SHIFT_LEFT_",
	"_SHIFT_RIGHT_",
	"'+'",
	"'-'",
	"'*'",
	"'\\\\'",
	"'%'",
	"'~'",
	"UNARY_MINUS",
	"'{'",
	"'}'",
	"':'",
	"'='",
	"'('",
	"')'",
	"'.'",
	"'['",
	"']'",
	"','",
}

var yrStatenames = [...]string{}

const yrEofCode = 1
const yrErrCode = 2
const yrInitialStackSize = 16

//line parser/grammar.y:1385

// This function takes an operator and two operands and returns a Expression
// representing the operation. If the left operand is an operation of the
// the same kind than the specified by the operator, the right operand is
// simply appended to that existing operation. This implies that the operator
// must be left-associative in order to be used with this function.
func operation(operator ast.OperatorType, left, right ast.Expression) (n ast.Expression) {
	if operation, ok := left.(*ast.Operation); ok && operation.Operator == operator {
		operation.Operands = append(operation.Operands, right)
		n = operation
	} else {
		n = &ast.Operation{
			Operator: operator,
			Operands: []ast.Expression{left, right},
		}
	}
	return n
}

//line yacctab:1
var yrExca = [...]int{
	-1, 1,
	1, -1,
	-2, 15,
	-1, 52,
	38, 118,
	-2, 100,
	-1, 116,
	38, 118,
	-2, 100,
	-1, 179,
	80, 66,
	84, 66,
	-2, 69,
	-1, 233,
	80, 67,
	84, 67,
	-2, 69,
}

const yrPrivate = 57344

const yrLast = 481

var yrAct = [...]int{
	52, 200, 199, 49, 68, 165, 166, 158, 83, 84,
	85, 86, 87, 88, 89, 90, 249, 230, 228, 192,
	250, 231, 229, 209, 104, 102, 103, 96, 97, 92,
	94, 93, 95, 105, 106, 98, 99, 100, 101, 91,
	124, 121, 122, 123, 120, 71, 255, 170, 82, 81,
	82, 81, 261, 253, 252, 110, 75, 254, 208, 116,
	169, 42, 115, 248, 241, 236, 193, 235, 117, 234,
	125, 126, 168, 38, 260, 168, 258, 159, 118, 238,
	226, 40, 28, 26, 17, 133, 134, 135, 136, 137,
	138, 139, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 48,
	39, 195, 164, 18, 167, 100, 101, 163, 232, 171,
	81, 173, 174, 223, 176, 113, 114, 172, 179, 132,
	82, 81, 75, 53, 65, 66, 67, 55, 62, 63,
	61, 64, 162, 76, 112, 196, 189, 190, 119, 76,
	130, 131, 59, 60, 72, 73, 74, 245, 244, 54,
	191, 30, 13, 44, 141, 8, 43, 194, 161, 259,
	50, 51, 246, 57, 102, 103, 56, 98, 99, 100,
	101, 163, 105, 106, 98, 99, 100, 101, 163, 69,
	201, 37, 109, 70, 202, 46, 47, 221, 103, 58,
	224, 80, 36, 35, 227, 105, 106, 98, 99, 100,
	101, 163, 5, 233, 45, 77, 79, 78, 203, 75,
	237, 65, 66, 67, 240, 62, 63, 61, 64, 219,
	76, 225, 242, 243, 175, 104, 102, 103, 41, 59,
	60, 72, 73, 74, 105, 106, 98, 99, 100, 101,
	163, 257, 107, 104, 102, 103, 31, 7, 108, 23,
	4, 207, 105, 106, 98, 99, 100, 101, 163, 105,
	106, 98, 99, 100, 101, 163, 69, 20, 14, 206,
	70, 104, 102, 103, 203, 201, 111, 33, 25, 202,
	105, 106, 98, 99, 100, 101, 163, 9, 11, 12,
	188, 22, 83, 84, 85, 86, 87, 88, 89, 90,
	251, 127, 27, 15, 1, 198, 197, 256, 104, 102,
	103, 96, 97, 92, 94, 93, 95, 105, 106, 98,
	99, 100, 101, 91, 104, 102, 103, 160, 222, 220,
	239, 177, 178, 105, 106, 98, 99, 100, 101, 163,
	75, 32, 65, 66, 67, 6, 62, 63, 61, 64,
	205, 76, 10, 129, 187, 128, 181, 180, 210, 34,
	59, 60, 24, 21, 29, 75, 140, 65, 66, 67,
	19, 62, 63, 61, 64, 16, 76, 2, 3, 104,
	102, 103, 0, 0, 0, 59, 60, 0, 105, 106,
	98, 99, 100, 101, 163, 0, 0, 69, 0, 0,
	0, 70, 247, 186, 104, 102, 103, 111, 0, 0,
	0, 0, 0, 105, 106, 98, 99, 100, 101, 163,
	183, 182, 69, 184, 185, 0, 70, 204, 104, 102,
	103, 0, 111, 0, 0, 0, 0, 105, 106, 98,
	99, 100, 101, 163, 104, 102, 103, 215, 0, 0,
	0, 170, 0, 105, 106, 98, 99, 100, 101, 163,
	0, 0, 0, 0, 212, 211, 218, 213, 214, 216,
	217,
}

var yrPact = [...]int{
	-1000, 208, -1000, -1000, 144, -1000, 291, 141, -1000, 266,
	-1000, -1000, -1000, -1000, -1000, 7, 38, 265, 292, 247,
	-1000, 278, 6, -1000, -1000, 5, 244, 276, 189, 244,
	-1000, -5, 34, 4, 189, -1000, -17, -1000, 145, -1000,
	120, -1000, 194, -1000, -1000, 183, -1000, -1000, 76, -1000,
	-1000, -1000, 261, 221, 207, 106, 120, 120, 120, -1000,
	-1000, -1, -1000, -1000, -1000, 111, -38, -41, -39, 363,
	363, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 120, 120, 126, 363, 363, 363, 363, 363, 363,
	363, 338, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, -2, 130,
	397, 363, 35, -1000, -1000, -20, -33, 76, 363, -2,
	363, 363, 222, 363, 120, -1000, -1000, -1000, 406, 293,
	-1000, 65, -1000, 397, 397, 397, 397, 397, 397, 397,
	35, -1000, 397, 397, 397, 397, 397, 397, 45, 45,
	-1000, -1000, 139, 203, 116, 109, 109, 397, -1000, 363,
	-18, 32, -1000, 363, 381, 108, -1000, 272, -1000, -1000,
	-1000, 357, -1000, 277, 196, -1000, 178, -22, -61, -1000,
	450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 224, 44, 219, 3, 177, -2, -62, -63, -1000,
	-1000, -1000, -1000, 48, -1000, -1000, -1000, -1000, -1000, 120,
	-1000, -1000, -1000, -1000, -1000, -1000, -10, -12, -14, 363,
	2, -39, -1000, 363, -1000, -1000, -15, -1000, -1000, 177,
	-1000, 206, -1000, -1000, 137, 136, 154, 332, -16, -64,
	224, 120, -1000, -1000, -26, -27, -23, -1000, 120, -1000,
	363, -4, -1000, -1000, -1000, 151, -6, 397, -1000, -28,
	-1000, -1000,
}

var yrPgo = [...]int{
	0, 388, 387, 385, 380, 161, 374, 373, 372, 203,
	369, 368, 367, 366, 365, 364, 363, 362, 355, 351,
	3, 68, 0, 4, 342, 341, 137, 340, 339, 338,
	5, 45, 7, 337, 316, 2, 6, 315, 1, 314,
	313, 312, 311,
}

var yrR1 = [...]int{
	0, 39, 39, 39, 39, 39, 1, 40, 41, 2,
	7, 7, 8, 8, 19, 18, 18, 17, 17, 3,
	3, 4, 4, 6, 6, 5, 5, 5, 5, 5,
	10, 10, 42, 9, 9, 9, 12, 12, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	14, 14, 13, 13, 13, 13, 13, 16, 16, 15,
	23, 23, 23, 23, 25, 25, 24, 24, 31, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 29, 29, 32, 27, 27, 30, 30, 34,
	34, 35, 35, 36, 37, 37, 38, 38, 26, 26,
	26, 26, 33, 33, 28, 28, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22,
}

var yrR2 = [...]int{
	0, 0, 2, 2, 3, 2, 2, 0, 0, 11,
	0, 3, 0, 3, 3, 0, 2, 1, 1, 0,
	2, 1, 2, 1, 2, 3, 3, 4, 3, 3,
	1, 2, 0, 5, 4, 4, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 1, 4, 6,
	0, 2, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 3, 4, 4, 0, 1, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 3, 9, 8, 5, 3, 3, 4, 4,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 3, 1, 5, 1, 3, 3, 1, 1,
	3, 1, 1, 3, 1, 3, 1, 2, 1, 1,
	1, 1, 1, 3, 1, 1, 3, 1, 1, 4,
	1, 1, 1, 3, 1, 4, 1, 4, 1, 1,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 1,
}

var yrChk = [...]int{
	-1000, -39, -2, -1, 52, 4, -18, 49, 21, 6,
	-17, 7, 8, 21, 12, -40, -3, 77, 75, -4,
	12, -7, 9, 12, -8, 10, 77, -41, 77, -6,
	-5, 12, -19, 11, -10, -9, 13, -5, 78, 76,
	77, -9, 78, 21, 18, 69, 50, 51, -21, -20,
	50, 51, -22, 13, 39, -26, 56, 53, 79, 32,
	33, 20, 18, 19, 21, 14, 15, 16, -23, 69,
	73, -31, 34, 35, 36, 12, 23, 21, 23, 22,
	18, 55, 54, 41, 42, 43, 44, 45, 46, 47,
	48, 72, 62, 64, 63, 65, 60, 61, 68, 69,
	70, 71, 58, 59, 57, 66, 67, 31, 37, -26,
	-22, 79, 38, -21, -21, -20, -22, -21, 79, 37,
	82, 82, 81, 82, 79, -22, -22, -42, -14, -16,
	-21, -21, -31, -22, -22, -22, -22, -22, -22, -22,
	38, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -32, 79,
	-33, 38, 12, 72, -22, -30, -36, 79, 40, 80,
	80, -22, -32, -22, -22, 12, -22, -25, -24, -20,
	-12, -13, 25, 24, 27, 28, 7, -15, 7, -30,
	-36, -22, 37, 84, -30, 79, 37, -34, -37, -35,
	-38, 13, 17, 12, 80, 83, 83, 83, 80, 84,
	-11, 25, 24, 27, 28, 7, 29, 30, 26, 5,
	-28, -23, -29, 79, -32, 12, 77, -32, 80, 84,
	80, 84, 70, -20, 79, 79, 79, -22, 77, -27,
	-22, 79, -35, -38, 21, 21, 18, 80, 79, 80,
	84, -21, 80, 80, 80, 69, -21, -22, 80, 18,
	80, 80,
}

var yrDef = [...]int{
	1, -2, 2, 3, 0, 5, 0, 0, 4, 0,
	16, 17, 18, 6, 7, 19, 0, 0, 10, 20,
	21, 12, 0, 22, 8, 0, 0, 0, 0, 11,
	23, 0, 0, 0, 13, 30, 0, 24, 0, 9,
	0, 31, 0, 25, 26, 0, 28, 29, 14, 69,
	70, 71, -2, 80, 0, 0, 0, 0, 0, 127,
	128, 0, 130, 131, 132, 134, 136, 138, 139, 0,
	0, 152, 119, 120, 121, 60, 68, 32, 50, 57,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 90, 91, 69, -2, 0, 0, 0,
	0, 0, 0, 0, 64, 140, 149, 36, 34, 35,
	92, 93, 72, 73, 74, 75, 76, 77, 78, 79,
	0, 145, 94, 95, 96, 97, 98, 99, 141, 142,
	143, 144, 146, 147, 148, 150, 151, 81, 82, 0,
	0, 0, 122, 0, 0, 86, 87, 0, 108, 101,
	126, 0, 133, 0, 0, 61, 0, 0, 65, -2,
	33, 51, 52, 53, 54, 55, 56, 58, 59, 88,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	114, 111, 112, 116, 129, 135, 137, 62, 63, 0,
	37, 38, 39, 40, 41, 42, 43, 44, 47, 0,
	0, 124, 125, 0, 103, 123, 0, 85, 107, 0,
	113, 0, 117, -2, 0, 0, 0, 0, 0, 0,
	105, 0, 110, 115, 0, 0, 0, 104, 0, 102,
	0, 0, 45, 46, 48, 0, 0, 106, 84, 0,
	83, 49,
}

var yrTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 72, 59, 3,
	79, 80, 70, 68, 84, 69, 81, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 77, 3,
	3, 78, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 71, 83, 58, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 57, 76, 73,
}

var yrTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 74,
}

var yrTok3 = [...]int{
	0,
}

var yrErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yrDebug        = 0
	yrErrorVerbose = false
)

type yrLexer interface {
	Lex(lval *yrSymType) int
	Error(s string)
}

type yrParser interface {
	Parse(yrLexer) int
	Lookahead() int
}

type yrParserImpl struct {
	lval  yrSymType
	stack [yrInitialStackSize]yrSymType
	char  int
}

func (p *yrParserImpl) Lookahead() int {
	return p.char
}

func yrNewParser() yrParser {
	return &yrParserImpl{}
}

const yrFlag = -1000

func yrTokname(c int) string {
	if c >= 1 && c-1 < len(yrToknames) {
		if yrToknames[c-1] != "" {
			return yrToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yrStatname(s int) string {
	if s >= 0 && s < len(yrStatenames) {
		if yrStatenames[s] != "" {
			return yrStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yrErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yrErrorVerbose {
		return "syntax error"
	}

	for _, e := range yrErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yrTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yrPact[state]
	for tok := TOKSTART; tok-1 < len(yrToknames); tok++ {
		if n := base + tok; n >= 0 && n < yrLast && yrChk[yrAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yrDef[state] == -2 {
		i := 0
		for yrExca[i] != -1 || yrExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yrExca[i] >= 0; i += 2 {
			tok := yrExca[i]
			if tok < TOKSTART || yrExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yrExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yrTokname(tok)
	}
	return res
}

func yrlex1(lex yrLexer, lval *yrSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yrTok1[0]
		goto out
	}
	if char < len(yrTok1) {
		token = yrTok1[char]
		goto out
	}
	if char >= yrPrivate {
		if char < yrPrivate+len(yrTok2) {
			token = yrTok2[char-yrPrivate]
			goto out
		}
	}
	for i := 0; i < len(yrTok3); i += 2 {
		token = yrTok3[i+0]
		if token == char {
			token = yrTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yrTok2[1] /* unknown char */
	}
	if yrDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yrTokname(token), uint(char))
	}
	return char, token
}

func yrParse(yrlex yrLexer) int {
	return yrNewParser().Parse(yrlex)
}

func (yrrcvr *yrParserImpl) Parse(yrlex yrLexer) int {
	var yrn int
	var yrVAL yrSymType
	var yrDollar []yrSymType
	_ = yrDollar // silence set and not used
	yrS := yrrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yrstate := 0
	yrrcvr.char = -1
	yrtoken := -1 // yrrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yrstate = -1
		yrrcvr.char = -1
		yrtoken = -1
	}()
	yrp := -1
	goto yrstack

ret0:
	return 0

ret1:
	return 1

yrstack:
	/* put a state and value onto the stack */
	if yrDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yrTokname(yrtoken), yrStatname(yrstate))
	}

	yrp++
	if yrp >= len(yrS) {
		nyys := make([]yrSymType, len(yrS)*2)
		copy(nyys, yrS)
		yrS = nyys
	}
	yrS[yrp] = yrVAL
	yrS[yrp].yys = yrstate

yrnewstate:
	yrn = yrPact[yrstate]
	if yrn <= yrFlag {
		goto yrdefault /* simple state */
	}
	if yrrcvr.char < 0 {
		yrrcvr.char, yrtoken = yrlex1(yrlex, &yrrcvr.lval)
	}
	yrn += yrtoken
	if yrn < 0 || yrn >= yrLast {
		goto yrdefault
	}
	yrn = yrAct[yrn]
	if yrChk[yrn] == yrtoken { /* valid shift */
		yrrcvr.char = -1
		yrtoken = -1
		yrVAL = yrrcvr.lval
		yrstate = yrn
		if Errflag > 0 {
			Errflag--
		}
		goto yrstack
	}

yrdefault:
	/* default state action */
	yrn = yrDef[yrstate]
	if yrn == -2 {
		if yrrcvr.char < 0 {
			yrrcvr.char, yrtoken = yrlex1(yrlex, &yrrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yrExca[xi+0] == -1 && yrExca[xi+1] == yrstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yrn = yrExca[xi+0]
			if yrn < 0 || yrn == yrtoken {
				break
			}
		}
		yrn = yrExca[xi+1]
		if yrn < 0 {
			goto ret0
		}
	}
	if yrn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yrlex.Error(yrErrorMessage(yrstate, yrtoken))
			Nerrs++
			if yrDebug >= 1 {
				__yyfmt__.Printf("%s", yrStatname(yrstate))
				__yyfmt__.Printf(" saw %s\n", yrTokname(yrtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yrp >= 0 {
				yrn = yrPact[yrS[yrp].yys] + yrErrCode
				if yrn >= 0 && yrn < yrLast {
					yrstate = yrAct[yrn] /* simulate a shift of "error" */
					if yrChk[yrstate] == yrErrCode {
						goto yrstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yrDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yrS[yrp].yys)
				}
				yrp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yrDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yrTokname(yrtoken))
			}
			if yrtoken == yrEofCode {
				goto ret1
			}
			yrrcvr.char = -1
			yrtoken = -1
			goto yrnewstate /* try again in the same state */
		}
	}

	/* reduction by production yrn */
	if yrDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yrn, yrStatname(yrstate))
	}

	yrnt := yrn
	yrpt := yrp
	_ = yrpt // guard against "declared and not used"

	yrp -= yrR2[yrn]
	// yrp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yrp+1 >= len(yrS) {
		nyys := make([]yrSymType, len(yrS)*2)
		copy(nyys, yrS)
		yrS = nyys
	}
	yrVAL = yrS[yrp+1]

	/* consult goto table to find next state */
	yrn = yrR1[yrn]
	yrg := yrPgo[yrn]
	yrj := yrg + yrS[yrp].yys + 1

	if yrj >= yrLast {
		yrstate = yrAct[yrg]
	} else {
		yrstate = yrAct[yrj]
		if yrChk[yrstate] != -yrn {
			yrstate = yrAct[yrg]
		}
	}
	// dummy call; replaced with literal code
	switch yrnt {

	case 2:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:227
		{
			ruleSet := asLexer(yrlex).ruleSet
			ruleSet.Rules = append(ruleSet.Rules, yrDollar[2].rule)
		}
	case 3:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:232
		{
			ruleSet := asLexer(yrlex).ruleSet
			ruleSet.Imports = append(ruleSet.Imports, yrDollar[2].s)
		}
	case 4:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:237
		{
			ruleSet := asLexer(yrlex).ruleSet
			ruleSet.Includes = append(ruleSet.Includes, yrDollar[3].s)
		}
	case 5:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:242
		{

		}
	case 6:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:250
		{
			if err := validateAscii(yrDollar[2].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidAsciiError, err.Error())
			}

			yrVAL.s = yrDollar[2].s
		}
	case 7:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:263
		{
			lexer := asLexer(yrlex)

			// Forbid duplicate rules
			for _, r := range lexer.ruleSet.Rules {
				if yrDollar[3].s == r.Identifier {
					return lexer.setError(
						gyperror.DuplicateRuleError, `duplicate rule "%s"`, yrDollar[3].s)
				}
			}

			// The line number of the rule is the line number of the first
			// modifier....
			yrVAL.lineno = yrDollar[1].lineno

			// ... or the line number of the "rule" keyword if the rule doesn't
			// have any modifiers.
			if yrVAL.lineno == -1 {
				yrVAL.lineno = yrDollar[2].lineno
			}

			yrVAL.rule = &ast.Rule{
				LineNo:     yrVAL.lineno,
				Global:     yrDollar[1].mod&ModGlobal == ModGlobal,
				Private:    yrDollar[1].mod&ModPrivate == ModPrivate,
				Identifier: yrDollar[3].s,
			}
		}
	case 8:
		yrDollar = yrS[yrpt-8 : yrpt+1]
//line parser/grammar.y:292
		{
			// Check for duplicate strings.
			m := make(map[string]bool)
			for _, str := range yrDollar[8].yss {
				ident := str.GetIdentifier()
				// Anonymous strings (no identifiers) are fine.
				if ident == "" {
					continue
				}
				if m[ident] {
					return asLexer(yrlex).setErrorWithLineNumber(
						gyperror.DuplicateStringError,
						str.GetLineNo(),
						`rule "%s": duplicate string identifier "%s"`, yrDollar[4].rule.Identifier, ident)
				}
				m[ident] = true
			}
			yrDollar[4].rule.Tags = yrDollar[5].ss
			yrDollar[4].rule.Meta = yrDollar[7].metas
			yrDollar[4].rule.Strings = yrDollar[8].yss
		}
	case 9:
		yrDollar = yrS[yrpt-11 : yrpt+1]
//line parser/grammar.y:314
		{
			yrDollar[4].rule.Condition = yrDollar[10].expr
			yrVAL.rule = yrDollar[4].rule

			// Clear the strings map for the next rule being parsed.
			asLexer(yrlex).strings = make(map[string]bool)
		}
	case 10:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:326
		{
			yrVAL.metas = []*ast.Meta{}
		}
	case 11:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:330
		{
			yrVAL.metas = yrDollar[3].metas
		}
	case 12:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:338
		{
			yrVAL.yss = []ast.String{}
		}
	case 13:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:342
		{
			yrVAL.yss = yrDollar[3].yss
		}
	case 14:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:350
		{
			yrVAL.expr = yrDollar[3].expr
		}
	case 15:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:358
		{
			yrVAL.mod = 0
			yrVAL.lineno = -1
		}
	case 16:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:363
		{
			yrVAL.mod = yrDollar[1].mod | yrDollar[2].mod

			if yrDollar[1].lineno == -1 {
				yrVAL.lineno = yrDollar[2].lineno
			} else {
				yrVAL.lineno = yrDollar[1].lineno
			}
		}
	case 17:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:377
		{
			yrVAL.mod = ModPrivate
			yrVAL.lineno = yrDollar[1].lineno
		}
	case 18:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:382
		{
			yrVAL.mod = ModGlobal
			yrVAL.lineno = yrDollar[1].lineno
		}
	case 19:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:391
		{
			yrVAL.ss = []string{}
		}
	case 20:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:395
		{
			yrVAL.ss = yrDollar[2].ss
		}
	case 21:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:403
		{
			yrVAL.ss = []string{yrDollar[1].s}
		}
	case 22:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:407
		{
			lexer := asLexer(yrlex)

			for _, tag := range yrDollar[1].ss {
				if tag == yrDollar[2].s {
					return lexer.setError(
						gyperror.DuplicateTagError, `duplicate tag "%s"`, yrDollar[2].s)
				}
			}

			yrVAL.ss = append(yrDollar[1].ss, yrDollar[2].s)
		}
	case 23:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:424
		{
			yrVAL.metas = []*ast.Meta{yrDollar[1].meta}
		}
	case 24:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:428
		{
			yrVAL.metas = append(yrDollar[1].metas, yrDollar[2].meta)
		}
	case 25:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:436
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: yrDollar[3].s,
			}
		}
	case 26:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:443
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: yrDollar[3].i64,
			}
		}
	case 27:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:450
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: -yrDollar[4].i64,
			}
		}
	case 28:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:457
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: true,
			}
		}
	case 29:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:464
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: false,
			}
		}
	case 30:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:475
		{
			lexer := asLexer(yrlex)
			lexer.strings[yrDollar[1].ys.GetIdentifier()] = true
			yrVAL.yss = []ast.String{yrDollar[1].ys}
		}
	case 31:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:481
		{
			lexer := asLexer(yrlex)
			lexer.strings[yrDollar[2].ys.GetIdentifier()] = true
			yrVAL.yss = append(yrDollar[1].yss, yrDollar[2].ys)
		}
	case 32:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:491
		{
			if err := validateUTF8(yrDollar[3].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidUTF8Error, err.Error())
			}
		}
	case 33:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line parser/grammar.y:498
		{
			yrVAL.ys = &ast.TextString{
				BaseString: ast.BaseString{
					Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
					LineNo:     yrDollar[1].lineno,
				},
				ASCII:          yrDollar[5].smod.modifiers&ModASCII != 0,
				Wide:           yrDollar[5].smod.modifiers&ModWide != 0,
				Nocase:         yrDollar[5].smod.modifiers&ModNocase != 0,
				Fullword:       yrDollar[5].smod.modifiers&ModFullword != 0,
				Private:        yrDollar[5].smod.modifiers&ModPrivate != 0,
				Base64:         yrDollar[5].smod.modifiers&ModBase64 != 0,
				Base64Wide:     yrDollar[5].smod.modifiers&ModBase64Wide != 0,
				Base64Alphabet: yrDollar[5].smod.Base64Alphabet,
				Xor:            yrDollar[5].smod.modifiers&ModXor != 0,
				XorMin:         yrDollar[5].smod.XorMin,
				XorMax:         yrDollar[5].smod.XorMax,
				Value:          yrDollar[3].s,
			}
		}
	case 34:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:519
		{
			yrVAL.ys = &ast.RegexpString{
				BaseString: ast.BaseString{
					Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
					LineNo:     yrDollar[1].lineno,
				},
				ASCII:    yrDollar[4].mod&ModASCII != 0,
				Wide:     yrDollar[4].mod&ModWide != 0,
				Nocase:   yrDollar[4].mod&ModNocase != 0,
				Fullword: yrDollar[4].mod&ModFullword != 0,
				Private:  yrDollar[4].mod&ModPrivate != 0,
				Regexp:   yrDollar[3].reg,
			}
		}
	case 35:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:534
		{
			yrVAL.ys = &ast.HexString{
				BaseString: ast.BaseString{
					Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
					LineNo:     yrDollar[1].lineno,
				},
				Private: yrDollar[4].mod&ModPrivate != 0,
				Tokens:  yrDollar[3].hexTokens,
			}
		}
	case 36:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:549
		{
			yrVAL.smod = stringModifiers{}
		}
	case 37:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:553
		{
			if yrDollar[1].smod.modifiers&yrDollar[2].smod.modifiers != 0 {
				return asLexer(yrlex).setError(
					gyperror.DuplicateModifierError, `duplicate modifier`)
			}

			yrDollar[1].smod.modifiers |= yrDollar[2].smod.modifiers

			if yrDollar[2].smod.modifiers&ModXor != 0 {
				yrDollar[1].smod.XorMin = yrDollar[2].smod.XorMin
				yrDollar[1].smod.XorMax = yrDollar[2].smod.XorMax
			}

			if yrDollar[2].smod.modifiers&(ModBase64|ModBase64Wide) != 0 {
				yrDollar[1].smod.Base64Alphabet = yrDollar[2].smod.Base64Alphabet
			}

			yrVAL.smod = yrDollar[1].smod
		}
	case 38:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:576
		{
			yrVAL.smod = stringModifiers{modifiers: ModWide}
		}
	case 39:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:577
		{
			yrVAL.smod = stringModifiers{modifiers: ModASCII}
		}
	case 40:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:578
		{
			yrVAL.smod = stringModifiers{modifiers: ModNocase}
		}
	case 41:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:579
		{
			yrVAL.smod = stringModifiers{modifiers: ModFullword}
		}
	case 42:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:580
		{
			yrVAL.smod = stringModifiers{modifiers: ModPrivate}
		}
	case 43:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:581
		{
			yrVAL.smod = stringModifiers{modifiers: ModBase64}
		}
	case 44:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:582
		{
			yrVAL.smod = stringModifiers{modifiers: ModBase64Wide}
		}
	case 45:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:584
		{
			if err := validateAscii(yrDollar[3].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidAsciiError, err.Error())
			}

			if len(yrDollar[3].s) != 64 {
				return asLexer(yrlex).setError(
					gyperror.InvalidStringModifierError,
					"length of base64 alphabet must be 64")
			}

			yrVAL.smod = stringModifiers{
				modifiers:      ModBase64,
				Base64Alphabet: yrDollar[3].s,
			}
		}
	case 46:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:602
		{
			if err := validateAscii(yrDollar[3].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidAsciiError, err.Error())
			}

			if len(yrDollar[3].s) != 64 {
				return asLexer(yrlex).setError(
					gyperror.InvalidStringModifierError,
					"length of base64 alphabet must be 64")
			}

			yrVAL.smod = stringModifiers{
				modifiers:      ModBase64Wide,
				Base64Alphabet: yrDollar[3].s,
			}
		}
	case 47:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:620
		{
			yrVAL.smod = stringModifiers{
				modifiers: ModXor,
				XorMin:    0,
				XorMax:    255,
			}
		}
	case 48:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:628
		{
			yrVAL.smod = stringModifiers{
				modifiers: ModXor,
				XorMin:    int32(yrDollar[3].i64),
				XorMax:    int32(yrDollar[3].i64),
			}
		}
	case 49:
		yrDollar = yrS[yrpt-6 : yrpt+1]
//line parser/grammar.y:636
		{
			lexer := asLexer(yrlex)

			if yrDollar[3].i64 < 0 {
				return lexer.setError(
					gyperror.InvalidStringModifierError,
					"lower bound for xor range exceeded (min: 0)")
			}

			if yrDollar[5].i64 > 255 {
				return lexer.setError(
					gyperror.InvalidStringModifierError,
					"upper bound for xor range exceeded (max: 255)")
			}

			if yrDollar[3].i64 > yrDollar[5].i64 {
				return lexer.setError(
					gyperror.InvalidStringModifierError,
					"xor lower bound exceeds upper bound")
			}

			yrVAL.smod = stringModifiers{
				modifiers: ModXor,
				XorMin:    int32(yrDollar[3].i64),
				XorMax:    int32(yrDollar[5].i64),
			}
		}
	case 50:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:668
		{
			yrVAL.mod = 0
		}
	case 51:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:672
		{
			yrVAL.mod = yrDollar[1].mod | yrDollar[2].mod
		}
	case 52:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:679
		{
			yrVAL.mod = ModWide
		}
	case 53:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:680
		{
			yrVAL.mod = ModASCII
		}
	case 54:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:681
		{
			yrVAL.mod = ModNocase
		}
	case 55:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:682
		{
			yrVAL.mod = ModFullword
		}
	case 56:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:683
		{
			yrVAL.mod = ModPrivate
		}
	case 57:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:689
		{
			yrVAL.mod = 0
		}
	case 58:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:693
		{
			yrVAL.mod = yrDollar[1].mod | yrDollar[2].mod
		}
	case 59:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:700
		{
			yrVAL.mod = ModPrivate
		}
	case 60:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:706
		{
			yrVAL.expr = &ast.Identifier{Identifier: yrDollar[1].s}
		}
	case 61:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:710
		{
			yrVAL.expr = &ast.MemberAccess{
				Container: yrDollar[1].expr,
				Member:    yrDollar[3].s,
			}
		}
	case 62:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:717
		{
			yrVAL.expr = &ast.Subscripting{
				Array: yrDollar[1].expr,
				Index: yrDollar[3].expr,
			}
		}
	case 63:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:724
		{
			yrVAL.expr = &ast.FunctionCall{
				Callable:  yrDollar[1].expr,
				Arguments: yrDollar[3].exprs,
			}
		}
	case 64:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:735
		{
			yrVAL.exprs = []ast.Expression{}
		}
	case 65:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:739
		{
			yrVAL.exprs = yrDollar[1].exprs
		}
	case 66:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:746
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].expr}
		}
	case 67:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:750
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].expr)
		}
	case 68:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:758
		{
			yrVAL.reg = yrDollar[1].reg
		}
	case 69:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:766
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 70:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:774
		{
			yrVAL.expr = ast.KeywordTrue
		}
	case 71:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:778
		{
			yrVAL.expr = ast.KeywordFalse
		}
	case 72:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:782
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpMatches,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].reg},
			}
		}
	case 73:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:789
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpContains,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 74:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:796
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIContains,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 75:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:803
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpStartsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 76:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:810
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIStartsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 77:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:817
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpEndsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 78:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:824
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIEndsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 79:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:831
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIEquals,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 80:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:838
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "$")
			// Exclude anonymous ($) strings.
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringIdentifier{
				Identifier: identifier,
			}
		}
	case 81:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:854
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "$")
			// Exclude anonymous ($) strings.
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringIdentifier{
				Identifier: identifier,
				At:         yrDollar[3].expr,
			}
		}
	case 82:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:871
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "$")
			// Exclude anonymous ($) strings.
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringIdentifier{
				Identifier: identifier,
				In:         yrDollar[3].rng,
			}
		}
	case 83:
		yrDollar = yrS[yrpt-9 : yrpt+1]
//line parser/grammar.y:888
		{
			yrVAL.expr = &ast.ForIn{
				Quantifier: yrDollar[2].expr,
				Variables:  yrDollar[3].ss,
				Iterator:   yrDollar[5].node,
				Condition:  yrDollar[8].expr,
			}
		}
	case 84:
		yrDollar = yrS[yrpt-8 : yrpt+1]
//line parser/grammar.y:897
		{
			yrVAL.expr = &ast.ForOf{
				Quantifier: yrDollar[2].expr,
				Strings:    yrDollar[4].node,
				Condition:  yrDollar[7].expr,
			}
		}
	case 85:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line parser/grammar.y:905
		{
			yrVAL.expr = &ast.Of{
				Quantifier: yrDollar[1].expr,
				Strings:    yrDollar[3].node,
				In:         yrDollar[5].rng,
			}
		}
	case 86:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:913
		{
			yrVAL.expr = &ast.Of{
				Quantifier: yrDollar[1].expr,
				Strings:    yrDollar[3].node,
			}
		}
	case 87:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:920
		{
			yrVAL.expr = &ast.Of{
				Quantifier: yrDollar[1].expr,
				Rules:      yrDollar[3].node,
			}
		}
	case 88:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:927
		{
			yrVAL.expr = &ast.Of{
				Quantifier: &ast.Percentage{yrDollar[1].expr},
				Strings:    yrDollar[4].node,
			}
		}
	case 89:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:934
		{
			yrVAL.expr = &ast.Of{
				Quantifier: &ast.Percentage{yrDollar[1].expr},
				Rules:      yrDollar[4].node,
			}
		}
	case 90:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:941
		{
			yrVAL.expr = &ast.Not{yrDollar[2].expr}
		}
	case 91:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:945
		{
			yrVAL.expr = &ast.Defined{yrDollar[2].expr}
		}
	case 92:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:949
		{
			yrVAL.expr = operation(ast.OpAnd, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 93:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:953
		{
			yrVAL.expr = operation(ast.OpOr, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 94:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:957
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpLessThan,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 95:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:964
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpGreaterThan,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 96:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:971
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpLessOrEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 97:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:978
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpGreaterOrEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 98:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:985
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 99:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:992
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpNotEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 100:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:999
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 101:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1003
		{
			yrVAL.expr = &ast.Group{yrDollar[2].expr}
		}
	case 102:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1011
		{
			yrVAL.node = &ast.Enum{Values: yrDollar[2].exprs}
		}
	case 103:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1015
		{
			yrVAL.node = yrDollar[1].rng
		}
	case 104:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line parser/grammar.y:1023
		{
			yrVAL.rng = &ast.Range{
				Start: yrDollar[2].expr,
				End:   yrDollar[4].expr,
			}
		}
	case 105:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1034
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].expr}
		}
	case 106:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1038
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].expr)
		}
	case 107:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1046
		{
			yrVAL.node = &ast.Enum{Values: yrDollar[2].exprs}
		}
	case 108:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1050
		{
			lexer := asLexer(yrlex)
			if len(lexer.strings) == 0 {
				return lexer.setError(
					gyperror.UndefinedStringIdentifierError,
					`undefined string identifier: %s`, ast.KeywordThem)
			}
			yrVAL.node = ast.KeywordThem
		}
	case 109:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1064
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].si}
		}
	case 110:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1068
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].si)
		}
	case 111:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1076
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "$")
			lexer := asLexer(yrlex)
			// Anonymous strings ($) in string enumerations are an error.
			if _, ok := lexer.strings[identifier]; !ok || identifier == "" {
				return lexer.setError(
					gyperror.UndefinedStringIdentifierError,
					`undefined string identifier: %s`, yrDollar[1].s)
			}
			yrVAL.si = &ast.StringIdentifier{
				Identifier: identifier,
			}
		}
	case 112:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1090
		{
			identifier := strings.TrimSuffix(yrDollar[1].s, "*")
			lexer := asLexer(yrlex)
			// There must be at least one defined string.
			if len(identifier) == 0 && len(lexer.strings) == 0 {
				return lexer.setError(
					gyperror.UndefinedStringIdentifierError,
					`undefined string identifier: %s`, yrDollar[1].s)
			}

			// There must be at least one string that will match the wildcard.
			identifier = strings.TrimPrefix(identifier, "$")
			match := false
			for s, _ := range lexer.strings {
				if strings.HasPrefix(s, identifier) {
					match = true
					break
				}
			}
			if !match {
				return lexer.setError(
					gyperror.UndefinedStringIdentifierError,
					`undefined string identifier: %s`, yrDollar[1].s)
			}
			// Can't use "identifier" here as that has the asterisk stripped already.
			yrVAL.si = &ast.StringIdentifier{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
			}
		}
	case 113:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1124
		{
			yrVAL.node = &ast.Enum{Values: yrDollar[2].exprs}
		}
	case 114:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1132
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].ident}
		}
	case 115:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1136
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].ident)
		}
	case 116:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1144
		{
			yrVAL.ident = &ast.Identifier{Identifier: yrDollar[1].s}
		}
	case 117:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:1148
		{
			yrVAL.ident = &ast.Identifier{Identifier: yrDollar[1].s + "*"}
		}
	case 118:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1156
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 119:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1160
		{
			yrVAL.expr = ast.KeywordAll
		}
	case 120:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1164
		{
			yrVAL.expr = ast.KeywordAny
		}
	case 121:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1168
		{
			yrVAL.expr = ast.KeywordNone
		}
	case 122:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1176
		{
			yrVAL.ss = []string{yrDollar[1].s}
		}
	case 123:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1180
		{
			yrVAL.ss = append(yrDollar[1].ss, yrDollar[3].s)
		}
	case 124:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1187
		{
			yrVAL.node = yrDollar[1].expr
		}
	case 125:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1191
		{
			yrVAL.node = yrDollar[1].node
		}
	case 126:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1199
		{
			yrVAL.expr = &ast.Group{yrDollar[2].expr}
		}
	case 127:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1203
		{
			yrVAL.expr = ast.KeywordFilesize
		}
	case 128:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1207
		{
			yrVAL.expr = ast.KeywordEntrypoint
		}
	case 129:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:1211
		{
			yrVAL.expr = &ast.FunctionCall{
				Callable:  &ast.Identifier{Identifier: yrDollar[1].s},
				Arguments: []ast.Expression{yrDollar[3].expr},
			}
		}
	case 130:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1218
		{
			yrVAL.expr = &ast.LiteralInteger{yrDollar[1].i64}
		}
	case 131:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1222
		{
			yrVAL.expr = &ast.LiteralFloat{yrDollar[1].f64}
		}
	case 132:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1226
		{
			if err := validateUTF8(yrDollar[1].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidUTF8Error, err.Error())
			}

			yrVAL.expr = &ast.LiteralString{yrDollar[1].s}
		}
	case 133:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1235
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "#")
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringCount{
				Identifier: identifier,
				In:         yrDollar[3].rng,
			}
		}
	case 134:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1251
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "#")
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringCount{
				Identifier: identifier,
			}
		}
	case 135:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:1266
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "@")
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringOffset{
				Identifier: identifier,
				Index:      yrDollar[3].expr,
			}
		}
	case 136:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1282
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "@")
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringOffset{
				Identifier: identifier,
			}
		}
	case 137:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:1297
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "!")
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringLength{
				Identifier: identifier,
				Index:      yrDollar[3].expr,
			}
		}
	case 138:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1313
		{
			identifier := strings.TrimPrefix(yrDollar[1].s, "!")
			if identifier != "" {
				lexer := asLexer(yrlex)
				if _, ok := lexer.strings[identifier]; !ok {
					return lexer.setError(
						gyperror.UndefinedStringIdentifierError,
						`undefined string identifier: %s`, yrDollar[1].s)
				}
			}
			yrVAL.expr = &ast.StringLength{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "!"),
			}
		}
	case 139:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1328
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 140:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:1332
		{
			yrVAL.expr = &ast.Minus{yrDollar[2].expr}
		}
	case 141:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1336
		{
			yrVAL.expr = operation(ast.OpAdd, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 142:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1340
		{
			yrVAL.expr = operation(ast.OpSub, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 143:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1344
		{
			yrVAL.expr = operation(ast.OpMul, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 144:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1348
		{
			yrVAL.expr = operation(ast.OpDiv, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 145:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1352
		{
			yrVAL.expr = operation(ast.OpMod, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 146:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1356
		{
			yrVAL.expr = operation(ast.OpBitXor, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 147:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1360
		{
			yrVAL.expr = operation(ast.OpBitAnd, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 148:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1364
		{
			yrVAL.expr = operation(ast.OpBitOr, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 149:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:1368
		{
			yrVAL.expr = &ast.BitwiseNot{yrDollar[2].expr}
		}
	case 150:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1372
		{
			yrVAL.expr = operation(ast.OpShiftLeft, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 151:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1376
		{
			yrVAL.expr = operation(ast.OpShiftRight, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 152:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1380
		{
			yrVAL.expr = yrDollar[1].reg
		}
	}
	goto yrstack /* stack new state and value */
}
