// Code generated by goyacc -p yr -o parser/parser.go parser/grammar.y. DO NOT EDIT.

//line parser/grammar.y:31
package parser

import __yyfmt__ "fmt"

//line parser/grammar.y:31

import (
	"github.com/VirusTotal/gyp/ast"
	gyperror "github.com/VirusTotal/gyp/error"
	"strings"
)

type modifiers uint64

const (
	_                   = iota // ignore first value by assigning to blank identifier
	ModGlobal modifiers = 1 << iota
	ModPrivate
	ModASCII
	ModWide
	ModXor
	ModFullword
	ModNocase
	ModBase64
	ModBase64Wide
)

type stringModifiers struct {
	modifiers
	XorMin         int32
	XorMax         int32
	Base64Alphabet string
}

//line parser/grammar.y:171
type yrSymType struct {
	yys        int
	i64        int64
	f64        float64
	s          string
	ss         []string
	reg        *ast.LiteralRegexp
	hexTokens  []ast.HexToken
	mod        modifiers
	smod       stringModifiers
	rule       *ast.Rule
	meta       *ast.Meta
	metas      []*ast.Meta
	ys         ast.String
	yss        []ast.String
	node       ast.Node
	nodes      []ast.Node
	rng        *ast.Range
	expr       ast.Expression
	exprs      []ast.Expression
	si         *ast.StringIdentifier
	sis        []*ast.StringIdentifier
	quantifier *ast.Quantifier

	// lineno is not a symbol type, it's the line number where the symbol
	// appears in the source file. This is a little hack used for passing
	// the line number where each token appears from the lexer to the parser.
	// This relies on the fact that Go doesn't implement unions, and therefore
	// goyacc actually uses a struct for passing around symbol values. Being
	// a struct those values can contain both the value itself (in some of
	// the fields listed above) and the line number. This wouldn't work with
	// C code produced by yacc, as this would be a union instead of a struct.
	//
	// This can be used within rule actions as:
	//
	//  lineNumber := $<lineno>1
	//
	// In the example lineNumber will hold the line number for the first
	// symbol in the production rule. The value for the symbol itself would
	// be $1 as usual. Similarly $<lineno>N will return the line number for
	// the N-th symbol in the production rule.

	lineno int
}

const _END_OF_INCLUDED_FILE_ = 57346
const _DOT_DOT_ = 57347
const _RULE_ = 57348
const _PRIVATE_ = 57349
const _GLOBAL_ = 57350
const _META_ = 57351
const _STRINGS_ = 57352
const _CONDITION_ = 57353
const _IDENTIFIER_ = 57354
const _STRING_IDENTIFIER_ = 57355
const _STRING_COUNT_ = 57356
const _STRING_OFFSET_ = 57357
const _STRING_LENGTH_ = 57358
const _STRING_IDENTIFIER_WITH_WILDCARD_ = 57359
const _NUMBER_ = 57360
const _DOUBLE_ = 57361
const _INTEGER_FUNCTION_ = 57362
const _TEXT_STRING_ = 57363
const _HEX_STRING_ = 57364
const _REGEXP_ = 57365
const _ASCII_ = 57366
const _WIDE_ = 57367
const _XOR_ = 57368
const _NOCASE_ = 57369
const _FULLWORD_ = 57370
const _BASE64_ = 57371
const _BASE64WIDE_ = 57372
const _AT_ = 57373
const _FILESIZE_ = 57374
const _ENTRYPOINT_ = 57375
const _ALL_ = 57376
const _ANY_ = 57377
const _NONE_ = 57378
const _IN_ = 57379
const _OF_ = 57380
const _FOR_ = 57381
const _THEM_ = 57382
const _MATCHES_ = 57383
const _CONTAINS_ = 57384
const _ICONTAINS_ = 57385
const _STARTSWITH_ = 57386
const _ISTARTSWITH_ = 57387
const _ENDSWITH_ = 57388
const _IENDSWITH_ = 57389
const _IMPORT_ = 57390
const _TRUE_ = 57391
const _FALSE_ = 57392
const _INCLUDE_ = 57393
const _OR_ = 57394
const _AND_ = 57395
const _EQ_ = 57396
const _NEQ_ = 57397
const _LT_ = 57398
const _LE_ = 57399
const _GT_ = 57400
const _GE_ = 57401
const _SHIFT_LEFT_ = 57402
const _SHIFT_RIGHT_ = 57403
const _NOT_ = 57404
const UNARY_MINUS = 57405

var yrToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_END_OF_INCLUDED_FILE_",
	"_DOT_DOT_",
	"_RULE_",
	"_PRIVATE_",
	"_GLOBAL_",
	"_META_",
	"_STRINGS_",
	"_CONDITION_",
	"_IDENTIFIER_",
	"_STRING_IDENTIFIER_",
	"_STRING_COUNT_",
	"_STRING_OFFSET_",
	"_STRING_LENGTH_",
	"_STRING_IDENTIFIER_WITH_WILDCARD_",
	"_NUMBER_",
	"_DOUBLE_",
	"_INTEGER_FUNCTION_",
	"_TEXT_STRING_",
	"_HEX_STRING_",
	"_REGEXP_",
	"_ASCII_",
	"_WIDE_",
	"_XOR_",
	"_NOCASE_",
	"_FULLWORD_",
	"_BASE64_",
	"_BASE64WIDE_",
	"_AT_",
	"_FILESIZE_",
	"_ENTRYPOINT_",
	"_ALL_",
	"_ANY_",
	"_NONE_",
	"_IN_",
	"_OF_",
	"_FOR_",
	"_THEM_",
	"_MATCHES_",
	"_CONTAINS_",
	"_ICONTAINS_",
	"_STARTSWITH_",
	"_ISTARTSWITH_",
	"_ENDSWITH_",
	"_IENDSWITH_",
	"_IMPORT_",
	"_TRUE_",
	"_FALSE_",
	"_INCLUDE_",
	"_OR_",
	"_AND_",
	"'|'",
	"'^'",
	"'&'",
	"_EQ_",
	"_NEQ_",
	"_LT_",
	"_LE_",
	"_GT_",
	"_GE_",
	"_SHIFT_LEFT_",
	"_SHIFT_RIGHT_",
	"'+'",
	"'-'",
	"'*'",
	"'\\\\'",
	"'%'",
	"_NOT_",
	"'~'",
	"UNARY_MINUS",
	"'{'",
	"'}'",
	"':'",
	"'='",
	"'('",
	"')'",
	"'.'",
	"'['",
	"']'",
	"','",
}

var yrStatenames = [...]string{}

const yrEofCode = 1
const yrErrCode = 2
const yrInitialStackSize = 16

//line parser/grammar.y:1137

// This function takes an operator and two operands and returns a Expression
// representing the operation. If the left operand is an operation of the
// the same kind than the specified by the operator, the right operand is
// simply appended to that existing operation. This implies that the operator
// must be left-associative in order to be used with this function.
func operation(operator ast.OperatorType, left, right ast.Expression) (n ast.Expression) {
	if operation, ok := left.(*ast.Operation); ok && operation.Operator == operator {
		operation.Operands = append(operation.Operands, right)
		n = operation
	} else {
		n = &ast.Operation{
			Operator: operator,
			Operands: []ast.Expression{left, right},
		}
	}
	return n
}

//line yacctab:1
var yrExca = [...]int{
	-1, 1,
	1, -1,
	-2, 15,
	-1, 52,
	38, 108,
	-2, 95,
	-1, 113,
	38, 108,
	-2, 95,
	-1, 171,
	78, 66,
	82, 66,
	-2, 69,
	-1, 214,
	78, 67,
	82, 67,
	-2, 69,
}

const yrPrivate = 57344

const yrLast = 457

var yrAct = [...]int{
	52, 186, 49, 152, 67, 159, 229, 212, 182, 194,
	230, 213, 117, 116, 82, 83, 84, 85, 86, 87,
	88, 120, 161, 118, 119, 241, 114, 102, 100, 101,
	93, 94, 89, 91, 90, 92, 103, 104, 95, 96,
	97, 98, 99, 233, 235, 81, 80, 232, 70, 81,
	80, 163, 193, 183, 74, 108, 234, 162, 113, 160,
	112, 228, 222, 217, 216, 215, 153, 48, 115, 121,
	122, 240, 42, 39, 38, 238, 219, 211, 40, 28,
	26, 17, 18, 111, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 126, 127, 80,
	158, 95, 96, 97, 98, 99, 164, 165, 166, 208,
	168, 110, 55, 171, 81, 80, 74, 53, 64, 65,
	66, 128, 61, 62, 60, 63, 75, 75, 103, 104,
	95, 96, 97, 98, 99, 5, 58, 59, 71, 72,
	73, 225, 30, 54, 181, 224, 102, 100, 101, 97,
	98, 99, 184, 50, 51, 103, 104, 95, 96, 97,
	98, 99, 76, 78, 77, 105, 44, 107, 35, 43,
	68, 106, 37, 192, 56, 69, 209, 206, 13, 7,
	154, 57, 4, 8, 239, 187, 226, 214, 79, 188,
	157, 33, 36, 210, 167, 218, 31, 46, 47, 221,
	23, 20, 14, 41, 74, 223, 64, 65, 66, 25,
	61, 62, 60, 63, 45, 75, 156, 9, 11, 12,
	180, 237, 100, 101, 58, 59, 71, 72, 73, 22,
	103, 104, 95, 96, 97, 98, 99, 123, 27, 231,
	102, 100, 101, 15, 1, 236, 185, 155, 207, 103,
	104, 95, 96, 97, 98, 99, 205, 220, 68, 169,
	170, 32, 6, 69, 102, 100, 101, 191, 10, 109,
	125, 179, 124, 103, 104, 95, 96, 97, 98, 99,
	82, 83, 84, 85, 86, 87, 88, 173, 172, 195,
	34, 190, 24, 102, 100, 101, 93, 94, 89, 91,
	90, 92, 103, 104, 95, 96, 97, 98, 99, 74,
	21, 64, 65, 66, 29, 61, 62, 60, 63, 19,
	75, 16, 102, 100, 101, 2, 3, 0, 0, 58,
	59, 103, 104, 95, 96, 97, 98, 99, 102, 100,
	101, 204, 0, 0, 0, 0, 227, 103, 104, 95,
	96, 97, 98, 99, 0, 178, 0, 0, 0, 0,
	0, 0, 189, 68, 0, 0, 0, 0, 69, 102,
	100, 101, 175, 174, 109, 176, 177, 0, 103, 104,
	95, 96, 97, 98, 99, 0, 0, 0, 0, 0,
	102, 100, 101, 163, 0, 0, 0, 0, 0, 103,
	104, 95, 96, 97, 98, 99, 102, 100, 101, 0,
	0, 0, 0, 0, 0, 103, 104, 95, 96, 97,
	98, 99, 101, 200, 0, 0, 0, 0, 0, 103,
	104, 95, 96, 97, 98, 99, 0, 0, 0, 0,
	197, 196, 203, 198, 199, 201, 202,
}

var yrPact = [...]int{
	-1000, 141, -1000, -1000, 172, -1000, 221, 167, -1000, 200,
	-1000, -1000, -1000, -1000, -1000, 6, 9, 199, 230, 198,
	-1000, 209, 5, -1000, -1000, 4, 194, 190, 189, 194,
	-1000, -2, -1, 3, 189, -1000, -4, -1000, 158, -1000,
	114, -1000, 151, -1000, -1000, 180, -1000, -1000, 72, -1000,
	-1000, -1000, 249, 144, 202, 83, 114, 114, -1000, -1000,
	-9, -1000, -1000, -1000, -1000, -67, -68, -56, 307, 307,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	114, 114, 113, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, -11, 188, 362, 307,
	-18, -1000, -21, -27, 72, 307, 307, 307, 192, 307,
	114, -1000, -1000, -1000, 358, 223, -1000, 56, -1000, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 92, 92, -1000, -1000, -1000, 376, 75, 177, 46,
	46, 362, -1000, 307, -1000, -29, -18, -1000, 325, -1000,
	182, -1000, -1000, -1000, 294, 220, 196, -1000, 102, -26,
	-73, -1000, 426, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 346, 42, 191, 2, -71, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 114, -1000, -1000, -1000, -1000, -1000,
	-1000, -12, -13, -14, 307, 1, -56, -1000, 307, -1000,
	-1000, -15, -1000, 182, -1000, 134, 130, 178, 278, -16,
	-72, 346, 114, -1000, -31, -35, -22, -1000, 114, -1000,
	307, -3, -1000, -1000, -1000, 176, -7, 362, -1000, -53,
	-1000, -1000,
}

var yrPgo = [...]int{
	0, 336, 335, 331, 329, 152, 324, 320, 302, 178,
	300, 299, 298, 297, 282, 281, 280, 278, 272, 271,
	2, 26, 0, 4, 270, 269, 122, 267, 266, 258,
	5, 48, 3, 257, 256, 1, 254, 253, 248, 247,
}

var yrR1 = [...]int{
	0, 36, 36, 36, 36, 36, 1, 37, 38, 2,
	7, 7, 8, 8, 19, 18, 18, 17, 17, 3,
	3, 4, 4, 6, 6, 5, 5, 5, 5, 5,
	10, 10, 39, 9, 9, 9, 12, 12, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	14, 14, 13, 13, 13, 13, 13, 16, 16, 15,
	23, 23, 23, 23, 25, 25, 24, 24, 31, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 29, 29, 32,
	27, 27, 30, 30, 34, 34, 35, 35, 26, 26,
	26, 26, 33, 33, 28, 28, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22,
}

var yrR2 = [...]int{
	0, 0, 2, 2, 3, 2, 2, 0, 0, 11,
	0, 3, 0, 3, 3, 0, 2, 1, 1, 0,
	2, 1, 2, 1, 2, 3, 3, 4, 3, 3,
	1, 2, 0, 5, 4, 4, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 1, 4, 6,
	0, 2, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 3, 4, 4, 0, 1, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 3, 3, 9, 8, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 3, 1, 5,
	1, 3, 3, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 3, 1, 1, 4,
	1, 1, 1, 1, 4, 1, 4, 1, 1, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 1,
}

var yrChk = [...]int{
	-1000, -36, -2, -1, 51, 4, -18, 48, 21, 6,
	-17, 7, 8, 21, 12, -37, -3, 75, 73, -4,
	12, -7, 9, 12, -8, 10, 75, -38, 75, -6,
	-5, 12, -19, 11, -10, -9, 13, -5, 76, 74,
	75, -9, 76, 21, 18, 66, 49, 50, -21, -20,
	49, 50, -22, 13, 39, -26, 70, 77, 32, 33,
	20, 18, 19, 21, 14, 15, 16, -23, 66, 71,
	-31, 34, 35, 36, 12, 23, 21, 23, 22, 18,
	53, 52, 41, 42, 43, 44, 45, 46, 47, 59,
	61, 60, 62, 57, 58, 65, 66, 67, 68, 69,
	55, 56, 54, 63, 64, 31, 37, -26, -22, 77,
	38, -21, -20, -22, -21, 77, 80, 80, 79, 80,
	77, -22, -22, -39, -14, -16, -21, -21, -31, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -32, 77, 2, -33, 38, 12, -22, -30,
	77, 40, 78, 78, -22, -22, -22, 12, -22, -25,
	-24, -20, -12, -13, 25, 24, 27, 28, 7, -15,
	7, -22, 37, 82, -30, -34, -35, 13, 17, 78,
	81, 81, 81, 78, 82, -11, 25, 24, 27, 28,
	7, 29, 30, 26, 5, -28, -23, -29, 77, -32,
	12, 75, 78, 82, -20, 77, 77, 77, -22, 75,
	-27, -22, 77, -35, 21, 21, 18, 78, 77, 78,
	82, -21, 78, 78, 78, 66, -21, -22, 78, 18,
	78, 78,
}

var yrDef = [...]int{
	1, -2, 2, 3, 0, 5, 0, 0, 4, 0,
	16, 17, 18, 6, 7, 19, 0, 0, 10, 20,
	21, 12, 0, 22, 8, 0, 0, 0, 0, 11,
	23, 0, 0, 0, 13, 30, 0, 24, 0, 9,
	0, 31, 0, 25, 26, 0, 28, 29, 14, 69,
	70, 71, -2, 79, 0, 0, 0, 0, 117, 118,
	0, 120, 121, 122, 123, 125, 127, 128, 0, 0,
	141, 109, 110, 111, 60, 68, 32, 50, 57, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 86, 69, -2, 0, 0, 0, 0, 0, 0,
	64, 129, 138, 36, 34, 35, 87, 88, 72, 73,
	74, 75, 76, 77, 78, 89, 90, 91, 92, 93,
	94, 130, 131, 132, 133, 134, 135, 136, 137, 139,
	140, 80, 81, 0, 82, 0, 0, 112, 0, 85,
	0, 103, 96, 116, 0, 0, 0, 61, 0, 0,
	65, -2, 33, 51, 52, 53, 54, 55, 56, 58,
	59, 0, 0, 0, 0, 0, 104, 106, 107, 119,
	124, 126, 62, 63, 0, 37, 38, 39, 40, 41,
	42, 43, 44, 47, 0, 0, 114, 115, 0, 98,
	113, 0, 102, 0, -2, 0, 0, 0, 0, 0,
	0, 100, 0, 105, 0, 0, 0, 99, 0, 97,
	0, 0, 45, 46, 48, 0, 0, 101, 84, 0,
	83, 49,
}

var yrTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 69, 56, 3,
	77, 78, 67, 65, 82, 66, 79, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 75, 3,
	3, 76, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 80, 68, 81, 55, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 54, 74, 71,
}

var yrTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	70, 72,
}

var yrTok3 = [...]int{
	0,
}

var yrErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yrDebug        = 0
	yrErrorVerbose = false
)

type yrLexer interface {
	Lex(lval *yrSymType) int
	Error(s string)
}

type yrParser interface {
	Parse(yrLexer) int
	Lookahead() int
}

type yrParserImpl struct {
	lval  yrSymType
	stack [yrInitialStackSize]yrSymType
	char  int
}

func (p *yrParserImpl) Lookahead() int {
	return p.char
}

func yrNewParser() yrParser {
	return &yrParserImpl{}
}

const yrFlag = -1000

func yrTokname(c int) string {
	if c >= 1 && c-1 < len(yrToknames) {
		if yrToknames[c-1] != "" {
			return yrToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yrStatname(s int) string {
	if s >= 0 && s < len(yrStatenames) {
		if yrStatenames[s] != "" {
			return yrStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yrErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yrErrorVerbose {
		return "syntax error"
	}

	for _, e := range yrErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yrTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yrPact[state]
	for tok := TOKSTART; tok-1 < len(yrToknames); tok++ {
		if n := base + tok; n >= 0 && n < yrLast && yrChk[yrAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yrDef[state] == -2 {
		i := 0
		for yrExca[i] != -1 || yrExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yrExca[i] >= 0; i += 2 {
			tok := yrExca[i]
			if tok < TOKSTART || yrExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yrExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yrTokname(tok)
	}
	return res
}

func yrlex1(lex yrLexer, lval *yrSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yrTok1[0]
		goto out
	}
	if char < len(yrTok1) {
		token = yrTok1[char]
		goto out
	}
	if char >= yrPrivate {
		if char < yrPrivate+len(yrTok2) {
			token = yrTok2[char-yrPrivate]
			goto out
		}
	}
	for i := 0; i < len(yrTok3); i += 2 {
		token = yrTok3[i+0]
		if token == char {
			token = yrTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yrTok2[1] /* unknown char */
	}
	if yrDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yrTokname(token), uint(char))
	}
	return char, token
}

func yrParse(yrlex yrLexer) int {
	return yrNewParser().Parse(yrlex)
}

func (yrrcvr *yrParserImpl) Parse(yrlex yrLexer) int {
	var yrn int
	var yrVAL yrSymType
	var yrDollar []yrSymType
	_ = yrDollar // silence set and not used
	yrS := yrrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yrstate := 0
	yrrcvr.char = -1
	yrtoken := -1 // yrrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yrstate = -1
		yrrcvr.char = -1
		yrtoken = -1
	}()
	yrp := -1
	goto yrstack

ret0:
	return 0

ret1:
	return 1

yrstack:
	/* put a state and value onto the stack */
	if yrDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yrTokname(yrtoken), yrStatname(yrstate))
	}

	yrp++
	if yrp >= len(yrS) {
		nyys := make([]yrSymType, len(yrS)*2)
		copy(nyys, yrS)
		yrS = nyys
	}
	yrS[yrp] = yrVAL
	yrS[yrp].yys = yrstate

yrnewstate:
	yrn = yrPact[yrstate]
	if yrn <= yrFlag {
		goto yrdefault /* simple state */
	}
	if yrrcvr.char < 0 {
		yrrcvr.char, yrtoken = yrlex1(yrlex, &yrrcvr.lval)
	}
	yrn += yrtoken
	if yrn < 0 || yrn >= yrLast {
		goto yrdefault
	}
	yrn = yrAct[yrn]
	if yrChk[yrn] == yrtoken { /* valid shift */
		yrrcvr.char = -1
		yrtoken = -1
		yrVAL = yrrcvr.lval
		yrstate = yrn
		if Errflag > 0 {
			Errflag--
		}
		goto yrstack
	}

yrdefault:
	/* default state action */
	yrn = yrDef[yrstate]
	if yrn == -2 {
		if yrrcvr.char < 0 {
			yrrcvr.char, yrtoken = yrlex1(yrlex, &yrrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yrExca[xi+0] == -1 && yrExca[xi+1] == yrstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yrn = yrExca[xi+0]
			if yrn < 0 || yrn == yrtoken {
				break
			}
		}
		yrn = yrExca[xi+1]
		if yrn < 0 {
			goto ret0
		}
	}
	if yrn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yrlex.Error(yrErrorMessage(yrstate, yrtoken))
			Nerrs++
			if yrDebug >= 1 {
				__yyfmt__.Printf("%s", yrStatname(yrstate))
				__yyfmt__.Printf(" saw %s\n", yrTokname(yrtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yrp >= 0 {
				yrn = yrPact[yrS[yrp].yys] + yrErrCode
				if yrn >= 0 && yrn < yrLast {
					yrstate = yrAct[yrn] /* simulate a shift of "error" */
					if yrChk[yrstate] == yrErrCode {
						goto yrstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yrDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yrS[yrp].yys)
				}
				yrp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yrDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yrTokname(yrtoken))
			}
			if yrtoken == yrEofCode {
				goto ret1
			}
			yrrcvr.char = -1
			yrtoken = -1
			goto yrnewstate /* try again in the same state */
		}
	}

	/* reduction by production yrn */
	if yrDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yrn, yrStatname(yrstate))
	}

	yrnt := yrn
	yrpt := yrp
	_ = yrpt // guard against "declared and not used"

	yrp -= yrR2[yrn]
	// yrp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yrp+1 >= len(yrS) {
		nyys := make([]yrSymType, len(yrS)*2)
		copy(nyys, yrS)
		yrS = nyys
	}
	yrVAL = yrS[yrp+1]

	/* consult goto table to find next state */
	yrn = yrR1[yrn]
	yrg := yrPgo[yrn]
	yrj := yrg + yrS[yrp].yys + 1

	if yrj >= yrLast {
		yrstate = yrAct[yrg]
	} else {
		yrstate = yrAct[yrj]
		if yrChk[yrstate] != -yrn {
			yrstate = yrAct[yrg]
		}
	}
	// dummy call; replaced with literal code
	switch yrnt {

	case 2:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:221
		{
			ruleSet := asLexer(yrlex).ruleSet
			ruleSet.Rules = append(ruleSet.Rules, yrDollar[2].rule)
		}
	case 3:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:226
		{
			ruleSet := asLexer(yrlex).ruleSet
			ruleSet.Imports = append(ruleSet.Imports, yrDollar[2].s)
		}
	case 4:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:231
		{
			ruleSet := asLexer(yrlex).ruleSet
			ruleSet.Includes = append(ruleSet.Includes, yrDollar[3].s)
		}
	case 5:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:236
		{

		}
	case 6:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:244
		{
			if err := validateAscii(yrDollar[2].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidAsciiError, err.Error())
			}

			yrVAL.s = yrDollar[2].s
		}
	case 7:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:257
		{
			lexer := asLexer(yrlex)

			// Forbid duplicate rules
			for _, r := range lexer.ruleSet.Rules {
				if yrDollar[3].s == r.Identifier {
					return lexer.setError(
						gyperror.DuplicateRuleError, `duplicate rule "%s"`, yrDollar[3].s)
				}
			}

			yrVAL.rule = &ast.Rule{
				LineNo:     yrDollar[2].lineno,
				Global:     yrDollar[1].mod&ModGlobal == ModGlobal,
				Private:    yrDollar[1].mod&ModPrivate == ModPrivate,
				Identifier: yrDollar[3].s,
			}
		}
	case 8:
		yrDollar = yrS[yrpt-8 : yrpt+1]
//line parser/grammar.y:276
		{
			yrDollar[4].rule.Tags = yrDollar[5].ss
			yrDollar[4].rule.Meta = yrDollar[7].metas
			yrDollar[4].rule.Strings = yrDollar[8].yss
		}
	case 9:
		yrDollar = yrS[yrpt-11 : yrpt+1]
//line parser/grammar.y:282
		{
			yrDollar[4].rule.Condition = yrDollar[10].expr
			yrVAL.rule = yrDollar[4].rule
		}
	case 10:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:291
		{
			yrVAL.metas = []*ast.Meta{}
		}
	case 11:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:295
		{
			yrVAL.metas = yrDollar[3].metas
		}
	case 12:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:303
		{
			yrVAL.yss = []ast.String{}
		}
	case 13:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:307
		{
			yrVAL.yss = yrDollar[3].yss
		}
	case 14:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:315
		{
			yrVAL.expr = yrDollar[3].expr
		}
	case 15:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:323
		{
			yrVAL.mod = 0
		}
	case 16:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:327
		{
			yrVAL.mod = yrDollar[1].mod | yrDollar[2].mod
		}
	case 17:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:335
		{
			yrVAL.mod = ModPrivate
		}
	case 18:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:339
		{
			yrVAL.mod = ModGlobal
		}
	case 19:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:347
		{
			yrVAL.ss = []string{}
		}
	case 20:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:351
		{
			yrVAL.ss = yrDollar[2].ss
		}
	case 21:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:359
		{
			yrVAL.ss = []string{yrDollar[1].s}
		}
	case 22:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:363
		{
			lexer := asLexer(yrlex)

			for _, tag := range yrDollar[1].ss {
				if tag == yrDollar[2].s {
					return lexer.setError(
						gyperror.DuplicateTagError, `duplicate tag "%s"`, yrDollar[2].s)
				}
			}

			yrVAL.ss = append(yrDollar[1].ss, yrDollar[2].s)
		}
	case 23:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:380
		{
			yrVAL.metas = []*ast.Meta{yrDollar[1].meta}
		}
	case 24:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:384
		{
			yrVAL.metas = append(yrDollar[1].metas, yrDollar[2].meta)
		}
	case 25:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:392
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: yrDollar[3].s,
			}
		}
	case 26:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:399
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: yrDollar[3].i64,
			}
		}
	case 27:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:406
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: -yrDollar[4].i64,
			}
		}
	case 28:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:413
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: true,
			}
		}
	case 29:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:420
		{
			yrVAL.meta = &ast.Meta{
				Key:   yrDollar[1].s,
				Value: false,
			}
		}
	case 30:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:431
		{
			yrVAL.yss = []ast.String{yrDollar[1].ys}
		}
	case 31:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:435
		{
			yrVAL.yss = append(yrDollar[1].yss, yrDollar[2].ys)
		}
	case 32:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:443
		{
			if err := validateUTF8(yrDollar[3].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidUTF8Error, err.Error())
			}
		}
	case 33:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line parser/grammar.y:450
		{
			yrVAL.ys = &ast.TextString{
				BaseString: ast.BaseString{
					Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
					LineNo:     yrDollar[1].lineno,
				},
				ASCII:          yrDollar[5].smod.modifiers&ModASCII != 0,
				Wide:           yrDollar[5].smod.modifiers&ModWide != 0,
				Nocase:         yrDollar[5].smod.modifiers&ModNocase != 0,
				Fullword:       yrDollar[5].smod.modifiers&ModFullword != 0,
				Private:        yrDollar[5].smod.modifiers&ModPrivate != 0,
				Base64:         yrDollar[5].smod.modifiers&ModBase64 != 0,
				Base64Wide:     yrDollar[5].smod.modifiers&ModBase64Wide != 0,
				Base64Alphabet: yrDollar[5].smod.Base64Alphabet,
				Xor:            yrDollar[5].smod.modifiers&ModXor != 0,
				XorMin:         yrDollar[5].smod.XorMin,
				XorMax:         yrDollar[5].smod.XorMax,
				Value:          yrDollar[3].s,
			}
		}
	case 34:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:471
		{
			yrVAL.ys = &ast.RegexpString{
				BaseString: ast.BaseString{
					Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
					LineNo:     yrDollar[1].lineno,
				},
				ASCII:    yrDollar[4].mod&ModASCII != 0,
				Wide:     yrDollar[4].mod&ModWide != 0,
				Nocase:   yrDollar[4].mod&ModNocase != 0,
				Fullword: yrDollar[4].mod&ModFullword != 0,
				Private:  yrDollar[4].mod&ModPrivate != 0,
				Regexp:   yrDollar[3].reg,
			}
		}
	case 35:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:486
		{
			yrVAL.ys = &ast.HexString{
				BaseString: ast.BaseString{
					Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
					LineNo:     yrDollar[1].lineno,
				},
				Private: yrDollar[4].mod&ModPrivate != 0,
				Tokens:  yrDollar[3].hexTokens,
			}
		}
	case 36:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:501
		{
			yrVAL.smod = stringModifiers{}
		}
	case 37:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:505
		{
			if yrDollar[1].smod.modifiers&yrDollar[2].smod.modifiers != 0 {
				return asLexer(yrlex).setError(
					gyperror.DuplicateModifierError, `duplicate modifier`)
			}

			yrDollar[1].smod.modifiers |= yrDollar[2].smod.modifiers

			if yrDollar[2].smod.modifiers&ModXor != 0 {
				yrDollar[1].smod.XorMin = yrDollar[2].smod.XorMin
				yrDollar[1].smod.XorMax = yrDollar[2].smod.XorMax
			}

			if yrDollar[2].smod.modifiers&(ModBase64|ModBase64Wide) != 0 {
				yrDollar[1].smod.Base64Alphabet = yrDollar[2].smod.Base64Alphabet
			}

			yrVAL.smod = yrDollar[1].smod
		}
	case 38:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:528
		{
			yrVAL.smod = stringModifiers{modifiers: ModWide}
		}
	case 39:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:529
		{
			yrVAL.smod = stringModifiers{modifiers: ModASCII}
		}
	case 40:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:530
		{
			yrVAL.smod = stringModifiers{modifiers: ModNocase}
		}
	case 41:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:531
		{
			yrVAL.smod = stringModifiers{modifiers: ModFullword}
		}
	case 42:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:532
		{
			yrVAL.smod = stringModifiers{modifiers: ModPrivate}
		}
	case 43:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:533
		{
			yrVAL.smod = stringModifiers{modifiers: ModBase64}
		}
	case 44:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:534
		{
			yrVAL.smod = stringModifiers{modifiers: ModBase64Wide}
		}
	case 45:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:536
		{
			if err := validateAscii(yrDollar[3].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidAsciiError, err.Error())
			}

			if len(yrDollar[3].s) != 64 {
				return asLexer(yrlex).setError(
					gyperror.InvalidStringModifierError,
					"length of base64 alphabet must be 64")
			}

			yrVAL.smod = stringModifiers{
				modifiers:      ModBase64,
				Base64Alphabet: yrDollar[3].s,
			}
		}
	case 46:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:554
		{
			if err := validateAscii(yrDollar[3].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidAsciiError, err.Error())
			}

			if len(yrDollar[3].s) != 64 {
				return asLexer(yrlex).setError(
					gyperror.InvalidStringModifierError,
					"length of base64 alphabet must be 64")
			}

			yrVAL.smod = stringModifiers{
				modifiers:      ModBase64Wide,
				Base64Alphabet: yrDollar[3].s,
			}
		}
	case 47:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:572
		{
			yrVAL.smod = stringModifiers{
				modifiers: ModXor,
				XorMin:    0,
				XorMax:    255,
			}
		}
	case 48:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:580
		{
			yrVAL.smod = stringModifiers{
				modifiers: ModXor,
				XorMin:    int32(yrDollar[3].i64),
				XorMax:    int32(yrDollar[3].i64),
			}
		}
	case 49:
		yrDollar = yrS[yrpt-6 : yrpt+1]
//line parser/grammar.y:588
		{
			lexer := asLexer(yrlex)

			if yrDollar[3].i64 < 0 {
				return lexer.setError(
					gyperror.InvalidStringModifierError,
					"lower bound for xor range exceeded (min: 0)")
			}

			if yrDollar[5].i64 > 255 {
				return lexer.setError(
					gyperror.InvalidStringModifierError,
					"upper bound for xor range exceeded (max: 255)")
			}

			if yrDollar[3].i64 > yrDollar[5].i64 {
				return lexer.setError(
					gyperror.InvalidStringModifierError,
					"xor lower bound exceeds upper bound")
			}

			yrVAL.smod = stringModifiers{
				modifiers: ModXor,
				XorMin:    int32(yrDollar[3].i64),
				XorMax:    int32(yrDollar[5].i64),
			}
		}
	case 50:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:620
		{
			yrVAL.mod = 0
		}
	case 51:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:624
		{
			yrVAL.mod = yrDollar[1].mod | yrDollar[2].mod
		}
	case 52:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:631
		{
			yrVAL.mod = ModWide
		}
	case 53:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:632
		{
			yrVAL.mod = ModASCII
		}
	case 54:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:633
		{
			yrVAL.mod = ModNocase
		}
	case 55:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:634
		{
			yrVAL.mod = ModFullword
		}
	case 56:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:635
		{
			yrVAL.mod = ModPrivate
		}
	case 57:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:641
		{
			yrVAL.mod = 0
		}
	case 58:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:645
		{
			yrVAL.mod = yrDollar[1].mod | yrDollar[2].mod
		}
	case 59:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:652
		{
			yrVAL.mod = ModPrivate
		}
	case 60:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:658
		{
			yrVAL.expr = &ast.Identifier{Identifier: yrDollar[1].s}
		}
	case 61:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:662
		{
			yrVAL.expr = &ast.MemberAccess{
				Container: yrDollar[1].expr,
				Member:    yrDollar[3].s,
			}
		}
	case 62:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:669
		{
			yrVAL.expr = &ast.Subscripting{
				Array: yrDollar[1].expr,
				Index: yrDollar[3].expr,
			}
		}
	case 63:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:676
		{
			yrVAL.expr = &ast.FunctionCall{
				Callable:  yrDollar[1].expr,
				Arguments: yrDollar[3].exprs,
			}
		}
	case 64:
		yrDollar = yrS[yrpt-0 : yrpt+1]
//line parser/grammar.y:687
		{
			yrVAL.exprs = []ast.Expression{}
		}
	case 65:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:691
		{
			yrVAL.exprs = yrDollar[1].exprs
		}
	case 66:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:698
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].expr}
		}
	case 67:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:702
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].expr)
		}
	case 68:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:710
		{
			yrVAL.reg = yrDollar[1].reg
		}
	case 69:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:718
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 70:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:726
		{
			yrVAL.expr = ast.KeywordTrue
		}
	case 71:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:730
		{
			yrVAL.expr = ast.KeywordFalse
		}
	case 72:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:734
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpMatches,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].reg},
			}
		}
	case 73:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:741
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpContains,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 74:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:748
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIContains,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 75:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:755
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpStartsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 76:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:762
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIStartsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 77:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:769
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpEndsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 78:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:776
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpIEndsWith,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 79:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:783
		{
			yrVAL.expr = &ast.StringIdentifier{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
			}
		}
	case 80:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:789
		{
			yrVAL.expr = &ast.StringIdentifier{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
				At:         yrDollar[3].expr,
			}
		}
	case 81:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:796
		{
			yrVAL.expr = &ast.StringIdentifier{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
				In:         yrDollar[3].rng,
			}
		}
	case 82:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:802
		{
		}
	case 83:
		yrDollar = yrS[yrpt-9 : yrpt+1]
//line parser/grammar.y:804
		{
			yrVAL.expr = &ast.ForIn{
				Quantifier: yrDollar[2].quantifier,
				Variables:  yrDollar[3].ss,
				Iterator:   yrDollar[5].node,
				Condition:  yrDollar[8].expr,
			}
		}
	case 84:
		yrDollar = yrS[yrpt-8 : yrpt+1]
//line parser/grammar.y:813
		{
			yrVAL.expr = &ast.ForOf{
				Quantifier: yrDollar[2].quantifier,
				Strings:    yrDollar[4].node,
				Condition:  yrDollar[7].expr,
			}
		}
	case 85:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:821
		{
			yrVAL.expr = &ast.Of{
				Quantifier: yrDollar[1].quantifier,
				Strings:    yrDollar[3].node,
			}
		}
	case 86:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:828
		{
			yrVAL.expr = &ast.Not{yrDollar[2].expr}
		}
	case 87:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:832
		{
			yrVAL.expr = operation(ast.OpAnd, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 88:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:836
		{
			yrVAL.expr = operation(ast.OpOr, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 89:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:840
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpLessThan,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 90:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:847
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpGreaterThan,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 91:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:854
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpLessOrEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 92:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:861
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpGreaterOrEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 93:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:868
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 94:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:875
		{
			yrVAL.expr = &ast.Operation{
				Operator: ast.OpNotEqual,
				Operands: []ast.Expression{yrDollar[1].expr, yrDollar[3].expr},
			}
		}
	case 95:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:882
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 96:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:886
		{
			yrVAL.expr = &ast.Group{yrDollar[2].expr}
		}
	case 97:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:894
		{
			yrVAL.node = &ast.Enum{Values: yrDollar[2].exprs}
		}
	case 98:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:898
		{
			yrVAL.node = yrDollar[1].rng
		}
	case 99:
		yrDollar = yrS[yrpt-5 : yrpt+1]
//line parser/grammar.y:906
		{
			yrVAL.rng = &ast.Range{
				Start: yrDollar[2].expr,
				End:   yrDollar[4].expr,
			}
		}
	case 100:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:917
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].expr}
		}
	case 101:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:921
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].expr)
		}
	case 102:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:929
		{
			yrVAL.node = &ast.Enum{Values: yrDollar[2].exprs}
		}
	case 103:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:933
		{
			yrVAL.node = ast.KeywordThem
		}
	case 104:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:941
		{
			yrVAL.exprs = []ast.Expression{yrDollar[1].si}
		}
	case 105:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:945
		{
			yrVAL.exprs = append(yrDollar[1].exprs, yrDollar[3].si)
		}
	case 106:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:953
		{
			yrVAL.si = &ast.StringIdentifier{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
			}
		}
	case 107:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:959
		{
			yrVAL.si = &ast.StringIdentifier{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "$"),
			}
		}
	case 108:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:969
		{
			yrVAL.quantifier = &ast.Quantifier{yrDollar[1].expr}
		}
	case 109:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:973
		{
			yrVAL.quantifier = &ast.Quantifier{ast.KeywordAll}
		}
	case 110:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:977
		{
			yrVAL.quantifier = &ast.Quantifier{ast.KeywordAny}
		}
	case 111:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:981
		{
			yrVAL.quantifier = &ast.Quantifier{ast.KeywordNone}
		}
	case 112:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:989
		{
			yrVAL.ss = []string{yrDollar[1].s}
		}
	case 113:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:993
		{
			yrVAL.ss = append(yrDollar[1].ss, yrDollar[3].s)
		}
	case 114:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1000
		{
			yrVAL.node = yrDollar[1].expr
		}
	case 115:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1004
		{
			yrVAL.node = yrDollar[1].node
		}
	case 116:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1012
		{
			yrVAL.expr = &ast.Group{yrDollar[2].expr}
		}
	case 117:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1016
		{
			yrVAL.expr = ast.KeywordFilesize
		}
	case 118:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1020
		{
			yrVAL.expr = ast.KeywordEntrypoint
		}
	case 119:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:1024
		{
			yrVAL.expr = &ast.FunctionCall{
				Callable:  &ast.Identifier{Identifier: yrDollar[1].s},
				Arguments: []ast.Expression{yrDollar[3].expr},
			}
		}
	case 120:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1031
		{
			yrVAL.expr = &ast.LiteralInteger{yrDollar[1].i64}
		}
	case 121:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1035
		{
			yrVAL.expr = &ast.LiteralFloat{yrDollar[1].f64}
		}
	case 122:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1039
		{
			if err := validateUTF8(yrDollar[1].s); err != nil {
				return asLexer(yrlex).setError(
					gyperror.InvalidUTF8Error, err.Error())
			}

			yrVAL.expr = &ast.LiteralString{yrDollar[1].s}
		}
	case 123:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1048
		{
			yrVAL.expr = &ast.StringCount{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "#"),
			}
		}
	case 124:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:1054
		{
			yrVAL.expr = &ast.StringOffset{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "@"),
				Index:      yrDollar[3].expr,
			}
		}
	case 125:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1061
		{
			yrVAL.expr = &ast.StringOffset{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "@"),
			}
		}
	case 126:
		yrDollar = yrS[yrpt-4 : yrpt+1]
//line parser/grammar.y:1067
		{
			yrVAL.expr = &ast.StringLength{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "!"),
				Index:      yrDollar[3].expr,
			}
		}
	case 127:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1074
		{
			yrVAL.expr = &ast.StringLength{
				Identifier: strings.TrimPrefix(yrDollar[1].s, "!"),
			}
		}
	case 128:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1080
		{
			yrVAL.expr = yrDollar[1].expr
		}
	case 129:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:1084
		{
			yrVAL.expr = &ast.Minus{yrDollar[2].expr}
		}
	case 130:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1088
		{
			yrVAL.expr = operation(ast.OpAdd, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 131:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1092
		{
			yrVAL.expr = operation(ast.OpSub, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 132:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1096
		{
			yrVAL.expr = operation(ast.OpMul, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 133:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1100
		{
			yrVAL.expr = operation(ast.OpDiv, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 134:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1104
		{
			yrVAL.expr = operation(ast.OpMod, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 135:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1108
		{
			yrVAL.expr = operation(ast.OpBitXor, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 136:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1112
		{
			yrVAL.expr = operation(ast.OpBitAnd, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 137:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1116
		{
			yrVAL.expr = operation(ast.OpBitOr, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 138:
		yrDollar = yrS[yrpt-2 : yrpt+1]
//line parser/grammar.y:1120
		{
			yrVAL.expr = &ast.BitwiseNot{yrDollar[2].expr}
		}
	case 139:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1124
		{
			yrVAL.expr = operation(ast.OpShiftLeft, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 140:
		yrDollar = yrS[yrpt-3 : yrpt+1]
//line parser/grammar.y:1128
		{
			yrVAL.expr = operation(ast.OpShiftRight, yrDollar[1].expr, yrDollar[3].expr)
		}
	case 141:
		yrDollar = yrS[yrpt-1 : yrpt+1]
//line parser/grammar.y:1132
		{
			yrVAL.expr = yrDollar[1].reg
		}
	}
	goto yrstack /* stack new state and value */
}
