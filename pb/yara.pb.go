// Data model of a ruleset.
// See YARA's documentation for more details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: pb/yara.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Keywords used in expressions of rule condition.
type Keyword int32

const (
	Keyword_UNKNOWN Keyword = 1
	// Raw offset of a PE or ELF file entrypoint.
	Keyword_ENTRYPOINT Keyword = 2
	// Size of the scanned file.
	Keyword_FILESIZE Keyword = 3
)

// Enum value maps for Keyword.
var (
	Keyword_name = map[int32]string{
		1: "UNKNOWN",
		2: "ENTRYPOINT",
		3: "FILESIZE",
	}
	Keyword_value = map[string]int32{
		"UNKNOWN":    1,
		"ENTRYPOINT": 2,
		"FILESIZE":   3,
	}
)

func (x Keyword) Enum() *Keyword {
	p := new(Keyword)
	*p = x
	return p
}

func (x Keyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Keyword) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_yara_proto_enumTypes[0].Descriptor()
}

func (Keyword) Type() protoreflect.EnumType {
	return &file_pb_yara_proto_enumTypes[0]
}

func (x Keyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Keyword) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Keyword(num)
	return nil
}

// Deprecated: Use Keyword.Descriptor instead.
func (Keyword) EnumDescriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{0}
}

// Keywords used in FOR expressions.
type ForKeyword int32

const (
	// No items must satisfy a condition.
	ForKeyword_NONE ForKeyword = 0
	// All items must satisfy a condition.
	ForKeyword_ALL ForKeyword = 1
	// At least one item must satisfy a condition.
	ForKeyword_ANY ForKeyword = 2
)

// Enum value maps for ForKeyword.
var (
	ForKeyword_name = map[int32]string{
		0: "NONE",
		1: "ALL",
		2: "ANY",
	}
	ForKeyword_value = map[string]int32{
		"NONE": 0,
		"ALL":  1,
		"ANY":  2,
	}
)

func (x ForKeyword) Enum() *ForKeyword {
	p := new(ForKeyword)
	*p = x
	return p
}

func (x ForKeyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForKeyword) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_yara_proto_enumTypes[1].Descriptor()
}

func (ForKeyword) Type() protoreflect.EnumType {
	return &file_pb_yara_proto_enumTypes[1]
}

func (x ForKeyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ForKeyword) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ForKeyword(num)
	return nil
}

// Deprecated: Use ForKeyword.Descriptor instead.
func (ForKeyword) EnumDescriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{1}
}

// Keywords used in string sets.
type StringSetKeyword int32

const (
	// All the strings in the rule (equivalent to $*).
	StringSetKeyword_THEM StringSetKeyword = 1
)

// Enum value maps for StringSetKeyword.
var (
	StringSetKeyword_name = map[int32]string{
		1: "THEM",
	}
	StringSetKeyword_value = map[string]int32{
		"THEM": 1,
	}
)

func (x StringSetKeyword) Enum() *StringSetKeyword {
	p := new(StringSetKeyword)
	*p = x
	return p
}

func (x StringSetKeyword) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringSetKeyword) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_yara_proto_enumTypes[2].Descriptor()
}

func (StringSetKeyword) Type() protoreflect.EnumType {
	return &file_pb_yara_proto_enumTypes[2]
}

func (x StringSetKeyword) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StringSetKeyword) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StringSetKeyword(num)
	return nil
}

// Deprecated: Use StringSetKeyword.Descriptor instead.
func (StringSetKeyword) EnumDescriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{2}
}

type BinaryExpression_Operator int32

const (
	BinaryExpression_UNKNOWN          BinaryExpression_Operator = 0
	BinaryExpression_MATCHES          BinaryExpression_Operator = 1  // matches
	BinaryExpression_CONTAINS         BinaryExpression_Operator = 2  // contains
	BinaryExpression_AT               BinaryExpression_Operator = 3  // at
	BinaryExpression_IN               BinaryExpression_Operator = 4  // in
	BinaryExpression_LT               BinaryExpression_Operator = 5  // <
	BinaryExpression_GT               BinaryExpression_Operator = 6  // >
	BinaryExpression_LE               BinaryExpression_Operator = 7  // <=
	BinaryExpression_GE               BinaryExpression_Operator = 8  // >=
	BinaryExpression_EQ               BinaryExpression_Operator = 9  // ==
	BinaryExpression_NEQ              BinaryExpression_Operator = 10 // !=
	BinaryExpression_INTEGER_FUNCTION BinaryExpression_Operator = 11 // intXX and uintXX functions
	BinaryExpression_PLUS             BinaryExpression_Operator = 12 // +
	BinaryExpression_MINUS            BinaryExpression_Operator = 13 // -
	BinaryExpression_TIMES            BinaryExpression_Operator = 14 // *
	BinaryExpression_DIV              BinaryExpression_Operator = 15 // \
	BinaryExpression_MOD              BinaryExpression_Operator = 16 // %
	BinaryExpression_XOR              BinaryExpression_Operator = 17 // ^
	BinaryExpression_BITWISE_AND      BinaryExpression_Operator = 18 // &
	BinaryExpression_BITWISE_OR       BinaryExpression_Operator = 19 // |
	BinaryExpression_SHIFT_LEFT       BinaryExpression_Operator = 20 // <<
	BinaryExpression_SHIFT_RIGHT      BinaryExpression_Operator = 21 // >>
	BinaryExpression_ICONTAINS        BinaryExpression_Operator = 22
	BinaryExpression_STARTSWITH       BinaryExpression_Operator = 23
	BinaryExpression_ISTARTSWITH      BinaryExpression_Operator = 24
	BinaryExpression_ENDSWITH         BinaryExpression_Operator = 25
	BinaryExpression_IENDSWITH        BinaryExpression_Operator = 26
)

// Enum value maps for BinaryExpression_Operator.
var (
	BinaryExpression_Operator_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "MATCHES",
		2:  "CONTAINS",
		3:  "AT",
		4:  "IN",
		5:  "LT",
		6:  "GT",
		7:  "LE",
		8:  "GE",
		9:  "EQ",
		10: "NEQ",
		11: "INTEGER_FUNCTION",
		12: "PLUS",
		13: "MINUS",
		14: "TIMES",
		15: "DIV",
		16: "MOD",
		17: "XOR",
		18: "BITWISE_AND",
		19: "BITWISE_OR",
		20: "SHIFT_LEFT",
		21: "SHIFT_RIGHT",
		22: "ICONTAINS",
		23: "STARTSWITH",
		24: "ISTARTSWITH",
		25: "ENDSWITH",
		26: "IENDSWITH",
	}
	BinaryExpression_Operator_value = map[string]int32{
		"UNKNOWN":          0,
		"MATCHES":          1,
		"CONTAINS":         2,
		"AT":               3,
		"IN":               4,
		"LT":               5,
		"GT":               6,
		"LE":               7,
		"GE":               8,
		"EQ":               9,
		"NEQ":              10,
		"INTEGER_FUNCTION": 11,
		"PLUS":             12,
		"MINUS":            13,
		"TIMES":            14,
		"DIV":              15,
		"MOD":              16,
		"XOR":              17,
		"BITWISE_AND":      18,
		"BITWISE_OR":       19,
		"SHIFT_LEFT":       20,
		"SHIFT_RIGHT":      21,
		"ICONTAINS":        22,
		"STARTSWITH":       23,
		"ISTARTSWITH":      24,
		"ENDSWITH":         25,
		"IENDSWITH":        26,
	}
)

func (x BinaryExpression_Operator) Enum() *BinaryExpression_Operator {
	p := new(BinaryExpression_Operator)
	*p = x
	return p
}

func (x BinaryExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_yara_proto_enumTypes[3].Descriptor()
}

func (BinaryExpression_Operator) Type() protoreflect.EnumType {
	return &file_pb_yara_proto_enumTypes[3]
}

func (x BinaryExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BinaryExpression_Operator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BinaryExpression_Operator(num)
	return nil
}

// Deprecated: Use BinaryExpression_Operator.Descriptor instead.
func (BinaryExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{11, 0}
}

type UnaryExpression_Operator int32

const (
	UnaryExpression_UNKNOWN     UnaryExpression_Operator = 0
	UnaryExpression_UNARY_MINUS UnaryExpression_Operator = 1 // -
	UnaryExpression_BITWISE_NOT UnaryExpression_Operator = 2 // ~
)

// Enum value maps for UnaryExpression_Operator.
var (
	UnaryExpression_Operator_name = map[int32]string{
		0: "UNKNOWN",
		1: "UNARY_MINUS",
		2: "BITWISE_NOT",
	}
	UnaryExpression_Operator_value = map[string]int32{
		"UNKNOWN":     0,
		"UNARY_MINUS": 1,
		"BITWISE_NOT": 2,
	}
)

func (x UnaryExpression_Operator) Enum() *UnaryExpression_Operator {
	p := new(UnaryExpression_Operator)
	*p = x
	return p
}

func (x UnaryExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnaryExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_yara_proto_enumTypes[4].Descriptor()
}

func (UnaryExpression_Operator) Type() protoreflect.EnumType {
	return &file_pb_yara_proto_enumTypes[4]
}

func (x UnaryExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UnaryExpression_Operator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UnaryExpression_Operator(num)
	return nil
}

// Deprecated: Use UnaryExpression_Operator.Descriptor instead.
func (UnaryExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{12, 0}
}

// Rule modifiers.
type RuleModifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Impose restrictions on all the rules in the ruleset.
	Global *bool `protobuf:"varint,1,opt,name=global" json:"global,omitempty"`
	// Rule is not reported when matches a file.
	Private *bool `protobuf:"varint,2,opt,name=private" json:"private,omitempty"`
}

func (x *RuleModifiers) Reset() {
	*x = RuleModifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleModifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleModifiers) ProtoMessage() {}

func (x *RuleModifiers) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleModifiers.ProtoReflect.Descriptor instead.
func (*RuleModifiers) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{0}
}

func (x *RuleModifiers) GetGlobal() bool {
	if x != nil && x.Global != nil {
		return *x.Global
	}
	return false
}

func (x *RuleModifiers) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

// Rule metadata entry.
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata key. Can be repeated. Required.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Entry value, which can be a string, a number or a boolean.
	//
	// Types that are assignable to Value:
	//	*Meta_Text
	//	*Meta_Number
	//	*Meta_Boolean
	Value isMeta_Value `protobuf_oneof:"value"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{1}
}

func (x *Meta) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (m *Meta) GetValue() isMeta_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Meta) GetText() string {
	if x, ok := x.GetValue().(*Meta_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Meta) GetNumber() int64 {
	if x, ok := x.GetValue().(*Meta_Number); ok {
		return x.Number
	}
	return 0
}

func (x *Meta) GetBoolean() bool {
	if x, ok := x.GetValue().(*Meta_Boolean); ok {
		return x.Boolean
	}
	return false
}

type isMeta_Value interface {
	isMeta_Value()
}

type Meta_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,oneof"`
}

type Meta_Number struct {
	Number int64 `protobuf:"varint,3,opt,name=number,oneof"`
}

type Meta_Boolean struct {
	Boolean bool `protobuf:"varint,4,opt,name=boolean,oneof"`
}

func (*Meta_Text) isMeta_Value() {}

func (*Meta_Number) isMeta_Value() {}

func (*Meta_Boolean) isMeta_Value() {}

// Rule string entry.
type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String identifier. Required.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// String value, which can be a text string, an hexadecimal string or a
	// regular expression.
	//
	// Types that are assignable to Value:
	//	*String_Text
	//	*String_Hex
	//	*String_Regexp
	Value isString_Value `protobuf_oneof:"value"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{2}
}

func (x *String) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (m *String) GetValue() isString_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *String) GetText() *TextString {
	if x, ok := x.GetValue().(*String_Text); ok {
		return x.Text
	}
	return nil
}

func (x *String) GetHex() *HexTokens {
	if x, ok := x.GetValue().(*String_Hex); ok {
		return x.Hex
	}
	return nil
}

func (x *String) GetRegexp() *Regexp {
	if x, ok := x.GetValue().(*String_Regexp); ok {
		return x.Regexp
	}
	return nil
}

type isString_Value interface {
	isString_Value()
}

type String_Text struct {
	Text *TextString `protobuf:"bytes,2,opt,name=text,oneof"`
}

type String_Hex struct {
	Hex *HexTokens `protobuf:"bytes,3,opt,name=hex,oneof"`
}

type String_Regexp struct {
	Regexp *Regexp `protobuf:"bytes,4,opt,name=regexp,oneof"`
}

func (*String_Text) isString_Value() {}

func (*String_Hex) isString_Value() {}

func (*String_Regexp) isString_Value() {}

// Modifiers for TextStrings and Regexps.
type StringModifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Case-insensitive.
	Nocase *bool `protobuf:"varint,1,opt,name=nocase" json:"nocase,omitempty"`
	// Strings should be ASCII-encoded.
	Ascii *bool `protobuf:"varint,2,opt,name=ascii" json:"ascii,omitempty"`
	// String should be encoded with two bytes per character.
	Wide *bool `protobuf:"varint,3,opt,name=wide" json:"wide,omitempty"`
	// Only matches the string if it appears delimited by non-alphanumeric chars.
	Fullword *bool `protobuf:"varint,4,opt,name=fullword" json:"fullword,omitempty"`
	// Matches strings with a single-byte XOR applied to them.
	Xor *bool `protobuf:"varint,5,opt,name=xor" json:"xor,omitempty"`
	// Regexp case-insensitive modifier.
	I *bool `protobuf:"varint,6,opt,name=i" json:"i,omitempty"`
	// Regexp single-line modifier.
	S *bool `protobuf:"varint,7,opt,name=s" json:"s,omitempty"`
	// String is private.
	Private *bool `protobuf:"varint,8,opt,name=private" json:"private,omitempty"`
	// Minimum and maximum values for the XOR key. These values are present
	// only if the "xor" field is true.
	XorMin *int32 `protobuf:"varint,9,opt,name=xor_min,json=xorMin" json:"xor_min,omitempty"`
	XorMax *int32 `protobuf:"varint,10,opt,name=xor_max,json=xorMax" json:"xor_max,omitempty"`
	// String is base64.
	Base64 *bool `protobuf:"varint,11,opt,name=base64" json:"base64,omitempty"`
	// Optional alphabet for base64 strings.
	Base64Alphabet *string `protobuf:"bytes,12,opt,name=base64alphabet" json:"base64alphabet,omitempty"`
	// String is base64 wide.
	Base64Wide *bool `protobuf:"varint,13,opt,name=base64wide" json:"base64wide,omitempty"`
}

func (x *StringModifiers) Reset() {
	*x = StringModifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringModifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringModifiers) ProtoMessage() {}

func (x *StringModifiers) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringModifiers.ProtoReflect.Descriptor instead.
func (*StringModifiers) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{3}
}

func (x *StringModifiers) GetNocase() bool {
	if x != nil && x.Nocase != nil {
		return *x.Nocase
	}
	return false
}

func (x *StringModifiers) GetAscii() bool {
	if x != nil && x.Ascii != nil {
		return *x.Ascii
	}
	return false
}

func (x *StringModifiers) GetWide() bool {
	if x != nil && x.Wide != nil {
		return *x.Wide
	}
	return false
}

func (x *StringModifiers) GetFullword() bool {
	if x != nil && x.Fullword != nil {
		return *x.Fullword
	}
	return false
}

func (x *StringModifiers) GetXor() bool {
	if x != nil && x.Xor != nil {
		return *x.Xor
	}
	return false
}

func (x *StringModifiers) GetI() bool {
	if x != nil && x.I != nil {
		return *x.I
	}
	return false
}

func (x *StringModifiers) GetS() bool {
	if x != nil && x.S != nil {
		return *x.S
	}
	return false
}

func (x *StringModifiers) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

func (x *StringModifiers) GetXorMin() int32 {
	if x != nil && x.XorMin != nil {
		return *x.XorMin
	}
	return 0
}

func (x *StringModifiers) GetXorMax() int32 {
	if x != nil && x.XorMax != nil {
		return *x.XorMax
	}
	return 0
}

func (x *StringModifiers) GetBase64() bool {
	if x != nil && x.Base64 != nil {
		return *x.Base64
	}
	return false
}

func (x *StringModifiers) GetBase64Alphabet() string {
	if x != nil && x.Base64Alphabet != nil {
		return *x.Base64Alphabet
	}
	return ""
}

func (x *StringModifiers) GetBase64Wide() bool {
	if x != nil && x.Base64Wide != nil {
		return *x.Base64Wide
	}
	return false
}

// Text string.
type TextString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String content. Any character that appears in escaped form in the source
	// is translated to their binary form. For example, if the string contained
	// \x01, this string contains a 01 byte.
	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// String modifiers.
	Modifiers *StringModifiers `protobuf:"bytes,2,opt,name=modifiers" json:"modifiers,omitempty"`
}

func (x *TextString) Reset() {
	*x = TextString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextString) ProtoMessage() {}

func (x *TextString) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextString.ProtoReflect.Descriptor instead.
func (*TextString) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{4}
}

func (x *TextString) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *TextString) GetModifiers() *StringModifiers {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

// Regular expression string.
type Regexp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String content.
	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// String modifiers.
	Modifiers *StringModifiers `protobuf:"bytes,2,opt,name=modifiers" json:"modifiers,omitempty"`
}

func (x *Regexp) Reset() {
	*x = Regexp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regexp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regexp) ProtoMessage() {}

func (x *Regexp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regexp.ProtoReflect.Descriptor instead.
func (*Regexp) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{5}
}

func (x *Regexp) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Regexp) GetModifiers() *StringModifiers {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

// Sequence of hexadecimal string tokens.
type HexTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tokens.
	Token []*HexToken `protobuf:"bytes,1,rep,name=token" json:"token,omitempty"`
}

func (x *HexTokens) Reset() {
	*x = HexTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HexTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HexTokens) ProtoMessage() {}

func (x *HexTokens) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HexTokens.ProtoReflect.Descriptor instead.
func (*HexTokens) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{6}
}

func (x *HexTokens) GetToken() []*HexToken {
	if x != nil {
		return x.Token
	}
	return nil
}

// A token in a hexadecimal string. A token can be either a sequence of bytes,
// a jump or an alternative.
type HexToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*HexToken_Sequence
	//	*HexToken_Jump
	//	*HexToken_Alternative
	Value isHexToken_Value `protobuf_oneof:"value"`
}

func (x *HexToken) Reset() {
	*x = HexToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HexToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HexToken) ProtoMessage() {}

func (x *HexToken) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HexToken.ProtoReflect.Descriptor instead.
func (*HexToken) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{7}
}

func (m *HexToken) GetValue() isHexToken_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HexToken) GetSequence() *BytesSequence {
	if x, ok := x.GetValue().(*HexToken_Sequence); ok {
		return x.Sequence
	}
	return nil
}

func (x *HexToken) GetJump() *Jump {
	if x, ok := x.GetValue().(*HexToken_Jump); ok {
		return x.Jump
	}
	return nil
}

func (x *HexToken) GetAlternative() *HexAlternative {
	if x, ok := x.GetValue().(*HexToken_Alternative); ok {
		return x.Alternative
	}
	return nil
}

type isHexToken_Value interface {
	isHexToken_Value()
}

type HexToken_Sequence struct {
	// A sequence of bytes, which may contain wildcards.
	Sequence *BytesSequence `protobuf:"bytes,1,opt,name=sequence,oneof"`
}

type HexToken_Jump struct {
	// A jump.
	Jump *Jump `protobuf:"bytes,2,opt,name=jump,oneof"`
}

type HexToken_Alternative struct {
	// An alternative of token sequences.
	Alternative *HexAlternative `protobuf:"bytes,3,opt,name=alternative,oneof"`
}

func (*HexToken_Sequence) isHexToken_Value() {}

func (*HexToken_Jump) isHexToken_Value() {}

func (*HexToken_Alternative) isHexToken_Value() {}

// List of alternatives for a part in the hexadecimal string.
type HexAlternative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alternatives, which are sequences of tokens.
	Tokens []*HexTokens `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (x *HexAlternative) Reset() {
	*x = HexAlternative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HexAlternative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HexAlternative) ProtoMessage() {}

func (x *HexAlternative) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HexAlternative.ProtoReflect.Descriptor instead.
func (*HexAlternative) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{8}
}

func (x *HexAlternative) GetTokens() []*HexTokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

// A sequence of bytes, which may contain wildcards.
type BytesSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of values.
	Value []byte `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// The mask applied to each byte in value.
	// Indexes and length of value and mask must match.
	// Possible masks:
	// 00 -> Full wildcard, value is ignored (??).
	// 0F -> Nibble-wise wildcard (?v).
	// F0 -> Nibble-wise wildcard (v?).
	// FF -> No wildcard (vv).
	Mask []byte `protobuf:"bytes,2,opt,name=mask" json:"mask,omitempty"`
}

func (x *BytesSequence) Reset() {
	*x = BytesSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesSequence) ProtoMessage() {}

func (x *BytesSequence) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesSequence.ProtoReflect.Descriptor instead.
func (*BytesSequence) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{9}
}

func (x *BytesSequence) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BytesSequence) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

// Sequence of arbitrary content and variable length.
type Jump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum jump length. 0 if not present.
	Start *int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"` // 0 if not present
	// Maximum jump length. Infinite if not present.
	End *int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (x *Jump) Reset() {
	*x = Jump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jump) ProtoMessage() {}

func (x *Jump) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jump.ProtoReflect.Descriptor instead.
func (*Jump) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{10}
}

func (x *Jump) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Jump) GetEnd() int64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

// Binary expression, consisting of two expressions joined by an operator.
type BinaryExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operator. Required.
	Operator *BinaryExpression_Operator `protobuf:"varint,1,opt,name=operator,enum=BinaryExpression_Operator" json:"operator,omitempty"`
	// Left expression. Required.
	Left *Expression `protobuf:"bytes,2,opt,name=left" json:"left,omitempty"`
	// Right expression. Required.
	Right *Expression `protobuf:"bytes,3,opt,name=right" json:"right,omitempty"`
}

func (x *BinaryExpression) Reset() {
	*x = BinaryExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpression) ProtoMessage() {}

func (x *BinaryExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpression.ProtoReflect.Descriptor instead.
func (*BinaryExpression) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{11}
}

func (x *BinaryExpression) GetOperator() BinaryExpression_Operator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return BinaryExpression_UNKNOWN
}

func (x *BinaryExpression) GetLeft() *Expression {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *BinaryExpression) GetRight() *Expression {
	if x != nil {
		return x.Right
	}
	return nil
}

// Unary expression, consisting of an operator applied to an expression.
type UnaryExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operator. Required.
	Operator *UnaryExpression_Operator `protobuf:"varint,1,opt,name=operator,enum=UnaryExpression_Operator" json:"operator,omitempty"`
	// Expression. Required.
	Expression *Expression `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
}

func (x *UnaryExpression) Reset() {
	*x = UnaryExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpression) ProtoMessage() {}

func (x *UnaryExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpression.ProtoReflect.Descriptor instead.
func (*UnaryExpression) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{12}
}

func (x *UnaryExpression) GetOperator() UnaryExpression_Operator {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return UnaryExpression_UNKNOWN
}

func (x *UnaryExpression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// A range of values. The start and end of a range are expressions, so they do
// not need to be constants.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Range start. Required.
	Start *Expression `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	// Range end. Required.
	End *Expression `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{13}
}

func (x *Range) GetStart() *Expression {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *Expression {
	if x != nil {
		return x.End
	}
	return nil
}

// Functions for reading data from a file at a specified offset or virtual
// address.
type IntegerFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Integer function: (u)intXX(be). Required.
	Function *string `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	// Offset or virtual address. Required.
	Argument *Expression `protobuf:"bytes,2,opt,name=argument" json:"argument,omitempty"`
}

func (x *IntegerFunction) Reset() {
	*x = IntegerFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerFunction) ProtoMessage() {}

func (x *IntegerFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerFunction.ProtoReflect.Descriptor instead.
func (*IntegerFunction) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{14}
}

func (x *IntegerFunction) GetFunction() string {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return ""
}

func (x *IntegerFunction) GetArgument() *Expression {
	if x != nil {
		return x.Argument
	}
	return nil
}

// Expression for iterating over iterators.
// Example: for <for_expression> k,v in iterator : ( expression )
// Next id: 6
type ForInExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FOR expression: "for any". Required.
	ForExpression *ForExpression `protobuf:"bytes,1,opt,name=for_expression,json=forExpression" json:"for_expression,omitempty"`
	// Identifiers that will hold the values returned by the iterator. Required.
	Identifiers []string `protobuf:"bytes,2,rep,name=identifiers" json:"identifiers,omitempty"`
	// Iterator: "(1..10)", "(1,2,3)", "identifier" . Required.
	Iterator *Iterator `protobuf:"bytes,5,opt,name=iterator" json:"iterator,omitempty"`
	// Expression to match: "@s1[i] != @s2[i]". Required.
	Expression *Expression `protobuf:"bytes,4,opt,name=expression" json:"expression,omitempty"`
}

func (x *ForInExpression) Reset() {
	*x = ForInExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForInExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForInExpression) ProtoMessage() {}

func (x *ForInExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForInExpression.ProtoReflect.Descriptor instead.
func (*ForInExpression) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{15}
}

func (x *ForInExpression) GetForExpression() *ForExpression {
	if x != nil {
		return x.ForExpression
	}
	return nil
}

func (x *ForInExpression) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *ForInExpression) GetIterator() *Iterator {
	if x != nil {
		return x.Iterator
	}
	return nil
}

func (x *ForInExpression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Iterator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Iterator:
	//	*Iterator_IntegerSet
	//	*Iterator_Identifier
	Iterator isIterator_Iterator `protobuf_oneof:"iterator"`
}

func (x *Iterator) Reset() {
	*x = Iterator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iterator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iterator) ProtoMessage() {}

func (x *Iterator) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iterator.ProtoReflect.Descriptor instead.
func (*Iterator) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{16}
}

func (m *Iterator) GetIterator() isIterator_Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

func (x *Iterator) GetIntegerSet() *IntegerSet {
	if x, ok := x.GetIterator().(*Iterator_IntegerSet); ok {
		return x.IntegerSet
	}
	return nil
}

func (x *Iterator) GetIdentifier() *Identifier {
	if x, ok := x.GetIterator().(*Iterator_Identifier); ok {
		return x.Identifier
	}
	return nil
}

type isIterator_Iterator interface {
	isIterator_Iterator()
}

type Iterator_IntegerSet struct {
	IntegerSet *IntegerSet `protobuf:"bytes,1,opt,name=integer_set,json=integerSet,oneof"`
}

type Iterator_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,2,opt,name=identifier,oneof"`
}

func (*Iterator_IntegerSet) isIterator_Iterator() {}

func (*Iterator_Identifier) isIterator_Iterator() {}

// Set of integer numbers, which can be either an enumeration of integer values
// or a range of values.
type IntegerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Set:
	//	*IntegerSet_IntegerEnumeration
	//	*IntegerSet_Range
	Set isIntegerSet_Set `protobuf_oneof:"set"`
}

func (x *IntegerSet) Reset() {
	*x = IntegerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerSet) ProtoMessage() {}

func (x *IntegerSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerSet.ProtoReflect.Descriptor instead.
func (*IntegerSet) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{17}
}

func (m *IntegerSet) GetSet() isIntegerSet_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (x *IntegerSet) GetIntegerEnumeration() *IntegerEnumeration {
	if x, ok := x.GetSet().(*IntegerSet_IntegerEnumeration); ok {
		return x.IntegerEnumeration
	}
	return nil
}

func (x *IntegerSet) GetRange() *Range {
	if x, ok := x.GetSet().(*IntegerSet_Range); ok {
		return x.Range
	}
	return nil
}

type isIntegerSet_Set interface {
	isIntegerSet_Set()
}

type IntegerSet_IntegerEnumeration struct {
	// Enumeration of integer values.
	IntegerEnumeration *IntegerEnumeration `protobuf:"bytes,1,opt,name=integer_enumeration,json=integerEnumeration,oneof"`
}

type IntegerSet_Range struct {
	// Range of values.
	Range *Range `protobuf:"bytes,2,opt,name=range,oneof"`
}

func (*IntegerSet_IntegerEnumeration) isIntegerSet_Set() {}

func (*IntegerSet_Range) isIntegerSet_Set() {}

// Enumeration of integer values.
type IntegerEnumeration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enumeration values, which can be calculated from an expression.
	Values []*Expression `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (x *IntegerEnumeration) Reset() {
	*x = IntegerEnumeration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerEnumeration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerEnumeration) ProtoMessage() {}

func (x *IntegerEnumeration) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerEnumeration.ProtoReflect.Descriptor instead.
func (*IntegerEnumeration) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{18}
}

func (x *IntegerEnumeration) GetValues() []*Expression {
	if x != nil {
		return x.Values
	}
	return nil
}

type Percentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression `protobuf:"bytes,1,opt,name=expression" json:"expression,omitempty"`
}

func (x *Percentage) Reset() {
	*x = Percentage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentage) ProtoMessage() {}

func (x *Percentage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentage.ProtoReflect.Descriptor instead.
func (*Percentage) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{19}
}

func (x *Percentage) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// FOR expression, used as part of ForInExpressions and ForOrExpressions.
// Can contain either an expression or a keyword.
type ForExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to For:
	//	*ForExpression_Expression
	//	*ForExpression_Keyword
	//	*ForExpression_Percentage
	For isForExpression_For `protobuf_oneof:"for"`
}

func (x *ForExpression) Reset() {
	*x = ForExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForExpression) ProtoMessage() {}

func (x *ForExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForExpression.ProtoReflect.Descriptor instead.
func (*ForExpression) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{20}
}

func (m *ForExpression) GetFor() isForExpression_For {
	if m != nil {
		return m.For
	}
	return nil
}

func (x *ForExpression) GetExpression() *Expression {
	if x, ok := x.GetFor().(*ForExpression_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *ForExpression) GetKeyword() ForKeyword {
	if x, ok := x.GetFor().(*ForExpression_Keyword); ok {
		return x.Keyword
	}
	return ForKeyword_NONE
}

func (x *ForExpression) GetPercentage() *Percentage {
	if x, ok := x.GetFor().(*ForExpression_Percentage); ok {
		return x.Percentage
	}
	return nil
}

type isForExpression_For interface {
	isForExpression_For()
}

type ForExpression_Expression struct {
	Expression *Expression `protobuf:"bytes,1,opt,name=expression,oneof"` // Example: "for 10"
}

type ForExpression_Keyword struct {
	Keyword ForKeyword `protobuf:"varint,2,opt,name=keyword,enum=ForKeyword,oneof"` // Example: "for all"
}

type ForExpression_Percentage struct {
	Percentage *Percentage `protobuf:"bytes,3,opt,name=percentage,oneof"` // Example: "x%"
}

func (*ForExpression_Expression) isForExpression_For() {}

func (*ForExpression_Keyword) isForExpression_For() {}

func (*ForExpression_Percentage) isForExpression_For() {}

// A ForOfExpression is satisfied if at least "expression" strings in
// "string_set" satisfy "expression". Example: for all of ($s1, $s2) : (@$ > 10)
type ForOfExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FOR expression: "for all". Required.
	ForExpression *ForExpression `protobuf:"bytes,1,opt,name=for_expression,json=forExpression" json:"for_expression,omitempty"`
	// String set: "($s1, $s2)". Required.
	StringSet *StringSet `protobuf:"bytes,2,opt,name=string_set,json=stringSet" json:"string_set,omitempty"`
	// Expression to match: "(@$ > 10)"
	Expression *Expression `protobuf:"bytes,3,opt,name=expression" json:"expression,omitempty"`
}

func (x *ForOfExpression) Reset() {
	*x = ForOfExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForOfExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForOfExpression) ProtoMessage() {}

func (x *ForOfExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForOfExpression.ProtoReflect.Descriptor instead.
func (*ForOfExpression) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{21}
}

func (x *ForOfExpression) GetForExpression() *ForExpression {
	if x != nil {
		return x.ForExpression
	}
	return nil
}

func (x *ForOfExpression) GetStringSet() *StringSet {
	if x != nil {
		return x.StringSet
	}
	return nil
}

func (x *ForOfExpression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// Set of strings. Can be either an enumeration of strings or a keyword.
type StringSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Set:
	//	*StringSet_Strings
	//	*StringSet_Keyword
	Set isStringSet_Set `protobuf_oneof:"set"`
}

func (x *StringSet) Reset() {
	*x = StringSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSet) ProtoMessage() {}

func (x *StringSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSet.ProtoReflect.Descriptor instead.
func (*StringSet) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{22}
}

func (m *StringSet) GetSet() isStringSet_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (x *StringSet) GetStrings() *StringEnumeration {
	if x, ok := x.GetSet().(*StringSet_Strings); ok {
		return x.Strings
	}
	return nil
}

func (x *StringSet) GetKeyword() StringSetKeyword {
	if x, ok := x.GetSet().(*StringSet_Keyword); ok {
		return x.Keyword
	}
	return StringSetKeyword_THEM
}

type isStringSet_Set interface {
	isStringSet_Set()
}

type StringSet_Strings struct {
	// Enumeration of strings. Example: ($s1, $s2, $s3)
	Strings *StringEnumeration `protobuf:"bytes,1,opt,name=strings,oneof"`
}

type StringSet_Keyword struct {
	// Keyword. Example: them.
	Keyword StringSetKeyword `protobuf:"varint,2,opt,name=keyword,enum=StringSetKeyword,oneof"`
}

func (*StringSet_Strings) isStringSet_Set() {}

func (*StringSet_Keyword) isStringSet_Set() {}

// Enumeration of strings, referenced by their identifier.
// A wildcard can be used to match multiple strings.
// Examples: $str1, $str*
type StringEnumeration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items in the strings enumeration.
	Items []*StringEnumeration_StringEnumerationItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *StringEnumeration) Reset() {
	*x = StringEnumeration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringEnumeration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringEnumeration) ProtoMessage() {}

func (x *StringEnumeration) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringEnumeration.ProtoReflect.Descriptor instead.
func (*StringEnumeration) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{23}
}

func (x *StringEnumeration) GetItems() []*StringEnumeration_StringEnumerationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Expression used as part of a rule condition.
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//	*Expression_BoolValue
	//	*Expression_BinaryExpression
	//	*Expression_UnaryExpression
	//	*Expression_StringIdentifier
	//	*Expression_ForInExpression
	//	*Expression_ForOfExpression
	//	*Expression_NotExpression
	//	*Expression_OrExpression
	//	*Expression_AndExpression
	//	*Expression_Range
	//	*Expression_Regexp
	//	*Expression_Keyword
	//	*Expression_NumberValue
	//	*Expression_DoubleValue
	//	*Expression_Text
	//	*Expression_StringCount
	//	*Expression_StringOffset
	//	*Expression_StringLength
	//	*Expression_Identifier
	//	*Expression_IntegerFunction
	//	*Expression_PercentageExpression
	Expression isExpression_Expression `protobuf_oneof:"expression"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{24}
}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *Expression) GetBoolValue() bool {
	if x, ok := x.GetExpression().(*Expression_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Expression) GetBinaryExpression() *BinaryExpression {
	if x, ok := x.GetExpression().(*Expression_BinaryExpression); ok {
		return x.BinaryExpression
	}
	return nil
}

func (x *Expression) GetUnaryExpression() *UnaryExpression {
	if x, ok := x.GetExpression().(*Expression_UnaryExpression); ok {
		return x.UnaryExpression
	}
	return nil
}

func (x *Expression) GetStringIdentifier() string {
	if x, ok := x.GetExpression().(*Expression_StringIdentifier); ok {
		return x.StringIdentifier
	}
	return ""
}

func (x *Expression) GetForInExpression() *ForInExpression {
	if x, ok := x.GetExpression().(*Expression_ForInExpression); ok {
		return x.ForInExpression
	}
	return nil
}

func (x *Expression) GetForOfExpression() *ForOfExpression {
	if x, ok := x.GetExpression().(*Expression_ForOfExpression); ok {
		return x.ForOfExpression
	}
	return nil
}

func (x *Expression) GetNotExpression() *Expression {
	if x, ok := x.GetExpression().(*Expression_NotExpression); ok {
		return x.NotExpression
	}
	return nil
}

func (x *Expression) GetOrExpression() *Expressions {
	if x, ok := x.GetExpression().(*Expression_OrExpression); ok {
		return x.OrExpression
	}
	return nil
}

func (x *Expression) GetAndExpression() *Expressions {
	if x, ok := x.GetExpression().(*Expression_AndExpression); ok {
		return x.AndExpression
	}
	return nil
}

func (x *Expression) GetRange() *Range {
	if x, ok := x.GetExpression().(*Expression_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Expression) GetRegexp() *Regexp {
	if x, ok := x.GetExpression().(*Expression_Regexp); ok {
		return x.Regexp
	}
	return nil
}

func (x *Expression) GetKeyword() Keyword {
	if x, ok := x.GetExpression().(*Expression_Keyword); ok {
		return x.Keyword
	}
	return Keyword_UNKNOWN
}

func (x *Expression) GetNumberValue() int64 {
	if x, ok := x.GetExpression().(*Expression_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *Expression) GetDoubleValue() float64 {
	if x, ok := x.GetExpression().(*Expression_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Expression) GetText() string {
	if x, ok := x.GetExpression().(*Expression_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Expression) GetStringCount() string {
	if x, ok := x.GetExpression().(*Expression_StringCount); ok {
		return x.StringCount
	}
	return ""
}

func (x *Expression) GetStringOffset() *StringOffset {
	if x, ok := x.GetExpression().(*Expression_StringOffset); ok {
		return x.StringOffset
	}
	return nil
}

func (x *Expression) GetStringLength() *StringLength {
	if x, ok := x.GetExpression().(*Expression_StringLength); ok {
		return x.StringLength
	}
	return nil
}

func (x *Expression) GetIdentifier() *Identifier {
	if x, ok := x.GetExpression().(*Expression_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Expression) GetIntegerFunction() *IntegerFunction {
	if x, ok := x.GetExpression().(*Expression_IntegerFunction); ok {
		return x.IntegerFunction
	}
	return nil
}

func (x *Expression) GetPercentageExpression() *Percentage {
	if x, ok := x.GetExpression().(*Expression_PercentageExpression); ok {
		return x.PercentageExpression
	}
	return nil
}

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,oneof"`
}

type Expression_BinaryExpression struct {
	BinaryExpression *BinaryExpression `protobuf:"bytes,2,opt,name=binary_expression,json=binaryExpression,oneof"`
}

type Expression_UnaryExpression struct {
	UnaryExpression *UnaryExpression `protobuf:"bytes,3,opt,name=unary_expression,json=unaryExpression,oneof"`
}

type Expression_StringIdentifier struct {
	StringIdentifier string `protobuf:"bytes,4,opt,name=string_identifier,json=stringIdentifier,oneof"`
}

type Expression_ForInExpression struct {
	ForInExpression *ForInExpression `protobuf:"bytes,5,opt,name=for_in_expression,json=forInExpression,oneof"`
}

type Expression_ForOfExpression struct {
	ForOfExpression *ForOfExpression `protobuf:"bytes,6,opt,name=for_of_expression,json=forOfExpression,oneof"`
}

type Expression_NotExpression struct {
	NotExpression *Expression `protobuf:"bytes,7,opt,name=not_expression,json=notExpression,oneof"`
}

type Expression_OrExpression struct {
	OrExpression *Expressions `protobuf:"bytes,8,opt,name=or_expression,json=orExpression,oneof"`
}

type Expression_AndExpression struct {
	AndExpression *Expressions `protobuf:"bytes,9,opt,name=and_expression,json=andExpression,oneof"`
}

type Expression_Range struct {
	Range *Range `protobuf:"bytes,10,opt,name=range,oneof"`
}

type Expression_Regexp struct {
	Regexp *Regexp `protobuf:"bytes,11,opt,name=regexp,oneof"`
}

type Expression_Keyword struct {
	Keyword Keyword `protobuf:"varint,12,opt,name=keyword,enum=Keyword,oneof"`
}

type Expression_NumberValue struct {
	NumberValue int64 `protobuf:"varint,13,opt,name=number_value,json=numberValue,oneof"`
}

type Expression_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,14,opt,name=double_value,json=doubleValue,oneof"`
}

type Expression_Text struct {
	Text string `protobuf:"bytes,15,opt,name=text,oneof"`
}

type Expression_StringCount struct {
	StringCount string `protobuf:"bytes,16,opt,name=string_count,json=stringCount,oneof"`
}

type Expression_StringOffset struct {
	StringOffset *StringOffset `protobuf:"bytes,17,opt,name=string_offset,json=stringOffset,oneof"`
}

type Expression_StringLength struct {
	StringLength *StringLength `protobuf:"bytes,18,opt,name=string_length,json=stringLength,oneof"`
}

type Expression_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,19,opt,name=identifier,oneof"`
}

type Expression_IntegerFunction struct {
	IntegerFunction *IntegerFunction `protobuf:"bytes,20,opt,name=integer_function,json=integerFunction,oneof"`
}

type Expression_PercentageExpression struct {
	PercentageExpression *Percentage `protobuf:"bytes,21,opt,name=percentage_expression,json=percentageExpression,oneof"`
}

func (*Expression_BoolValue) isExpression_Expression() {}

func (*Expression_BinaryExpression) isExpression_Expression() {}

func (*Expression_UnaryExpression) isExpression_Expression() {}

func (*Expression_StringIdentifier) isExpression_Expression() {}

func (*Expression_ForInExpression) isExpression_Expression() {}

func (*Expression_ForOfExpression) isExpression_Expression() {}

func (*Expression_NotExpression) isExpression_Expression() {}

func (*Expression_OrExpression) isExpression_Expression() {}

func (*Expression_AndExpression) isExpression_Expression() {}

func (*Expression_Range) isExpression_Expression() {}

func (*Expression_Regexp) isExpression_Expression() {}

func (*Expression_Keyword) isExpression_Expression() {}

func (*Expression_NumberValue) isExpression_Expression() {}

func (*Expression_DoubleValue) isExpression_Expression() {}

func (*Expression_Text) isExpression_Expression() {}

func (*Expression_StringCount) isExpression_Expression() {}

func (*Expression_StringOffset) isExpression_Expression() {}

func (*Expression_StringLength) isExpression_Expression() {}

func (*Expression_Identifier) isExpression_Expression() {}

func (*Expression_IntegerFunction) isExpression_Expression() {}

func (*Expression_PercentageExpression) isExpression_Expression() {}

// Refers to the offset or virtual address at which a string (or, optionally,
// the i-th occurence of the string) is found.
// Examples:
// - $s1 at 1000
// - $s1[2] at 1000
type StringOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String identifier. Required.
	StringIdentifier *string `protobuf:"bytes,1,opt,name=string_identifier,json=stringIdentifier" json:"string_identifier,omitempty"`
	// The index of the occurrence of the string.
	Index *Expression `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
}

func (x *StringOffset) Reset() {
	*x = StringOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringOffset) ProtoMessage() {}

func (x *StringOffset) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringOffset.ProtoReflect.Descriptor instead.
func (*StringOffset) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{25}
}

func (x *StringOffset) GetStringIdentifier() string {
	if x != nil && x.StringIdentifier != nil {
		return *x.StringIdentifier
	}
	return ""
}

func (x *StringOffset) GetIndex() *Expression {
	if x != nil {
		return x.Index
	}
	return nil
}

// Refers to the length of the matches of a string (or, optionally, to the
// length of the i-th match). It is useful when combined with regular
// expressions or hexadecimal strings, which may contain jumps.
// Examples:
// - !s1 > 50
// - !s1[1] != 30
type StringLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String Identifier. Required.
	StringIdentifier *string `protobuf:"bytes,1,opt,name=string_identifier,json=stringIdentifier" json:"string_identifier,omitempty"`
	// The index of the match.
	Index *Expression `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
}

func (x *StringLength) Reset() {
	*x = StringLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLength) ProtoMessage() {}

func (x *StringLength) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringLength.ProtoReflect.Descriptor instead.
func (*StringLength) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{26}
}

func (x *StringLength) GetStringIdentifier() string {
	if x != nil && x.StringIdentifier != nil {
		return *x.StringIdentifier
	}
	return ""
}

func (x *StringLength) GetIndex() *Expression {
	if x != nil {
		return x.Index
	}
	return nil
}

// Identifier used as part of expressions.
// Consists of sequence of identifiers, expressions and arguments.
// Examples:
// - my_var
// - pe.number_of_resources
// - math.entropy(mystr[i])
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items in the identifier.
	Items []*Identifier_IdentifierItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{27}
}

func (x *Identifier) GetItems() []*Identifier_IdentifierItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Sequence of expressions.
type Expressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Terms in the sequence.
	Terms []*Expression `protobuf:"bytes,1,rep,name=terms" json:"terms,omitempty"`
}

func (x *Expressions) Reset() {
	*x = Expressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expressions) ProtoMessage() {}

func (x *Expressions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expressions.ProtoReflect.Descriptor instead.
func (*Expressions) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{28}
}

func (x *Expressions) GetTerms() []*Expression {
	if x != nil {
		return x.Terms
	}
	return nil
}

// YARA rule.
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule modifiers (global, private).
	Modifiers *RuleModifiers `protobuf:"bytes,1,opt,name=modifiers" json:"modifiers,omitempty"`
	// Rule identifier. Must be unique in the ruleset. Required.
	Identifier *string `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	// Tags. Cannot be repeated.
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	// Metadata.
	Meta []*Meta `protobuf:"bytes,4,rep,name=meta" json:"meta,omitempty"`
	// String declarations.
	Strings []*String `protobuf:"bytes,5,rep,name=strings" json:"strings,omitempty"`
	// Boolean expression to check.
	Condition *Expression `protobuf:"bytes,6,opt,name=condition" json:"condition,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{29}
}

func (x *Rule) GetModifiers() *RuleModifiers {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Rule) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *Rule) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Rule) GetMeta() []*Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Rule) GetStrings() []*String {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *Rule) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Set of YARA rules.
type RuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Names of the imported modules.
	// Examples: "pe", "elf", "cuckoo", "magic", "hash", "math", ...
	Imports []string `protobuf:"bytes,1,rep,name=imports" json:"imports,omitempty"`
	// Path to other YARA source files whose content should be included.
	// Examples:
	// - "other_rule.yar"
	// - "rules/rule1.yar"
	Includes []string `protobuf:"bytes,2,rep,name=includes" json:"includes,omitempty"`
	// Set of rules.
	Rules []*Rule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (x *RuleSet) Reset() {
	*x = RuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleSet) ProtoMessage() {}

func (x *RuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleSet.ProtoReflect.Descriptor instead.
func (*RuleSet) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{30}
}

func (x *RuleSet) GetImports() []string {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *RuleSet) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *RuleSet) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// An entry in the strings enumeration.
type StringEnumeration_StringEnumerationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String identifier or part of it if a wildcard (*) is used.
	// Includes the wildcard if present.
	StringIdentifier *string `protobuf:"bytes,1,opt,name=string_identifier,json=stringIdentifier" json:"string_identifier,omitempty"`
	// Wildcard (*).
	HasWildcard *bool `protobuf:"varint,2,opt,name=has_wildcard,json=hasWildcard" json:"has_wildcard,omitempty"`
}

func (x *StringEnumeration_StringEnumerationItem) Reset() {
	*x = StringEnumeration_StringEnumerationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringEnumeration_StringEnumerationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringEnumeration_StringEnumerationItem) ProtoMessage() {}

func (x *StringEnumeration_StringEnumerationItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringEnumeration_StringEnumerationItem.ProtoReflect.Descriptor instead.
func (*StringEnumeration_StringEnumerationItem) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{23, 0}
}

func (x *StringEnumeration_StringEnumerationItem) GetStringIdentifier() string {
	if x != nil && x.StringIdentifier != nil {
		return *x.StringIdentifier
	}
	return ""
}

func (x *StringEnumeration_StringEnumerationItem) GetHasWildcard() bool {
	if x != nil && x.HasWildcard != nil {
		return *x.HasWildcard
	}
	return false
}

type Identifier_IdentifierItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//	*Identifier_IdentifierItem_Identifier
	//	*Identifier_IdentifierItem_Index
	//	*Identifier_IdentifierItem_Arguments
	Item isIdentifier_IdentifierItem_Item `protobuf_oneof:"item"`
}

func (x *Identifier_IdentifierItem) Reset() {
	*x = Identifier_IdentifierItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_yara_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_IdentifierItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_IdentifierItem) ProtoMessage() {}

func (x *Identifier_IdentifierItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_yara_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_IdentifierItem.ProtoReflect.Descriptor instead.
func (*Identifier_IdentifierItem) Descriptor() ([]byte, []int) {
	return file_pb_yara_proto_rawDescGZIP(), []int{27, 0}
}

func (m *Identifier_IdentifierItem) GetItem() isIdentifier_IdentifierItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *Identifier_IdentifierItem) GetIdentifier() string {
	if x, ok := x.GetItem().(*Identifier_IdentifierItem_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (x *Identifier_IdentifierItem) GetIndex() *Expression {
	if x, ok := x.GetItem().(*Identifier_IdentifierItem_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Identifier_IdentifierItem) GetArguments() *Expressions {
	if x, ok := x.GetItem().(*Identifier_IdentifierItem_Arguments); ok {
		return x.Arguments
	}
	return nil
}

type isIdentifier_IdentifierItem_Item interface {
	isIdentifier_IdentifierItem_Item()
}

type Identifier_IdentifierItem_Identifier struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,oneof"`
}

type Identifier_IdentifierItem_Index struct {
	Index *Expression `protobuf:"bytes,2,opt,name=index,oneof"`
}

type Identifier_IdentifierItem_Arguments struct {
	Arguments *Expressions `protobuf:"bytes,3,opt,name=arguments,oneof"`
}

func (*Identifier_IdentifierItem_Identifier) isIdentifier_IdentifierItem_Item() {}

func (*Identifier_IdentifierItem_Index) isIdentifier_IdentifierItem_Item() {}

func (*Identifier_IdentifierItem_Arguments) isIdentifier_IdentifierItem_Item() {}

var File_pb_yara_proto protoreflect.FileDescriptor

var file_pb_yara_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x62, 0x2f, 0x79, 0x61, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x41, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x22, 0x6d, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1e, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48,
	0x65, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12,
	0x21, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6e, 0x6f, 0x63, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x69, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x78, 0x6f, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x69, 0x12, 0x0c, 0x0a,
	0x01, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x78, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x78, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x78, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x78, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x77, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x77, 0x69, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x2c, 0x0a, 0x09, 0x48, 0x65, 0x78, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x48, 0x65, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x48, 0x65, 0x78, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x4a, 0x75, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x12, 0x33, 0x0a,
	0x0b, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x65, 0x78, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x48,
	0x65, 0x78, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x48, 0x65, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x22, 0x39, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x2e, 0x0a, 0x04,
	0x4a, 0x75, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xe4, 0x03, 0x0a,
	0x10, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd3, 0x02,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53,
	0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x54, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e,
	0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54,
	0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45,
	0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45,
	0x51, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55,
	0x53, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0x0d, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x58,
	0x4f, 0x52, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45, 0x5f,
	0x41, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45,
	0x5f, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x53, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53,
	0x57, 0x49, 0x54, 0x48, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x53, 0x57, 0x49,
	0x54, 0x48, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x57, 0x49, 0x54,
	0x48, 0x10, 0x1a, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49,
	0x4e, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x54, 0x57, 0x49, 0x53, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x02, 0x22, 0x49, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x56, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x46, 0x6f,
	0x72, 0x49, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x7b, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x46, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x22, 0x39,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x05, 0x0a,
	0x03, 0x66, 0x6f, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x4f, 0x66, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x66, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x1a, 0x67, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x69,
	0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x99, 0x08, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x10, 0x75,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x11, 0x66, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x49, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x11, 0x66, 0x6f, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x6f, 0x72, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x4f, 0x66, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x0d, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x24,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x08, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x34, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x30, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x07,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2a, 0x34, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x03,
	0x2a, 0x28, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x2a, 0x1c, 0x0a, 0x10, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x48, 0x45, 0x4d, 0x10, 0x01, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x69, 0x72, 0x75, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x2f, 0x67, 0x79, 0x70, 0x2f, 0x70, 0x62,
}

var (
	file_pb_yara_proto_rawDescOnce sync.Once
	file_pb_yara_proto_rawDescData = file_pb_yara_proto_rawDesc
)

func file_pb_yara_proto_rawDescGZIP() []byte {
	file_pb_yara_proto_rawDescOnce.Do(func() {
		file_pb_yara_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_yara_proto_rawDescData)
	})
	return file_pb_yara_proto_rawDescData
}

var file_pb_yara_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_pb_yara_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_pb_yara_proto_goTypes = []interface{}{
	(Keyword)(0),                   // 0: Keyword
	(ForKeyword)(0),                // 1: ForKeyword
	(StringSetKeyword)(0),          // 2: StringSetKeyword
	(BinaryExpression_Operator)(0), // 3: BinaryExpression.Operator
	(UnaryExpression_Operator)(0),  // 4: UnaryExpression.Operator
	(*RuleModifiers)(nil),          // 5: RuleModifiers
	(*Meta)(nil),                   // 6: Meta
	(*String)(nil),                 // 7: String
	(*StringModifiers)(nil),        // 8: StringModifiers
	(*TextString)(nil),             // 9: TextString
	(*Regexp)(nil),                 // 10: Regexp
	(*HexTokens)(nil),              // 11: HexTokens
	(*HexToken)(nil),               // 12: HexToken
	(*HexAlternative)(nil),         // 13: HexAlternative
	(*BytesSequence)(nil),          // 14: BytesSequence
	(*Jump)(nil),                   // 15: Jump
	(*BinaryExpression)(nil),       // 16: BinaryExpression
	(*UnaryExpression)(nil),        // 17: UnaryExpression
	(*Range)(nil),                  // 18: Range
	(*IntegerFunction)(nil),        // 19: IntegerFunction
	(*ForInExpression)(nil),        // 20: ForInExpression
	(*Iterator)(nil),               // 21: Iterator
	(*IntegerSet)(nil),             // 22: IntegerSet
	(*IntegerEnumeration)(nil),     // 23: IntegerEnumeration
	(*Percentage)(nil),             // 24: Percentage
	(*ForExpression)(nil),          // 25: ForExpression
	(*ForOfExpression)(nil),        // 26: ForOfExpression
	(*StringSet)(nil),              // 27: StringSet
	(*StringEnumeration)(nil),      // 28: StringEnumeration
	(*Expression)(nil),             // 29: Expression
	(*StringOffset)(nil),           // 30: StringOffset
	(*StringLength)(nil),           // 31: StringLength
	(*Identifier)(nil),             // 32: Identifier
	(*Expressions)(nil),            // 33: Expressions
	(*Rule)(nil),                   // 34: Rule
	(*RuleSet)(nil),                // 35: RuleSet
	(*StringEnumeration_StringEnumerationItem)(nil), // 36: StringEnumeration.StringEnumerationItem
	(*Identifier_IdentifierItem)(nil),               // 37: Identifier.IdentifierItem
}
var file_pb_yara_proto_depIdxs = []int32{
	9,  // 0: String.text:type_name -> TextString
	11, // 1: String.hex:type_name -> HexTokens
	10, // 2: String.regexp:type_name -> Regexp
	8,  // 3: TextString.modifiers:type_name -> StringModifiers
	8,  // 4: Regexp.modifiers:type_name -> StringModifiers
	12, // 5: HexTokens.token:type_name -> HexToken
	14, // 6: HexToken.sequence:type_name -> BytesSequence
	15, // 7: HexToken.jump:type_name -> Jump
	13, // 8: HexToken.alternative:type_name -> HexAlternative
	11, // 9: HexAlternative.tokens:type_name -> HexTokens
	3,  // 10: BinaryExpression.operator:type_name -> BinaryExpression.Operator
	29, // 11: BinaryExpression.left:type_name -> Expression
	29, // 12: BinaryExpression.right:type_name -> Expression
	4,  // 13: UnaryExpression.operator:type_name -> UnaryExpression.Operator
	29, // 14: UnaryExpression.expression:type_name -> Expression
	29, // 15: Range.start:type_name -> Expression
	29, // 16: Range.end:type_name -> Expression
	29, // 17: IntegerFunction.argument:type_name -> Expression
	25, // 18: ForInExpression.for_expression:type_name -> ForExpression
	21, // 19: ForInExpression.iterator:type_name -> Iterator
	29, // 20: ForInExpression.expression:type_name -> Expression
	22, // 21: Iterator.integer_set:type_name -> IntegerSet
	32, // 22: Iterator.identifier:type_name -> Identifier
	23, // 23: IntegerSet.integer_enumeration:type_name -> IntegerEnumeration
	18, // 24: IntegerSet.range:type_name -> Range
	29, // 25: IntegerEnumeration.values:type_name -> Expression
	29, // 26: Percentage.expression:type_name -> Expression
	29, // 27: ForExpression.expression:type_name -> Expression
	1,  // 28: ForExpression.keyword:type_name -> ForKeyword
	24, // 29: ForExpression.percentage:type_name -> Percentage
	25, // 30: ForOfExpression.for_expression:type_name -> ForExpression
	27, // 31: ForOfExpression.string_set:type_name -> StringSet
	29, // 32: ForOfExpression.expression:type_name -> Expression
	28, // 33: StringSet.strings:type_name -> StringEnumeration
	2,  // 34: StringSet.keyword:type_name -> StringSetKeyword
	36, // 35: StringEnumeration.items:type_name -> StringEnumeration.StringEnumerationItem
	16, // 36: Expression.binary_expression:type_name -> BinaryExpression
	17, // 37: Expression.unary_expression:type_name -> UnaryExpression
	20, // 38: Expression.for_in_expression:type_name -> ForInExpression
	26, // 39: Expression.for_of_expression:type_name -> ForOfExpression
	29, // 40: Expression.not_expression:type_name -> Expression
	33, // 41: Expression.or_expression:type_name -> Expressions
	33, // 42: Expression.and_expression:type_name -> Expressions
	18, // 43: Expression.range:type_name -> Range
	10, // 44: Expression.regexp:type_name -> Regexp
	0,  // 45: Expression.keyword:type_name -> Keyword
	30, // 46: Expression.string_offset:type_name -> StringOffset
	31, // 47: Expression.string_length:type_name -> StringLength
	32, // 48: Expression.identifier:type_name -> Identifier
	19, // 49: Expression.integer_function:type_name -> IntegerFunction
	24, // 50: Expression.percentage_expression:type_name -> Percentage
	29, // 51: StringOffset.index:type_name -> Expression
	29, // 52: StringLength.index:type_name -> Expression
	37, // 53: Identifier.items:type_name -> Identifier.IdentifierItem
	29, // 54: Expressions.terms:type_name -> Expression
	5,  // 55: Rule.modifiers:type_name -> RuleModifiers
	6,  // 56: Rule.meta:type_name -> Meta
	7,  // 57: Rule.strings:type_name -> String
	29, // 58: Rule.condition:type_name -> Expression
	34, // 59: RuleSet.rules:type_name -> Rule
	29, // 60: Identifier.IdentifierItem.index:type_name -> Expression
	33, // 61: Identifier.IdentifierItem.arguments:type_name -> Expressions
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_pb_yara_proto_init() }
func file_pb_yara_proto_init() {
	if File_pb_yara_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_yara_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleModifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringModifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regexp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HexTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HexToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HexAlternative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForInExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iterator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerEnumeration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percentage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForOfExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringEnumeration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringEnumeration_StringEnumerationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_yara_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_IdentifierItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_yara_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Meta_Text)(nil),
		(*Meta_Number)(nil),
		(*Meta_Boolean)(nil),
	}
	file_pb_yara_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*String_Text)(nil),
		(*String_Hex)(nil),
		(*String_Regexp)(nil),
	}
	file_pb_yara_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HexToken_Sequence)(nil),
		(*HexToken_Jump)(nil),
		(*HexToken_Alternative)(nil),
	}
	file_pb_yara_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Iterator_IntegerSet)(nil),
		(*Iterator_Identifier)(nil),
	}
	file_pb_yara_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*IntegerSet_IntegerEnumeration)(nil),
		(*IntegerSet_Range)(nil),
	}
	file_pb_yara_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ForExpression_Expression)(nil),
		(*ForExpression_Keyword)(nil),
		(*ForExpression_Percentage)(nil),
	}
	file_pb_yara_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*StringSet_Strings)(nil),
		(*StringSet_Keyword)(nil),
	}
	file_pb_yara_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Expression_BoolValue)(nil),
		(*Expression_BinaryExpression)(nil),
		(*Expression_UnaryExpression)(nil),
		(*Expression_StringIdentifier)(nil),
		(*Expression_ForInExpression)(nil),
		(*Expression_ForOfExpression)(nil),
		(*Expression_NotExpression)(nil),
		(*Expression_OrExpression)(nil),
		(*Expression_AndExpression)(nil),
		(*Expression_Range)(nil),
		(*Expression_Regexp)(nil),
		(*Expression_Keyword)(nil),
		(*Expression_NumberValue)(nil),
		(*Expression_DoubleValue)(nil),
		(*Expression_Text)(nil),
		(*Expression_StringCount)(nil),
		(*Expression_StringOffset)(nil),
		(*Expression_StringLength)(nil),
		(*Expression_Identifier)(nil),
		(*Expression_IntegerFunction)(nil),
		(*Expression_PercentageExpression)(nil),
	}
	file_pb_yara_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*Identifier_IdentifierItem_Identifier)(nil),
		(*Identifier_IdentifierItem_Index)(nil),
		(*Identifier_IdentifierItem_Arguments)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_yara_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_yara_proto_goTypes,
		DependencyIndexes: file_pb_yara_proto_depIdxs,
		EnumInfos:         file_pb_yara_proto_enumTypes,
		MessageInfos:      file_pb_yara_proto_msgTypes,
	}.Build()
	File_pb_yara_proto = out.File
	file_pb_yara_proto_rawDesc = nil
	file_pb_yara_proto_goTypes = nil
	file_pb_yara_proto_depIdxs = nil
}
