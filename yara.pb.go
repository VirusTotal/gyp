// Code generated by protoc-gen-go. DO NOT EDIT.
// source: yara.proto

package yara

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Keyword int32

const (
	Keyword_UNKNOWN    Keyword = 1
	Keyword_ENTRYPOINT Keyword = 2
	Keyword_FILESIZE   Keyword = 3
)

var Keyword_name = map[int32]string{
	1: "UNKNOWN",
	2: "ENTRYPOINT",
	3: "FILESIZE",
}

var Keyword_value = map[string]int32{
	"UNKNOWN":    1,
	"ENTRYPOINT": 2,
	"FILESIZE":   3,
}

func (x Keyword) Enum() *Keyword {
	p := new(Keyword)
	*p = x
	return p
}

func (x Keyword) String() string {
	return proto.EnumName(Keyword_name, int32(x))
}

func (x *Keyword) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Keyword_value, data, "Keyword")
	if err != nil {
		return err
	}
	*x = Keyword(value)
	return nil
}

func (Keyword) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{0}
}

type ForKeyword int32

const (
	ForKeyword_ALL ForKeyword = 1
	ForKeyword_ANY ForKeyword = 2
)

var ForKeyword_name = map[int32]string{
	1: "ALL",
	2: "ANY",
}

var ForKeyword_value = map[string]int32{
	"ALL": 1,
	"ANY": 2,
}

func (x ForKeyword) Enum() *ForKeyword {
	p := new(ForKeyword)
	*p = x
	return p
}

func (x ForKeyword) String() string {
	return proto.EnumName(ForKeyword_name, int32(x))
}

func (x *ForKeyword) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ForKeyword_value, data, "ForKeyword")
	if err != nil {
		return err
	}
	*x = ForKeyword(value)
	return nil
}

func (ForKeyword) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{1}
}

type StringSetKeyword int32

const (
	StringSetKeyword_THEM StringSetKeyword = 1
)

var StringSetKeyword_name = map[int32]string{
	1: "THEM",
}

var StringSetKeyword_value = map[string]int32{
	"THEM": 1,
}

func (x StringSetKeyword) Enum() *StringSetKeyword {
	p := new(StringSetKeyword)
	*p = x
	return p
}

func (x StringSetKeyword) String() string {
	return proto.EnumName(StringSetKeyword_name, int32(x))
}

func (x *StringSetKeyword) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StringSetKeyword_value, data, "StringSetKeyword")
	if err != nil {
		return err
	}
	*x = StringSetKeyword(value)
	return nil
}

func (StringSetKeyword) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{2}
}

type String_Type int32

const (
	String_UNKNOWN String_Type = 0
	String_TEXT    String_Type = 1
	String_HEX     String_Type = 2
	String_REGEX   String_Type = 3
)

var String_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "TEXT",
	2: "HEX",
	3: "REGEX",
}

var String_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"TEXT":    1,
	"HEX":     2,
	"REGEX":   3,
}

func (x String_Type) Enum() *String_Type {
	p := new(String_Type)
	*p = x
	return p
}

func (x String_Type) String() string {
	return proto.EnumName(String_Type_name, int32(x))
}

func (x *String_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(String_Type_value, data, "String_Type")
	if err != nil {
		return err
	}
	*x = String_Type(value)
	return nil
}

func (String_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{3, 0}
}

type BinaryExpression_Operator int32

const (
	BinaryExpression_UNKNOWN          BinaryExpression_Operator = 0
	BinaryExpression_MATCHES          BinaryExpression_Operator = 1
	BinaryExpression_CONTAINS         BinaryExpression_Operator = 2
	BinaryExpression_AT               BinaryExpression_Operator = 3
	BinaryExpression_IN               BinaryExpression_Operator = 4
	BinaryExpression_LT               BinaryExpression_Operator = 5
	BinaryExpression_GT               BinaryExpression_Operator = 6
	BinaryExpression_LE               BinaryExpression_Operator = 7
	BinaryExpression_GE               BinaryExpression_Operator = 8
	BinaryExpression_EQ               BinaryExpression_Operator = 9
	BinaryExpression_NEQ              BinaryExpression_Operator = 10
	BinaryExpression_INTEGER_FUNCTION BinaryExpression_Operator = 11
	BinaryExpression_PLUS             BinaryExpression_Operator = 12
	BinaryExpression_MINUS            BinaryExpression_Operator = 13
	BinaryExpression_TIMES            BinaryExpression_Operator = 14
	BinaryExpression_DIV              BinaryExpression_Operator = 15
	BinaryExpression_MOD              BinaryExpression_Operator = 16
	BinaryExpression_XOR              BinaryExpression_Operator = 17
	BinaryExpression_BITWISE_AND      BinaryExpression_Operator = 18
	BinaryExpression_BITWISE_OR       BinaryExpression_Operator = 19
	BinaryExpression_SHIFT_LEFT       BinaryExpression_Operator = 20
	BinaryExpression_SHIFT_RIGHT      BinaryExpression_Operator = 21
)

var BinaryExpression_Operator_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "MATCHES",
	2:  "CONTAINS",
	3:  "AT",
	4:  "IN",
	5:  "LT",
	6:  "GT",
	7:  "LE",
	8:  "GE",
	9:  "EQ",
	10: "NEQ",
	11: "INTEGER_FUNCTION",
	12: "PLUS",
	13: "MINUS",
	14: "TIMES",
	15: "DIV",
	16: "MOD",
	17: "XOR",
	18: "BITWISE_AND",
	19: "BITWISE_OR",
	20: "SHIFT_LEFT",
	21: "SHIFT_RIGHT",
}

var BinaryExpression_Operator_value = map[string]int32{
	"UNKNOWN":          0,
	"MATCHES":          1,
	"CONTAINS":         2,
	"AT":               3,
	"IN":               4,
	"LT":               5,
	"GT":               6,
	"LE":               7,
	"GE":               8,
	"EQ":               9,
	"NEQ":              10,
	"INTEGER_FUNCTION": 11,
	"PLUS":             12,
	"MINUS":            13,
	"TIMES":            14,
	"DIV":              15,
	"MOD":              16,
	"XOR":              17,
	"BITWISE_AND":      18,
	"BITWISE_OR":       19,
	"SHIFT_LEFT":       20,
	"SHIFT_RIGHT":      21,
}

func (x BinaryExpression_Operator) Enum() *BinaryExpression_Operator {
	p := new(BinaryExpression_Operator)
	*p = x
	return p
}

func (x BinaryExpression_Operator) String() string {
	return proto.EnumName(BinaryExpression_Operator_name, int32(x))
}

func (x *BinaryExpression_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BinaryExpression_Operator_value, data, "BinaryExpression_Operator")
	if err != nil {
		return err
	}
	*x = BinaryExpression_Operator(value)
	return nil
}

func (BinaryExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{4, 0}
}

type UnaryExpression_Operator int32

const (
	UnaryExpression_UNKNOWN     UnaryExpression_Operator = 0
	UnaryExpression_UNARY_MINUS UnaryExpression_Operator = 1
	UnaryExpression_BITWISE_NOT UnaryExpression_Operator = 2
)

var UnaryExpression_Operator_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNARY_MINUS",
	2: "BITWISE_NOT",
}

var UnaryExpression_Operator_value = map[string]int32{
	"UNKNOWN":     0,
	"UNARY_MINUS": 1,
	"BITWISE_NOT": 2,
}

func (x UnaryExpression_Operator) Enum() *UnaryExpression_Operator {
	p := new(UnaryExpression_Operator)
	*p = x
	return p
}

func (x UnaryExpression_Operator) String() string {
	return proto.EnumName(UnaryExpression_Operator_name, int32(x))
}

func (x *UnaryExpression_Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UnaryExpression_Operator_value, data, "UnaryExpression_Operator")
	if err != nil {
		return err
	}
	*x = UnaryExpression_Operator(value)
	return nil
}

func (UnaryExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{5, 0}
}

type RuleModifiers struct {
	Global               *bool    `protobuf:"varint,1,opt,name=global" json:"global,omitempty"`
	Private              *bool    `protobuf:"varint,2,opt,name=private" json:"private,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleModifiers) Reset()         { *m = RuleModifiers{} }
func (m *RuleModifiers) String() string { return proto.CompactTextString(m) }
func (*RuleModifiers) ProtoMessage()    {}
func (*RuleModifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{0}
}

func (m *RuleModifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleModifiers.Unmarshal(m, b)
}
func (m *RuleModifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleModifiers.Marshal(b, m, deterministic)
}
func (m *RuleModifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleModifiers.Merge(m, src)
}
func (m *RuleModifiers) XXX_Size() int {
	return xxx_messageInfo_RuleModifiers.Size(m)
}
func (m *RuleModifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleModifiers.DiscardUnknown(m)
}

var xxx_messageInfo_RuleModifiers proto.InternalMessageInfo

func (m *RuleModifiers) GetGlobal() bool {
	if m != nil && m.Global != nil {
		return *m.Global
	}
	return false
}

func (m *RuleModifiers) GetPrivate() bool {
	if m != nil && m.Private != nil {
		return *m.Private
	}
	return false
}

type Meta struct {
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Meta_Text
	//	*Meta_Number
	//	*Meta_Boolean
	Value                isMeta_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{1}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type isMeta_Value interface {
	isMeta_Value()
}

type Meta_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,oneof"`
}

type Meta_Number struct {
	Number int64 `protobuf:"varint,3,opt,name=number,oneof"`
}

type Meta_Boolean struct {
	Boolean bool `protobuf:"varint,4,opt,name=boolean,oneof"`
}

func (*Meta_Text) isMeta_Value() {}

func (*Meta_Number) isMeta_Value() {}

func (*Meta_Boolean) isMeta_Value() {}

func (m *Meta) GetValue() isMeta_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Meta) GetText() string {
	if x, ok := m.GetValue().(*Meta_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Meta) GetNumber() int64 {
	if x, ok := m.GetValue().(*Meta_Number); ok {
		return x.Number
	}
	return 0
}

func (m *Meta) GetBoolean() bool {
	if x, ok := m.GetValue().(*Meta_Boolean); ok {
		return x.Boolean
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Meta) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Meta_Text)(nil),
		(*Meta_Number)(nil),
		(*Meta_Boolean)(nil),
	}
}

type StringModifiers struct {
	Nocase               *bool    `protobuf:"varint,1,opt,name=nocase" json:"nocase,omitempty"`
	Ascii                *bool    `protobuf:"varint,2,opt,name=ascii" json:"ascii,omitempty"`
	Wide                 *bool    `protobuf:"varint,3,opt,name=wide" json:"wide,omitempty"`
	Fullword             *bool    `protobuf:"varint,4,opt,name=fullword" json:"fullword,omitempty"`
	Xor                  *bool    `protobuf:"varint,5,opt,name=xor" json:"xor,omitempty"`
	I                    *bool    `protobuf:"varint,6,opt,name=i" json:"i,omitempty"`
	S                    *bool    `protobuf:"varint,7,opt,name=s" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringModifiers) Reset()         { *m = StringModifiers{} }
func (m *StringModifiers) String() string { return proto.CompactTextString(m) }
func (*StringModifiers) ProtoMessage()    {}
func (*StringModifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{2}
}

func (m *StringModifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringModifiers.Unmarshal(m, b)
}
func (m *StringModifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringModifiers.Marshal(b, m, deterministic)
}
func (m *StringModifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringModifiers.Merge(m, src)
}
func (m *StringModifiers) XXX_Size() int {
	return xxx_messageInfo_StringModifiers.Size(m)
}
func (m *StringModifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_StringModifiers.DiscardUnknown(m)
}

var xxx_messageInfo_StringModifiers proto.InternalMessageInfo

func (m *StringModifiers) GetNocase() bool {
	if m != nil && m.Nocase != nil {
		return *m.Nocase
	}
	return false
}

func (m *StringModifiers) GetAscii() bool {
	if m != nil && m.Ascii != nil {
		return *m.Ascii
	}
	return false
}

func (m *StringModifiers) GetWide() bool {
	if m != nil && m.Wide != nil {
		return *m.Wide
	}
	return false
}

func (m *StringModifiers) GetFullword() bool {
	if m != nil && m.Fullword != nil {
		return *m.Fullword
	}
	return false
}

func (m *StringModifiers) GetXor() bool {
	if m != nil && m.Xor != nil {
		return *m.Xor
	}
	return false
}

func (m *StringModifiers) GetI() bool {
	if m != nil && m.I != nil {
		return *m.I
	}
	return false
}

func (m *StringModifiers) GetS() bool {
	if m != nil && m.S != nil {
		return *m.S
	}
	return false
}

type String struct {
	Id                   *string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type                 *String_Type     `protobuf:"varint,2,opt,name=type,enum=String_Type" json:"type,omitempty"`
	Text                 *string          `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Modifiers            *StringModifiers `protobuf:"bytes,4,opt,name=modifiers" json:"modifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{3}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *String) GetType() String_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return String_UNKNOWN
}

func (m *String) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *String) GetModifiers() *StringModifiers {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

type BinaryExpression struct {
	Operator             *BinaryExpression_Operator `protobuf:"varint,1,opt,name=operator,enum=BinaryExpression_Operator" json:"operator,omitempty"`
	Left                 *Expression                `protobuf:"bytes,2,opt,name=left" json:"left,omitempty"`
	Right                *Expression                `protobuf:"bytes,3,opt,name=right" json:"right,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *BinaryExpression) Reset()         { *m = BinaryExpression{} }
func (m *BinaryExpression) String() string { return proto.CompactTextString(m) }
func (*BinaryExpression) ProtoMessage()    {}
func (*BinaryExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{4}
}

func (m *BinaryExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryExpression.Unmarshal(m, b)
}
func (m *BinaryExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryExpression.Marshal(b, m, deterministic)
}
func (m *BinaryExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryExpression.Merge(m, src)
}
func (m *BinaryExpression) XXX_Size() int {
	return xxx_messageInfo_BinaryExpression.Size(m)
}
func (m *BinaryExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryExpression.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryExpression proto.InternalMessageInfo

func (m *BinaryExpression) GetOperator() BinaryExpression_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return BinaryExpression_UNKNOWN
}

func (m *BinaryExpression) GetLeft() *Expression {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *BinaryExpression) GetRight() *Expression {
	if m != nil {
		return m.Right
	}
	return nil
}

type UnaryExpression struct {
	Operator             *UnaryExpression_Operator `protobuf:"varint,1,opt,name=operator,enum=UnaryExpression_Operator" json:"operator,omitempty"`
	Expression           *Expression               `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UnaryExpression) Reset()         { *m = UnaryExpression{} }
func (m *UnaryExpression) String() string { return proto.CompactTextString(m) }
func (*UnaryExpression) ProtoMessage()    {}
func (*UnaryExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{5}
}

func (m *UnaryExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnaryExpression.Unmarshal(m, b)
}
func (m *UnaryExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnaryExpression.Marshal(b, m, deterministic)
}
func (m *UnaryExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnaryExpression.Merge(m, src)
}
func (m *UnaryExpression) XXX_Size() int {
	return xxx_messageInfo_UnaryExpression.Size(m)
}
func (m *UnaryExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_UnaryExpression.DiscardUnknown(m)
}

var xxx_messageInfo_UnaryExpression proto.InternalMessageInfo

func (m *UnaryExpression) GetOperator() UnaryExpression_Operator {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return UnaryExpression_UNKNOWN
}

func (m *UnaryExpression) GetExpression() *Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

type Range struct {
	Start                *Expression `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End                  *Expression `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{6}
}

func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetStart() *Expression {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Range) GetEnd() *Expression {
	if m != nil {
		return m.End
	}
	return nil
}

type Regexp struct {
	Text                 *string          `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Modifiers            *StringModifiers `protobuf:"bytes,2,opt,name=modifiers" json:"modifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Regexp) Reset()         { *m = Regexp{} }
func (m *Regexp) String() string { return proto.CompactTextString(m) }
func (*Regexp) ProtoMessage()    {}
func (*Regexp) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{7}
}

func (m *Regexp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Regexp.Unmarshal(m, b)
}
func (m *Regexp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Regexp.Marshal(b, m, deterministic)
}
func (m *Regexp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Regexp.Merge(m, src)
}
func (m *Regexp) XXX_Size() int {
	return xxx_messageInfo_Regexp.Size(m)
}
func (m *Regexp) XXX_DiscardUnknown() {
	xxx_messageInfo_Regexp.DiscardUnknown(m)
}

var xxx_messageInfo_Regexp proto.InternalMessageInfo

func (m *Regexp) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Regexp) GetModifiers() *StringModifiers {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

type IntegerFunction struct {
	Function             *string     `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	Expression           *Expression `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *IntegerFunction) Reset()         { *m = IntegerFunction{} }
func (m *IntegerFunction) String() string { return proto.CompactTextString(m) }
func (*IntegerFunction) ProtoMessage()    {}
func (*IntegerFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{8}
}

func (m *IntegerFunction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerFunction.Unmarshal(m, b)
}
func (m *IntegerFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerFunction.Marshal(b, m, deterministic)
}
func (m *IntegerFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerFunction.Merge(m, src)
}
func (m *IntegerFunction) XXX_Size() int {
	return xxx_messageInfo_IntegerFunction.Size(m)
}
func (m *IntegerFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerFunction.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerFunction proto.InternalMessageInfo

func (m *IntegerFunction) GetFunction() string {
	if m != nil && m.Function != nil {
		return *m.Function
	}
	return ""
}

func (m *IntegerFunction) GetExpression() *Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

type ForInExpression struct {
	ForExpression        *ForExpression `protobuf:"bytes,1,opt,name=for_expression,json=forExpression" json:"for_expression,omitempty"`
	Identifier           *string        `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	IntegerSet           *IntegerSet    `protobuf:"bytes,3,opt,name=integer_set,json=integerSet" json:"integer_set,omitempty"`
	Expression           *Expression    `protobuf:"bytes,4,opt,name=expression" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ForInExpression) Reset()         { *m = ForInExpression{} }
func (m *ForInExpression) String() string { return proto.CompactTextString(m) }
func (*ForInExpression) ProtoMessage()    {}
func (*ForInExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{9}
}

func (m *ForInExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForInExpression.Unmarshal(m, b)
}
func (m *ForInExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForInExpression.Marshal(b, m, deterministic)
}
func (m *ForInExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForInExpression.Merge(m, src)
}
func (m *ForInExpression) XXX_Size() int {
	return xxx_messageInfo_ForInExpression.Size(m)
}
func (m *ForInExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ForInExpression.DiscardUnknown(m)
}

var xxx_messageInfo_ForInExpression proto.InternalMessageInfo

func (m *ForInExpression) GetForExpression() *ForExpression {
	if m != nil {
		return m.ForExpression
	}
	return nil
}

func (m *ForInExpression) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *ForInExpression) GetIntegerSet() *IntegerSet {
	if m != nil {
		return m.IntegerSet
	}
	return nil
}

func (m *ForInExpression) GetExpression() *Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

type IntegerSet struct {
	// Types that are valid to be assigned to Set:
	//	*IntegerSet_IntegerEnumeration
	//	*IntegerSet_Range
	Set                  isIntegerSet_Set `protobuf_oneof:"set"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IntegerSet) Reset()         { *m = IntegerSet{} }
func (m *IntegerSet) String() string { return proto.CompactTextString(m) }
func (*IntegerSet) ProtoMessage()    {}
func (*IntegerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{10}
}

func (m *IntegerSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerSet.Unmarshal(m, b)
}
func (m *IntegerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerSet.Marshal(b, m, deterministic)
}
func (m *IntegerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerSet.Merge(m, src)
}
func (m *IntegerSet) XXX_Size() int {
	return xxx_messageInfo_IntegerSet.Size(m)
}
func (m *IntegerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerSet.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerSet proto.InternalMessageInfo

type isIntegerSet_Set interface {
	isIntegerSet_Set()
}

type IntegerSet_IntegerEnumeration struct {
	IntegerEnumeration *IntegerEnumeration `protobuf:"bytes,1,opt,name=integer_enumeration,json=integerEnumeration,oneof"`
}

type IntegerSet_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,oneof"`
}

func (*IntegerSet_IntegerEnumeration) isIntegerSet_Set() {}

func (*IntegerSet_Range) isIntegerSet_Set() {}

func (m *IntegerSet) GetSet() isIntegerSet_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *IntegerSet) GetIntegerEnumeration() *IntegerEnumeration {
	if x, ok := m.GetSet().(*IntegerSet_IntegerEnumeration); ok {
		return x.IntegerEnumeration
	}
	return nil
}

func (m *IntegerSet) GetRange() *Range {
	if x, ok := m.GetSet().(*IntegerSet_Range); ok {
		return x.Range
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IntegerSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IntegerSet_IntegerEnumeration)(nil),
		(*IntegerSet_Range)(nil),
	}
}

type IntegerEnumeration struct {
	Values               []*Expression `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IntegerEnumeration) Reset()         { *m = IntegerEnumeration{} }
func (m *IntegerEnumeration) String() string { return proto.CompactTextString(m) }
func (*IntegerEnumeration) ProtoMessage()    {}
func (*IntegerEnumeration) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{11}
}

func (m *IntegerEnumeration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegerEnumeration.Unmarshal(m, b)
}
func (m *IntegerEnumeration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegerEnumeration.Marshal(b, m, deterministic)
}
func (m *IntegerEnumeration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerEnumeration.Merge(m, src)
}
func (m *IntegerEnumeration) XXX_Size() int {
	return xxx_messageInfo_IntegerEnumeration.Size(m)
}
func (m *IntegerEnumeration) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerEnumeration.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerEnumeration proto.InternalMessageInfo

func (m *IntegerEnumeration) GetValues() []*Expression {
	if m != nil {
		return m.Values
	}
	return nil
}

type ForExpression struct {
	// Types that are valid to be assigned to For:
	//	*ForExpression_Expression
	//	*ForExpression_Keyword
	For                  isForExpression_For `protobuf_oneof:"for"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ForExpression) Reset()         { *m = ForExpression{} }
func (m *ForExpression) String() string { return proto.CompactTextString(m) }
func (*ForExpression) ProtoMessage()    {}
func (*ForExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{12}
}

func (m *ForExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForExpression.Unmarshal(m, b)
}
func (m *ForExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForExpression.Marshal(b, m, deterministic)
}
func (m *ForExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForExpression.Merge(m, src)
}
func (m *ForExpression) XXX_Size() int {
	return xxx_messageInfo_ForExpression.Size(m)
}
func (m *ForExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ForExpression.DiscardUnknown(m)
}

var xxx_messageInfo_ForExpression proto.InternalMessageInfo

type isForExpression_For interface {
	isForExpression_For()
}

type ForExpression_Expression struct {
	Expression *Expression `protobuf:"bytes,1,opt,name=expression,oneof"`
}

type ForExpression_Keyword struct {
	Keyword ForKeyword `protobuf:"varint,2,opt,name=keyword,enum=ForKeyword,oneof"`
}

func (*ForExpression_Expression) isForExpression_For() {}

func (*ForExpression_Keyword) isForExpression_For() {}

func (m *ForExpression) GetFor() isForExpression_For {
	if m != nil {
		return m.For
	}
	return nil
}

func (m *ForExpression) GetExpression() *Expression {
	if x, ok := m.GetFor().(*ForExpression_Expression); ok {
		return x.Expression
	}
	return nil
}

func (m *ForExpression) GetKeyword() ForKeyword {
	if x, ok := m.GetFor().(*ForExpression_Keyword); ok {
		return x.Keyword
	}
	return ForKeyword_ALL
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ForExpression) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ForExpression_Expression)(nil),
		(*ForExpression_Keyword)(nil),
	}
}

type ForOfExpression struct {
	ForExpression        *ForExpression `protobuf:"bytes,1,opt,name=for_expression,json=forExpression" json:"for_expression,omitempty"`
	StringSet            *StringSet     `protobuf:"bytes,2,opt,name=string_set,json=stringSet" json:"string_set,omitempty"`
	Expression           *Expression    `protobuf:"bytes,3,opt,name=expression" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ForOfExpression) Reset()         { *m = ForOfExpression{} }
func (m *ForOfExpression) String() string { return proto.CompactTextString(m) }
func (*ForOfExpression) ProtoMessage()    {}
func (*ForOfExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{13}
}

func (m *ForOfExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForOfExpression.Unmarshal(m, b)
}
func (m *ForOfExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForOfExpression.Marshal(b, m, deterministic)
}
func (m *ForOfExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForOfExpression.Merge(m, src)
}
func (m *ForOfExpression) XXX_Size() int {
	return xxx_messageInfo_ForOfExpression.Size(m)
}
func (m *ForOfExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_ForOfExpression.DiscardUnknown(m)
}

var xxx_messageInfo_ForOfExpression proto.InternalMessageInfo

func (m *ForOfExpression) GetForExpression() *ForExpression {
	if m != nil {
		return m.ForExpression
	}
	return nil
}

func (m *ForOfExpression) GetStringSet() *StringSet {
	if m != nil {
		return m.StringSet
	}
	return nil
}

func (m *ForOfExpression) GetExpression() *Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

type StringSet struct {
	// Types that are valid to be assigned to Set:
	//	*StringSet_Strings
	//	*StringSet_Keyword
	Set                  isStringSet_Set `protobuf_oneof:"set"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *StringSet) Reset()         { *m = StringSet{} }
func (m *StringSet) String() string { return proto.CompactTextString(m) }
func (*StringSet) ProtoMessage()    {}
func (*StringSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{14}
}

func (m *StringSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringSet.Unmarshal(m, b)
}
func (m *StringSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringSet.Marshal(b, m, deterministic)
}
func (m *StringSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringSet.Merge(m, src)
}
func (m *StringSet) XXX_Size() int {
	return xxx_messageInfo_StringSet.Size(m)
}
func (m *StringSet) XXX_DiscardUnknown() {
	xxx_messageInfo_StringSet.DiscardUnknown(m)
}

var xxx_messageInfo_StringSet proto.InternalMessageInfo

type isStringSet_Set interface {
	isStringSet_Set()
}

type StringSet_Strings struct {
	Strings *StringEnumeration `protobuf:"bytes,1,opt,name=strings,oneof"`
}

type StringSet_Keyword struct {
	Keyword StringSetKeyword `protobuf:"varint,2,opt,name=keyword,enum=StringSetKeyword,oneof"`
}

func (*StringSet_Strings) isStringSet_Set() {}

func (*StringSet_Keyword) isStringSet_Set() {}

func (m *StringSet) GetSet() isStringSet_Set {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *StringSet) GetStrings() *StringEnumeration {
	if x, ok := m.GetSet().(*StringSet_Strings); ok {
		return x.Strings
	}
	return nil
}

func (m *StringSet) GetKeyword() StringSetKeyword {
	if x, ok := m.GetSet().(*StringSet_Keyword); ok {
		return x.Keyword
	}
	return StringSetKeyword_THEM
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StringSet) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StringSet_Strings)(nil),
		(*StringSet_Keyword)(nil),
	}
}

type StringEnumeration struct {
	Items                []*StringEnumeration_StringEnumerationItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *StringEnumeration) Reset()         { *m = StringEnumeration{} }
func (m *StringEnumeration) String() string { return proto.CompactTextString(m) }
func (*StringEnumeration) ProtoMessage()    {}
func (*StringEnumeration) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{15}
}

func (m *StringEnumeration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringEnumeration.Unmarshal(m, b)
}
func (m *StringEnumeration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringEnumeration.Marshal(b, m, deterministic)
}
func (m *StringEnumeration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringEnumeration.Merge(m, src)
}
func (m *StringEnumeration) XXX_Size() int {
	return xxx_messageInfo_StringEnumeration.Size(m)
}
func (m *StringEnumeration) XXX_DiscardUnknown() {
	xxx_messageInfo_StringEnumeration.DiscardUnknown(m)
}

var xxx_messageInfo_StringEnumeration proto.InternalMessageInfo

func (m *StringEnumeration) GetItems() []*StringEnumeration_StringEnumerationItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type StringEnumeration_StringEnumerationItem struct {
	StringIdentifier     *string  `protobuf:"bytes,1,opt,name=string_identifier,json=stringIdentifier" json:"string_identifier,omitempty"`
	HasWildcard          *bool    `protobuf:"varint,2,opt,name=has_wildcard,json=hasWildcard" json:"has_wildcard,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringEnumeration_StringEnumerationItem) Reset() {
	*m = StringEnumeration_StringEnumerationItem{}
}
func (m *StringEnumeration_StringEnumerationItem) String() string { return proto.CompactTextString(m) }
func (*StringEnumeration_StringEnumerationItem) ProtoMessage()    {}
func (*StringEnumeration_StringEnumerationItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{15, 0}
}

func (m *StringEnumeration_StringEnumerationItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringEnumeration_StringEnumerationItem.Unmarshal(m, b)
}
func (m *StringEnumeration_StringEnumerationItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringEnumeration_StringEnumerationItem.Marshal(b, m, deterministic)
}
func (m *StringEnumeration_StringEnumerationItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringEnumeration_StringEnumerationItem.Merge(m, src)
}
func (m *StringEnumeration_StringEnumerationItem) XXX_Size() int {
	return xxx_messageInfo_StringEnumeration_StringEnumerationItem.Size(m)
}
func (m *StringEnumeration_StringEnumerationItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StringEnumeration_StringEnumerationItem.DiscardUnknown(m)
}

var xxx_messageInfo_StringEnumeration_StringEnumerationItem proto.InternalMessageInfo

func (m *StringEnumeration_StringEnumerationItem) GetStringIdentifier() string {
	if m != nil && m.StringIdentifier != nil {
		return *m.StringIdentifier
	}
	return ""
}

func (m *StringEnumeration_StringEnumerationItem) GetHasWildcard() bool {
	if m != nil && m.HasWildcard != nil {
		return *m.HasWildcard
	}
	return false
}

type Expression struct {
	// Types that are valid to be assigned to Expression:
	//	*Expression_BoolValue
	//	*Expression_BinaryExpression
	//	*Expression_UnaryExpression
	//	*Expression_StringIdentifier
	//	*Expression_ForInExpression
	//	*Expression_ForOfExpression
	//	*Expression_NotExpression
	//	*Expression_OrExpression
	//	*Expression_AndExpression
	//	*Expression_Range
	//	*Expression_Regexp
	//	*Expression_Keyword
	//	*Expression_NumberValue
	//	*Expression_DoubleValue
	//	*Expression_Text
	//	*Expression_StringCount
	//	*Expression_StringOffset
	//	*Expression_StringLength
	//	*Expression_Identifier
	//	*Expression_IntegerFunction
	Expression           isExpression_Expression `protobuf_oneof:"expression"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Expression) Reset()         { *m = Expression{} }
func (m *Expression) String() string { return proto.CompactTextString(m) }
func (*Expression) ProtoMessage()    {}
func (*Expression) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{16}
}

func (m *Expression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expression.Unmarshal(m, b)
}
func (m *Expression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expression.Marshal(b, m, deterministic)
}
func (m *Expression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expression.Merge(m, src)
}
func (m *Expression) XXX_Size() int {
	return xxx_messageInfo_Expression.Size(m)
}
func (m *Expression) XXX_DiscardUnknown() {
	xxx_messageInfo_Expression.DiscardUnknown(m)
}

var xxx_messageInfo_Expression proto.InternalMessageInfo

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,oneof"`
}

type Expression_BinaryExpression struct {
	BinaryExpression *BinaryExpression `protobuf:"bytes,2,opt,name=binary_expression,json=binaryExpression,oneof"`
}

type Expression_UnaryExpression struct {
	UnaryExpression *UnaryExpression `protobuf:"bytes,3,opt,name=unary_expression,json=unaryExpression,oneof"`
}

type Expression_StringIdentifier struct {
	StringIdentifier string `protobuf:"bytes,4,opt,name=string_identifier,json=stringIdentifier,oneof"`
}

type Expression_ForInExpression struct {
	ForInExpression *ForInExpression `protobuf:"bytes,5,opt,name=for_in_expression,json=forInExpression,oneof"`
}

type Expression_ForOfExpression struct {
	ForOfExpression *ForOfExpression `protobuf:"bytes,6,opt,name=for_of_expression,json=forOfExpression,oneof"`
}

type Expression_NotExpression struct {
	NotExpression *Expression `protobuf:"bytes,7,opt,name=not_expression,json=notExpression,oneof"`
}

type Expression_OrExpression struct {
	OrExpression *Expressions `protobuf:"bytes,8,opt,name=or_expression,json=orExpression,oneof"`
}

type Expression_AndExpression struct {
	AndExpression *Expressions `protobuf:"bytes,9,opt,name=and_expression,json=andExpression,oneof"`
}

type Expression_Range struct {
	Range *Range `protobuf:"bytes,10,opt,name=range,oneof"`
}

type Expression_Regexp struct {
	Regexp *Regexp `protobuf:"bytes,11,opt,name=regexp,oneof"`
}

type Expression_Keyword struct {
	Keyword Keyword `protobuf:"varint,12,opt,name=keyword,enum=Keyword,oneof"`
}

type Expression_NumberValue struct {
	NumberValue int64 `protobuf:"varint,13,opt,name=number_value,json=numberValue,oneof"`
}

type Expression_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,14,opt,name=double_value,json=doubleValue,oneof"`
}

type Expression_Text struct {
	Text string `protobuf:"bytes,15,opt,name=text,oneof"`
}

type Expression_StringCount struct {
	StringCount string `protobuf:"bytes,16,opt,name=string_count,json=stringCount,oneof"`
}

type Expression_StringOffset struct {
	StringOffset *StringOffset `protobuf:"bytes,17,opt,name=string_offset,json=stringOffset,oneof"`
}

type Expression_StringLength struct {
	StringLength *StringLength `protobuf:"bytes,18,opt,name=string_length,json=stringLength,oneof"`
}

type Expression_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,19,opt,name=identifier,oneof"`
}

type Expression_IntegerFunction struct {
	IntegerFunction *IntegerFunction `protobuf:"bytes,20,opt,name=integer_function,json=integerFunction,oneof"`
}

func (*Expression_BoolValue) isExpression_Expression() {}

func (*Expression_BinaryExpression) isExpression_Expression() {}

func (*Expression_UnaryExpression) isExpression_Expression() {}

func (*Expression_StringIdentifier) isExpression_Expression() {}

func (*Expression_ForInExpression) isExpression_Expression() {}

func (*Expression_ForOfExpression) isExpression_Expression() {}

func (*Expression_NotExpression) isExpression_Expression() {}

func (*Expression_OrExpression) isExpression_Expression() {}

func (*Expression_AndExpression) isExpression_Expression() {}

func (*Expression_Range) isExpression_Expression() {}

func (*Expression_Regexp) isExpression_Expression() {}

func (*Expression_Keyword) isExpression_Expression() {}

func (*Expression_NumberValue) isExpression_Expression() {}

func (*Expression_DoubleValue) isExpression_Expression() {}

func (*Expression_Text) isExpression_Expression() {}

func (*Expression_StringCount) isExpression_Expression() {}

func (*Expression_StringOffset) isExpression_Expression() {}

func (*Expression_StringLength) isExpression_Expression() {}

func (*Expression_Identifier) isExpression_Expression() {}

func (*Expression_IntegerFunction) isExpression_Expression() {}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *Expression) GetBoolValue() bool {
	if x, ok := m.GetExpression().(*Expression_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Expression) GetBinaryExpression() *BinaryExpression {
	if x, ok := m.GetExpression().(*Expression_BinaryExpression); ok {
		return x.BinaryExpression
	}
	return nil
}

func (m *Expression) GetUnaryExpression() *UnaryExpression {
	if x, ok := m.GetExpression().(*Expression_UnaryExpression); ok {
		return x.UnaryExpression
	}
	return nil
}

func (m *Expression) GetStringIdentifier() string {
	if x, ok := m.GetExpression().(*Expression_StringIdentifier); ok {
		return x.StringIdentifier
	}
	return ""
}

func (m *Expression) GetForInExpression() *ForInExpression {
	if x, ok := m.GetExpression().(*Expression_ForInExpression); ok {
		return x.ForInExpression
	}
	return nil
}

func (m *Expression) GetForOfExpression() *ForOfExpression {
	if x, ok := m.GetExpression().(*Expression_ForOfExpression); ok {
		return x.ForOfExpression
	}
	return nil
}

func (m *Expression) GetNotExpression() *Expression {
	if x, ok := m.GetExpression().(*Expression_NotExpression); ok {
		return x.NotExpression
	}
	return nil
}

func (m *Expression) GetOrExpression() *Expressions {
	if x, ok := m.GetExpression().(*Expression_OrExpression); ok {
		return x.OrExpression
	}
	return nil
}

func (m *Expression) GetAndExpression() *Expressions {
	if x, ok := m.GetExpression().(*Expression_AndExpression); ok {
		return x.AndExpression
	}
	return nil
}

func (m *Expression) GetRange() *Range {
	if x, ok := m.GetExpression().(*Expression_Range); ok {
		return x.Range
	}
	return nil
}

func (m *Expression) GetRegexp() *Regexp {
	if x, ok := m.GetExpression().(*Expression_Regexp); ok {
		return x.Regexp
	}
	return nil
}

func (m *Expression) GetKeyword() Keyword {
	if x, ok := m.GetExpression().(*Expression_Keyword); ok {
		return x.Keyword
	}
	return Keyword_UNKNOWN
}

func (m *Expression) GetNumberValue() int64 {
	if x, ok := m.GetExpression().(*Expression_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (m *Expression) GetDoubleValue() float64 {
	if x, ok := m.GetExpression().(*Expression_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Expression) GetText() string {
	if x, ok := m.GetExpression().(*Expression_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Expression) GetStringCount() string {
	if x, ok := m.GetExpression().(*Expression_StringCount); ok {
		return x.StringCount
	}
	return ""
}

func (m *Expression) GetStringOffset() *StringOffset {
	if x, ok := m.GetExpression().(*Expression_StringOffset); ok {
		return x.StringOffset
	}
	return nil
}

func (m *Expression) GetStringLength() *StringLength {
	if x, ok := m.GetExpression().(*Expression_StringLength); ok {
		return x.StringLength
	}
	return nil
}

func (m *Expression) GetIdentifier() *Identifier {
	if x, ok := m.GetExpression().(*Expression_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (m *Expression) GetIntegerFunction() *IntegerFunction {
	if x, ok := m.GetExpression().(*Expression_IntegerFunction); ok {
		return x.IntegerFunction
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Expression) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Expression_BoolValue)(nil),
		(*Expression_BinaryExpression)(nil),
		(*Expression_UnaryExpression)(nil),
		(*Expression_StringIdentifier)(nil),
		(*Expression_ForInExpression)(nil),
		(*Expression_ForOfExpression)(nil),
		(*Expression_NotExpression)(nil),
		(*Expression_OrExpression)(nil),
		(*Expression_AndExpression)(nil),
		(*Expression_Range)(nil),
		(*Expression_Regexp)(nil),
		(*Expression_Keyword)(nil),
		(*Expression_NumberValue)(nil),
		(*Expression_DoubleValue)(nil),
		(*Expression_Text)(nil),
		(*Expression_StringCount)(nil),
		(*Expression_StringOffset)(nil),
		(*Expression_StringLength)(nil),
		(*Expression_Identifier)(nil),
		(*Expression_IntegerFunction)(nil),
	}
}

type StringOffset struct {
	StringIdentifier     *string     `protobuf:"bytes,1,opt,name=string_identifier,json=stringIdentifier" json:"string_identifier,omitempty"`
	Index                *Expression `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StringOffset) Reset()         { *m = StringOffset{} }
func (m *StringOffset) String() string { return proto.CompactTextString(m) }
func (*StringOffset) ProtoMessage()    {}
func (*StringOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{17}
}

func (m *StringOffset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringOffset.Unmarshal(m, b)
}
func (m *StringOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringOffset.Marshal(b, m, deterministic)
}
func (m *StringOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringOffset.Merge(m, src)
}
func (m *StringOffset) XXX_Size() int {
	return xxx_messageInfo_StringOffset.Size(m)
}
func (m *StringOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_StringOffset.DiscardUnknown(m)
}

var xxx_messageInfo_StringOffset proto.InternalMessageInfo

func (m *StringOffset) GetStringIdentifier() string {
	if m != nil && m.StringIdentifier != nil {
		return *m.StringIdentifier
	}
	return ""
}

func (m *StringOffset) GetIndex() *Expression {
	if m != nil {
		return m.Index
	}
	return nil
}

type StringLength struct {
	StringIdentifier     *string     `protobuf:"bytes,1,opt,name=string_identifier,json=stringIdentifier" json:"string_identifier,omitempty"`
	Index                *Expression `protobuf:"bytes,2,opt,name=index" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StringLength) Reset()         { *m = StringLength{} }
func (m *StringLength) String() string { return proto.CompactTextString(m) }
func (*StringLength) ProtoMessage()    {}
func (*StringLength) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{18}
}

func (m *StringLength) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringLength.Unmarshal(m, b)
}
func (m *StringLength) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringLength.Marshal(b, m, deterministic)
}
func (m *StringLength) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringLength.Merge(m, src)
}
func (m *StringLength) XXX_Size() int {
	return xxx_messageInfo_StringLength.Size(m)
}
func (m *StringLength) XXX_DiscardUnknown() {
	xxx_messageInfo_StringLength.DiscardUnknown(m)
}

var xxx_messageInfo_StringLength proto.InternalMessageInfo

func (m *StringLength) GetStringIdentifier() string {
	if m != nil && m.StringIdentifier != nil {
		return *m.StringIdentifier
	}
	return ""
}

func (m *StringLength) GetIndex() *Expression {
	if m != nil {
		return m.Index
	}
	return nil
}

type Identifier struct {
	Items                []*Identifier_IdentifierItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{19}
}

func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (m *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(m, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

func (m *Identifier) GetItems() []*Identifier_IdentifierItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type Identifier_IdentifierItem struct {
	// Types that are valid to be assigned to Item:
	//	*Identifier_IdentifierItem_Identifier
	//	*Identifier_IdentifierItem_Expression
	//	*Identifier_IdentifierItem_Arguments
	Item                 isIdentifier_IdentifierItem_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Identifier_IdentifierItem) Reset()         { *m = Identifier_IdentifierItem{} }
func (m *Identifier_IdentifierItem) String() string { return proto.CompactTextString(m) }
func (*Identifier_IdentifierItem) ProtoMessage()    {}
func (*Identifier_IdentifierItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{19, 0}
}

func (m *Identifier_IdentifierItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier_IdentifierItem.Unmarshal(m, b)
}
func (m *Identifier_IdentifierItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier_IdentifierItem.Marshal(b, m, deterministic)
}
func (m *Identifier_IdentifierItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier_IdentifierItem.Merge(m, src)
}
func (m *Identifier_IdentifierItem) XXX_Size() int {
	return xxx_messageInfo_Identifier_IdentifierItem.Size(m)
}
func (m *Identifier_IdentifierItem) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier_IdentifierItem.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier_IdentifierItem proto.InternalMessageInfo

type isIdentifier_IdentifierItem_Item interface {
	isIdentifier_IdentifierItem_Item()
}

type Identifier_IdentifierItem_Identifier struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,oneof"`
}

type Identifier_IdentifierItem_Expression struct {
	Expression *Expression `protobuf:"bytes,2,opt,name=expression,oneof"`
}

type Identifier_IdentifierItem_Arguments struct {
	Arguments *Expressions `protobuf:"bytes,3,opt,name=arguments,oneof"`
}

func (*Identifier_IdentifierItem_Identifier) isIdentifier_IdentifierItem_Item() {}

func (*Identifier_IdentifierItem_Expression) isIdentifier_IdentifierItem_Item() {}

func (*Identifier_IdentifierItem_Arguments) isIdentifier_IdentifierItem_Item() {}

func (m *Identifier_IdentifierItem) GetItem() isIdentifier_IdentifierItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Identifier_IdentifierItem) GetIdentifier() string {
	if x, ok := m.GetItem().(*Identifier_IdentifierItem_Identifier); ok {
		return x.Identifier
	}
	return ""
}

func (m *Identifier_IdentifierItem) GetExpression() *Expression {
	if x, ok := m.GetItem().(*Identifier_IdentifierItem_Expression); ok {
		return x.Expression
	}
	return nil
}

func (m *Identifier_IdentifierItem) GetArguments() *Expressions {
	if x, ok := m.GetItem().(*Identifier_IdentifierItem_Arguments); ok {
		return x.Arguments
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Identifier_IdentifierItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Identifier_IdentifierItem_Identifier)(nil),
		(*Identifier_IdentifierItem_Expression)(nil),
		(*Identifier_IdentifierItem_Arguments)(nil),
	}
}

type Expressions struct {
	Terms                []*Expression `protobuf:"bytes,1,rep,name=terms" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Expressions) Reset()         { *m = Expressions{} }
func (m *Expressions) String() string { return proto.CompactTextString(m) }
func (*Expressions) ProtoMessage()    {}
func (*Expressions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{20}
}

func (m *Expressions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Expressions.Unmarshal(m, b)
}
func (m *Expressions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Expressions.Marshal(b, m, deterministic)
}
func (m *Expressions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expressions.Merge(m, src)
}
func (m *Expressions) XXX_Size() int {
	return xxx_messageInfo_Expressions.Size(m)
}
func (m *Expressions) XXX_DiscardUnknown() {
	xxx_messageInfo_Expressions.DiscardUnknown(m)
}

var xxx_messageInfo_Expressions proto.InternalMessageInfo

func (m *Expressions) GetTerms() []*Expression {
	if m != nil {
		return m.Terms
	}
	return nil
}

type Rule struct {
	Modifiers            *RuleModifiers `protobuf:"bytes,1,opt,name=modifiers" json:"modifiers,omitempty"`
	Identifier           *string        `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	Tags                 []string       `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Meta                 []*Meta        `protobuf:"bytes,4,rep,name=meta" json:"meta,omitempty"`
	Strings              []*String      `protobuf:"bytes,5,rep,name=strings" json:"strings,omitempty"`
	Condition            *Expression    `protobuf:"bytes,6,opt,name=condition" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{21}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetModifiers() *RuleModifiers {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

func (m *Rule) GetIdentifier() string {
	if m != nil && m.Identifier != nil {
		return *m.Identifier
	}
	return ""
}

func (m *Rule) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Rule) GetMeta() []*Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Rule) GetStrings() []*String {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *Rule) GetCondition() *Expression {
	if m != nil {
		return m.Condition
	}
	return nil
}

type RuleSet struct {
	Imports              []string `protobuf:"bytes,1,rep,name=imports" json:"imports,omitempty"`
	Includes             []string `protobuf:"bytes,2,rep,name=includes" json:"includes,omitempty"`
	Rules                []*Rule  `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleSet) Reset()         { *m = RuleSet{} }
func (m *RuleSet) String() string { return proto.CompactTextString(m) }
func (*RuleSet) ProtoMessage()    {}
func (*RuleSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d77fb8da6c18f8f, []int{22}
}

func (m *RuleSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleSet.Unmarshal(m, b)
}
func (m *RuleSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleSet.Marshal(b, m, deterministic)
}
func (m *RuleSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleSet.Merge(m, src)
}
func (m *RuleSet) XXX_Size() int {
	return xxx_messageInfo_RuleSet.Size(m)
}
func (m *RuleSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleSet.DiscardUnknown(m)
}

var xxx_messageInfo_RuleSet proto.InternalMessageInfo

func (m *RuleSet) GetImports() []string {
	if m != nil {
		return m.Imports
	}
	return nil
}

func (m *RuleSet) GetIncludes() []string {
	if m != nil {
		return m.Includes
	}
	return nil
}

func (m *RuleSet) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterEnum("Keyword", Keyword_name, Keyword_value)
	proto.RegisterEnum("ForKeyword", ForKeyword_name, ForKeyword_value)
	proto.RegisterEnum("StringSetKeyword", StringSetKeyword_name, StringSetKeyword_value)
	proto.RegisterEnum("String_Type", String_Type_name, String_Type_value)
	proto.RegisterEnum("BinaryExpression_Operator", BinaryExpression_Operator_name, BinaryExpression_Operator_value)
	proto.RegisterEnum("UnaryExpression_Operator", UnaryExpression_Operator_name, UnaryExpression_Operator_value)
	proto.RegisterType((*RuleModifiers)(nil), "RuleModifiers")
	proto.RegisterType((*Meta)(nil), "Meta")
	proto.RegisterType((*StringModifiers)(nil), "StringModifiers")
	proto.RegisterType((*String)(nil), "String")
	proto.RegisterType((*BinaryExpression)(nil), "BinaryExpression")
	proto.RegisterType((*UnaryExpression)(nil), "UnaryExpression")
	proto.RegisterType((*Range)(nil), "Range")
	proto.RegisterType((*Regexp)(nil), "Regexp")
	proto.RegisterType((*IntegerFunction)(nil), "IntegerFunction")
	proto.RegisterType((*ForInExpression)(nil), "ForInExpression")
	proto.RegisterType((*IntegerSet)(nil), "IntegerSet")
	proto.RegisterType((*IntegerEnumeration)(nil), "IntegerEnumeration")
	proto.RegisterType((*ForExpression)(nil), "ForExpression")
	proto.RegisterType((*ForOfExpression)(nil), "ForOfExpression")
	proto.RegisterType((*StringSet)(nil), "StringSet")
	proto.RegisterType((*StringEnumeration)(nil), "StringEnumeration")
	proto.RegisterType((*StringEnumeration_StringEnumerationItem)(nil), "StringEnumeration.StringEnumerationItem")
	proto.RegisterType((*Expression)(nil), "Expression")
	proto.RegisterType((*StringOffset)(nil), "StringOffset")
	proto.RegisterType((*StringLength)(nil), "StringLength")
	proto.RegisterType((*Identifier)(nil), "Identifier")
	proto.RegisterType((*Identifier_IdentifierItem)(nil), "Identifier.IdentifierItem")
	proto.RegisterType((*Expressions)(nil), "Expressions")
	proto.RegisterType((*Rule)(nil), "Rule")
	proto.RegisterType((*RuleSet)(nil), "RuleSet")
}

func init() { proto.RegisterFile("yara.proto", fileDescriptor_7d77fb8da6c18f8f) }

var fileDescriptor_7d77fb8da6c18f8f = []byte{
	// 1645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x17, 0xdb, 0x6e, 0xe3, 0xc6,
	0x55, 0xd4, 0x8d, 0xd2, 0xd1, 0x6d, 0x34, 0xeb, 0x14, 0x8a, 0xdb, 0x6e, 0x6c, 0xba, 0x40, 0x9d,
	0x4d, 0x2c, 0xa4, 0xee, 0xa6, 0x40, 0x1e, 0x12, 0x54, 0xf6, 0x52, 0x16, 0x11, 0x99, 0x4a, 0x46,
	0x54, 0xd6, 0x1b, 0x14, 0x15, 0x68, 0x6b, 0x24, 0x13, 0x91, 0x48, 0x95, 0xa4, 0xb2, 0x36, 0xfa,
	0xde, 0x5f, 0xc8, 0x53, 0x81, 0x7e, 0x42, 0xfb, 0xde, 0xb7, 0x7e, 0x41, 0x1f, 0x0a, 0xf4, 0x73,
	0x8a, 0xb9, 0x50, 0xbc, 0x48, 0x89, 0x11, 0x34, 0x4f, 0x9c, 0x73, 0x9b, 0x39, 0xf7, 0x73, 0x08,
	0xf0, 0x68, 0xfb, 0x76, 0x77, 0xed, 0x7b, 0xa1, 0xa7, 0xf5, 0xa0, 0x41, 0x36, 0x4b, 0x7a, 0xed,
	0xcd, 0x9c, 0xb9, 0x43, 0xfd, 0x00, 0xff, 0x0c, 0xca, 0x8b, 0xa5, 0x77, 0x6b, 0x2f, 0x3b, 0xca,
	0x91, 0x72, 0x5a, 0x21, 0x12, 0xc2, 0x1d, 0x50, 0xd7, 0xbe, 0xf3, 0xad, 0x1d, 0xd2, 0x4e, 0x9e,
	0x13, 0x22, 0x50, 0x5b, 0x41, 0xf1, 0x9a, 0x86, 0x36, 0x46, 0x50, 0xf8, 0x86, 0x3e, 0x72, 0xb1,
	0x2a, 0x61, 0x47, 0x7c, 0x00, 0xc5, 0x90, 0x3e, 0x84, 0x5c, 0xa0, 0x3a, 0xc8, 0x11, 0x0e, 0xe1,
	0x0e, 0x94, 0xdd, 0xcd, 0xea, 0x96, 0xfa, 0x9d, 0xc2, 0x91, 0x72, 0x5a, 0x18, 0xe4, 0x88, 0x84,
	0xf1, 0x21, 0xa8, 0xb7, 0x9e, 0xb7, 0xa4, 0xb6, 0xdb, 0x29, 0xb2, 0x37, 0x06, 0x39, 0x12, 0x21,
	0x2e, 0x54, 0x28, 0x7d, 0x6b, 0x2f, 0x37, 0x54, 0xfb, 0xab, 0x02, 0xad, 0x71, 0xe8, 0x3b, 0xee,
	0x22, 0xa5, 0xb4, 0xeb, 0xdd, 0xd9, 0x01, 0x8d, 0x94, 0x16, 0x10, 0x3e, 0x80, 0x92, 0x1d, 0xdc,
	0x39, 0x8e, 0x54, 0x59, 0x00, 0x18, 0x43, 0xf1, 0xad, 0x33, 0xa3, 0xfc, 0xf9, 0x0a, 0xe1, 0x67,
	0x7c, 0x08, 0x95, 0xf9, 0x66, 0xb9, 0x7c, 0xeb, 0xf9, 0x33, 0xf1, 0x36, 0xd9, 0xc2, 0xcc, 0xb0,
	0x07, 0xcf, 0xef, 0x94, 0x38, 0x9a, 0x1d, 0x71, 0x1d, 0x14, 0xa7, 0x53, 0xe6, 0xb0, 0xe2, 0x30,
	0x28, 0xe8, 0xa8, 0x02, 0x0a, 0xb4, 0x7f, 0x28, 0x50, 0x16, 0xfa, 0xe1, 0x26, 0xe4, 0x9d, 0x99,
	0x74, 0x48, 0xde, 0x99, 0xe1, 0x23, 0x28, 0x86, 0x8f, 0x6b, 0xe1, 0xc0, 0xe6, 0x79, 0xbd, 0x2b,
	0xd8, 0xba, 0xd6, 0xe3, 0x9a, 0x12, 0x4e, 0x61, 0xaa, 0x71, 0x8f, 0x15, 0xb8, 0x8c, 0xf0, 0x57,
	0x17, 0xaa, 0xab, 0xc8, 0x52, 0xae, 0x5b, 0xed, 0x1c, 0x75, 0x33, 0x1e, 0x20, 0x31, 0x8b, 0xf6,
	0x1b, 0x28, 0xb2, 0x1b, 0x71, 0x0d, 0xd4, 0x89, 0xf9, 0xb9, 0x39, 0x7a, 0x6d, 0xa2, 0x1c, 0xae,
	0x40, 0xd1, 0xd2, 0x6f, 0x2c, 0xa4, 0x60, 0x15, 0x0a, 0x03, 0xfd, 0x06, 0xe5, 0x71, 0x15, 0x4a,
	0x44, 0xbf, 0xd2, 0x6f, 0x50, 0x41, 0xfb, 0xae, 0x00, 0xe8, 0xc2, 0x71, 0x6d, 0xff, 0x51, 0x7f,
	0x58, 0xfb, 0x34, 0x08, 0x1c, 0xcf, 0xc5, 0xbf, 0x83, 0x8a, 0xb7, 0xa6, 0xbe, 0x1d, 0x7a, 0x3e,
	0xb7, 0xa1, 0x79, 0x7e, 0xd8, 0xcd, 0x32, 0x75, 0x47, 0x92, 0x83, 0x6c, 0x79, 0xf1, 0x7b, 0x50,
	0x5c, 0xd2, 0xb9, 0x88, 0x7a, 0xed, 0xbc, 0xd6, 0x8d, 0xb9, 0x09, 0x27, 0xe0, 0x63, 0x28, 0xf9,
	0xce, 0xe2, 0x5e, 0x58, 0x99, 0xe1, 0x10, 0x14, 0xed, 0x2f, 0x79, 0xa8, 0x44, 0x57, 0xa7, 0x0d,
	0xa9, 0x81, 0x7a, 0xdd, 0xb3, 0x2e, 0x07, 0xfa, 0x18, 0x29, 0xb8, 0x0e, 0x95, 0xcb, 0x91, 0x69,
	0xf5, 0x0c, 0x73, 0x8c, 0xf2, 0xb8, 0x0c, 0xf9, 0x9e, 0x85, 0x0a, 0xec, 0x6b, 0x98, 0xa8, 0xc8,
	0xbe, 0x43, 0x0b, 0x95, 0xd8, 0xf7, 0xca, 0x42, 0x65, 0x0e, 0xeb, 0x48, 0xe5, 0xb0, 0x8e, 0x2a,
	0xec, 0xab, 0x7f, 0x89, 0xaa, 0xcc, 0x23, 0xa6, 0xfe, 0x25, 0x02, 0x7c, 0x00, 0xc8, 0x30, 0x2d,
	0xfd, 0x4a, 0x27, 0xd3, 0xfe, 0xc4, 0xbc, 0xb4, 0x8c, 0x91, 0x89, 0x6a, 0xcc, 0x75, 0x5f, 0x0c,
	0x27, 0x63, 0x54, 0x67, 0x1e, 0xbb, 0x36, 0xcc, 0xc9, 0x18, 0x35, 0xd8, 0xd1, 0x32, 0xae, 0xf5,
	0x31, 0x6a, 0x32, 0xf1, 0x57, 0xc6, 0x57, 0xa8, 0xc5, 0x0e, 0xd7, 0xa3, 0x57, 0x08, 0xb1, 0xc3,
	0xcd, 0x88, 0xa0, 0x36, 0x6e, 0x41, 0xed, 0xc2, 0xb0, 0x5e, 0x1b, 0x63, 0x7d, 0xda, 0x33, 0x5f,
	0x21, 0x8c, 0x9b, 0x00, 0x11, 0x62, 0x44, 0xd0, 0x33, 0x06, 0x8f, 0x07, 0x46, 0xdf, 0x9a, 0x0e,
	0xf5, 0xbe, 0x85, 0x0e, 0x98, 0x80, 0x80, 0x89, 0x71, 0x35, 0xb0, 0xd0, 0x3b, 0xda, 0xdf, 0x15,
	0x68, 0x4d, 0x32, 0x81, 0xf9, 0x78, 0x27, 0x30, 0xef, 0x76, 0x27, 0x4f, 0xc7, 0xe5, 0x03, 0x00,
	0xba, 0x65, 0xd8, 0x17, 0x9d, 0x04, 0x59, 0xfb, 0xe4, 0xfb, 0xfc, 0xdf, 0x82, 0xda, 0xc4, 0xec,
	0x91, 0x37, 0x53, 0xe1, 0x09, 0x25, 0x69, 0xa3, 0x39, 0xb2, 0x50, 0x5e, 0x33, 0xa0, 0x44, 0x6c,
	0x77, 0x41, 0x59, 0x9c, 0x83, 0xd0, 0xf6, 0x43, 0xae, 0x64, 0x36, 0xce, 0x9c, 0x82, 0x7f, 0x09,
	0x05, 0xea, 0xce, 0xf6, 0x29, 0xc3, 0xf0, 0xda, 0x10, 0xca, 0x84, 0x2e, 0xe8, 0xc3, 0x7a, 0x5b,
	0x18, 0xca, 0xf7, 0x15, 0x46, 0xfe, 0xe9, 0xc2, 0xf8, 0x1a, 0x5a, 0x86, 0x1b, 0xd2, 0x05, 0xf5,
	0xfb, 0x1b, 0xf7, 0x2e, 0x64, 0xae, 0xe4, 0x65, 0x2f, 0xce, 0xf2, 0xea, 0x2d, 0xfc, 0xe3, 0xfc,
	0xf5, 0x2f, 0x05, 0x5a, 0x7d, 0xcf, 0x37, 0xdc, 0x54, 0x9c, 0x9a, 0x73, 0xcf, 0x9f, 0x26, 0x2e,
	0x11, 0x8e, 0x68, 0x76, 0xfb, 0x9e, 0x9f, 0xb8, 0xa7, 0x31, 0x4f, 0x82, 0xf8, 0x39, 0x80, 0x33,
	0xa3, 0x6e, 0xc8, 0xb5, 0x16, 0xbd, 0x93, 0x24, 0x30, 0xf8, 0x43, 0xa8, 0x39, 0xc2, 0x8c, 0x69,
	0x40, 0xe3, 0x22, 0x92, 0xa6, 0x8d, 0x69, 0x48, 0xc0, 0xd9, 0x9e, 0x33, 0x56, 0x14, 0x7f, 0xd8,
	0x8a, 0x3f, 0x03, 0xc4, 0xd7, 0xe0, 0x3e, 0x3c, 0x8b, 0x1e, 0xa2, 0xee, 0x66, 0xc5, 0xb2, 0x21,
	0x36, 0xe2, 0x59, 0xf4, 0xa0, 0x1e, 0x93, 0x06, 0x39, 0x82, 0x9d, 0x1d, 0x2c, 0x7e, 0x0e, 0x25,
	0x9f, 0x25, 0x84, 0xf4, 0x61, 0xb9, 0xcb, 0xd3, 0x63, 0x90, 0x23, 0x02, 0x7d, 0x51, 0x82, 0x42,
	0x40, 0x43, 0xed, 0x13, 0xc0, 0xbb, 0x57, 0xe2, 0x13, 0x28, 0xf3, 0xbe, 0x1f, 0x74, 0x94, 0xa3,
	0x42, 0x56, 0x77, 0x49, 0xd2, 0x5c, 0x68, 0xa4, 0x5c, 0x8a, 0xcf, 0x52, 0x56, 0xef, 0xe6, 0xdf,
	0x20, 0x97, 0xb4, 0x1b, 0xff, 0x1a, 0xd4, 0x6f, 0xe8, 0x23, 0x6f, 0xfe, 0xa2, 0x37, 0xd7, 0x58,
	0x88, 0x3e, 0x17, 0x28, 0x36, 0x85, 0x24, 0x95, 0xa9, 0x3a, 0xf7, 0x7c, 0xed, 0x6f, 0x22, 0xda,
	0xa3, 0xf9, 0xff, 0x1f, 0xed, 0xf7, 0x01, 0x02, 0x9e, 0xb2, 0x3c, 0x98, 0xc2, 0x43, 0x20, 0xb3,
	0x98, 0xc5, 0xb2, 0x1a, 0x44, 0xc7, 0x4c, 0x28, 0x0b, 0x3f, 0x1c, 0xca, 0x3f, 0x41, 0x75, 0x7b,
	0x09, 0xee, 0x82, 0x2a, 0xae, 0x09, 0xa4, 0x52, 0x58, 0xbe, 0x90, 0x0e, 0x5e, 0xc4, 0x84, 0xcf,
	0xb2, 0xfe, 0x68, 0xc7, 0x1a, 0xed, 0xf7, 0x0a, 0x0b, 0xe0, 0x3f, 0x15, 0x68, 0xef, 0x5c, 0x8b,
	0x3f, 0x83, 0x92, 0x13, 0xd2, 0x55, 0x14, 0xbf, 0xd3, 0xdd, 0x97, 0x77, 0x31, 0x46, 0x48, 0x57,
	0x44, 0x88, 0x1d, 0x2e, 0xe0, 0x9d, 0xbd, 0x74, 0xfc, 0x01, 0xb4, 0xa5, 0xe7, 0x12, 0xe5, 0x22,
	0x8a, 0x18, 0x09, 0x82, 0x11, 0x17, 0xcd, 0x31, 0xd4, 0xef, 0xed, 0x60, 0xfa, 0xd6, 0x59, 0xce,
	0xee, 0x6c, 0x69, 0x56, 0x85, 0xd4, 0xee, 0xed, 0xe0, 0xb5, 0x44, 0x69, 0xff, 0x51, 0x01, 0x12,
	0x81, 0x79, 0x0f, 0x80, 0xed, 0x1e, 0x53, 0x9e, 0x62, 0x62, 0xaf, 0x18, 0xe4, 0x48, 0x95, 0xe1,
	0xbe, 0x62, 0x28, 0xfc, 0x7b, 0x68, 0xdf, 0xf2, 0x71, 0x38, 0xdd, 0x69, 0x13, 0xed, 0x9d, 0x41,
	0x39, 0xc8, 0x11, 0x74, 0x9b, 0x9d, 0xb0, 0x9f, 0x02, 0xda, 0x64, 0x2f, 0x28, 0xc8, 0x3e, 0x36,
	0xd9, 0x91, 0x6f, 0x6d, 0x32, 0xe2, 0x67, 0xfb, 0x1c, 0x50, 0x94, 0xbb, 0xd6, 0xae, 0x0b, 0x3e,
	0x83, 0x36, 0x4b, 0x50, 0xc7, 0x4d, 0x3e, 0x57, 0x92, 0xcf, 0x65, 0x7a, 0x17, 0x7b, 0x6e, 0x9e,
	0x69, 0x67, 0x52, 0xde, 0x9b, 0x27, 0xe5, 0xcb, 0xb1, 0x7c, 0xb2, 0x1a, 0xa4, 0x7c, 0xaa, 0x40,
	0x5e, 0x42, 0xd3, 0xf5, 0xc2, 0xa4, 0xb0, 0xba, 0xaf, 0x2e, 0x1b, 0xae, 0x17, 0x26, 0xa4, 0x7e,
	0x0b, 0x8d, 0x74, 0x55, 0x55, 0xb8, 0x50, 0x3d, 0x21, 0x14, 0x0c, 0x72, 0xa4, 0x9e, 0x2a, 0xaa,
	0x8f, 0xa1, 0x69, 0xbb, 0xb3, 0xa4, 0x54, 0x75, 0xaf, 0x54, 0xc3, 0x76, 0x67, 0xa9, 0xce, 0x2b,
	0x1b, 0x15, 0xec, 0x6d, 0x54, 0xf8, 0x18, 0xca, 0x3e, 0x1f, 0x47, 0x9d, 0x1a, 0x67, 0x50, 0xbb,
	0x62, 0x3a, 0xb1, 0x15, 0x56, 0x10, 0xf0, 0xaf, 0xe2, 0xca, 0xa9, 0xf3, 0xca, 0xa9, 0x74, 0x77,
	0x0b, 0x06, 0x9f, 0x40, 0x5d, 0xac, 0xbc, 0x32, 0xbb, 0x1a, 0x72, 0x11, 0xae, 0x09, 0xac, 0xc8,
	0xaf, 0x13, 0xa8, 0xcf, 0xbc, 0xcd, 0xed, 0x92, 0x4a, 0xa6, 0xe6, 0x91, 0x72, 0xaa, 0x30, 0x26,
	0x81, 0x15, 0x4c, 0xd1, 0x8a, 0xdd, 0x4a, 0xad, 0xd8, 0x27, 0x50, 0x97, 0x99, 0x71, 0xe7, 0x6d,
	0xdc, 0xb0, 0x83, 0x24, 0xb5, 0x26, 0xb0, 0x97, 0x0c, 0x89, 0x5f, 0x42, 0x43, 0x32, 0x79, 0xf3,
	0x39, 0x6b, 0x3e, 0x6d, 0x6e, 0x54, 0x43, 0x96, 0xe3, 0x88, 0x23, 0x99, 0x6b, 0x83, 0x04, 0x9c,
	0x90, 0x5a, 0x52, 0x77, 0x11, 0xde, 0x77, 0x70, 0x4a, 0x6a, 0xc8, 0x91, 0xb1, 0x94, 0x80, 0x59,
	0x3f, 0x4e, 0xe4, 0xe8, 0xb3, 0x68, 0x64, 0x6d, 0x51, 0xac, 0x1f, 0x27, 0x46, 0xdc, 0xa7, 0x80,
	0xa2, 0xc9, 0xb3, 0x1d, 0xcf, 0x07, 0x32, 0xd3, 0x32, 0x23, 0x9c, 0x65, 0x9a, 0x93, 0x46, 0x5d,
	0xd4, 0x93, 0x8d, 0x52, 0xfb, 0x23, 0xd4, 0x93, 0x16, 0xfd, 0xd8, 0xbe, 0x51, 0x72, 0xdc, 0x19,
	0x7d, 0xd8, 0x37, 0xff, 0x05, 0x25, 0xbe, 0x5f, 0xda, 0xfa, 0x53, 0xdf, 0xff, 0x5f, 0x05, 0x20,
	0x21, 0xf1, 0x51, 0xba, 0x9f, 0x1e, 0x26, 0xbc, 0x98, 0x38, 0x26, 0x3b, 0xe8, 0x77, 0x0a, 0x34,
	0xd3, 0x14, 0x7c, 0x94, 0x8a, 0x87, 0x22, 0xd3, 0x23, 0x19, 0x82, 0xb3, 0x27, 0xb6, 0x9f, 0xcc,
	0x04, 0xfd, 0x10, 0xaa, 0xb6, 0xbf, 0xd8, 0xac, 0xa8, 0x1b, 0x06, 0xb2, 0x87, 0x65, 0x8b, 0x2d,
	0x66, 0xb8, 0x28, 0x43, 0x91, 0xa9, 0xa6, 0x7d, 0x04, 0xb5, 0x04, 0x0f, 0x73, 0x46, 0x48, 0xfd,
	0xd5, 0xde, 0x51, 0x2f, 0x28, 0xda, 0xbf, 0x15, 0x28, 0xb2, 0x1f, 0x56, 0xf6, 0x60, 0xbc, 0xfc,
	0x45, 0x93, 0x36, 0xf5, 0x2b, 0x9b, 0x58, 0xfd, 0x9e, 0xdc, 0xa9, 0xd8, 0x7a, 0x69, 0x2f, 0x98,
	0xe6, 0x05, 0xbe, 0x5e, 0xda, 0x8b, 0x00, 0xbf, 0x0b, 0xc5, 0x15, 0x0d, 0xed, 0x4e, 0x91, 0x2b,
	0x53, 0xea, 0xb2, 0x9f, 0x5c, 0xc2, 0x51, 0xf8, 0x38, 0x9e, 0xa7, 0x25, 0x4e, 0x55, 0x65, 0xfa,
	0xc7, 0x23, 0xf4, 0x7d, 0xa8, 0xde, 0x79, 0xee, 0xcc, 0x09, 0xe3, 0x2e, 0x99, 0xb2, 0x27, 0xa6,
	0x6a, 0x7f, 0x00, 0x95, 0x29, 0xce, 0x06, 0x75, 0x07, 0x54, 0x67, 0xb5, 0xf6, 0xfc, 0x50, 0xf8,
	0xa0, 0x4a, 0x22, 0x90, 0x6d, 0xaa, 0x8e, 0x7b, 0xb7, 0xdc, 0xcc, 0x28, 0xdb, 0x75, 0x19, 0x69,
	0x0b, 0xe3, 0x9f, 0x43, 0xc9, 0xdf, 0x2c, 0xa9, 0x50, 0x9f, 0xa9, 0xca, 0xae, 0x23, 0x02, 0xf7,
	0xe2, 0x25, 0xa8, 0xb2, 0x03, 0x25, 0x17, 0x79, 0x85, 0xfd, 0x7a, 0xe8, 0xa6, 0x45, 0xde, 0x7c,
	0x31, 0x32, 0x4c, 0x0b, 0xe5, 0xd9, 0xbf, 0x54, 0xdf, 0x18, 0xea, 0x63, 0xe3, 0x6b, 0x1d, 0x15,
	0x5e, 0x3c, 0x07, 0x88, 0x37, 0x20, 0xf6, 0x43, 0xd3, 0x1b, 0x0e, 0xc5, 0xcf, 0x63, 0xcf, 0x7c,
	0x83, 0xf2, 0x2f, 0x7e, 0x01, 0x28, 0xbb, 0x11, 0xf0, 0x7f, 0xcc, 0x81, 0x7e, 0x8d, 0x94, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x01, 0xa5, 0xb1, 0x07, 0x62, 0x10, 0x00, 0x00,
}
